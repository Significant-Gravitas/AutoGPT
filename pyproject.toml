[tool.poetry]
name = "agbenchmark"
version = "0.0.2"
description = "Benchmarking the performance of agents far and wide, regardless of how they are set up and how they work"
authors = ["Silen Naihin <silen.naihin@gmail.com>"]
license = "MIT"
readme = "README.md"
packages = [{include = "agbenchmark"}]

[tool.poetry.dependencies]
python = "^3.10"
pytest = "^7.3.2"
requests = "^2.31.0"
openai = "^0.27.8"
pydantic = "^1.10.9"
pytest-depends = "^1.0.1"
python-dotenv = "^0.21.0"
click = "^8.1.3"
types-requests = "^2.31.0.1"
pexpect = "^4.8.0"
psutil = "^5.9.5"

[tool.poetry.group.dev.dependencies]
flake8 = "^3.9.2"
mypy = "^0.910"
isort = "^5.9.3"
black = "22.3"
autoflake = "^1.4"
pandas = "^2.0.3"
gspread = "^5.10.0"
oauth2client = "^4.1.3"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q"
testpaths = [
    "tests", "agbenchmark",
]
markers = [
    "retrieval",
    "interface",
    "code",
    "memory",
    "iterate"
]

[tool.poetry.scripts]
agbenchmark = "agbenchmark.start_benchmark:cli"

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
packages = ["autogpt"]
extend-exclude = '(/dist|/.venv|/venv|/build|/agent)/'

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
skip_glob = [".tox", "__pycache__", "*.pyc", "venv*/*", "reports", "venv", "env", "node_modules", ".env", ".venv", "dist", "agent/*"]
