import { Input } from "@/components/atoms/Input/Input";
import { Button } from "@/components/atoms/Button/Button";
import { Dialog } from "@/components/molecules/Dialog/Dialog";
import {
  Form,
  FormDescription,
  FormField,
} from "@/components/__legacy__/ui/form";
import { BlockIOCredentialsSubSchema } from "@/lib/autogpt-server-api/types"; // we need to find a way to replace it with autogenerated types
import { useAPIKeyCredentialsModal } from "./useAPIKeyCredentialsModal";
import { toDisplayName } from "../../helpers";
import { KeyIcon } from "@phosphor-icons/react";
import { Text } from "@/components/atoms/Text/Text";

type Props = {
  schema: BlockIOCredentialsSubSchema;

  onSuccess: (credentialId: string) => void;
};

export function APIKeyCredentialsModal({ schema, onSuccess }: Props) {
  const {
    form,
    isLoading,
    schemaDescription,
    onSubmit,
    provider,
    isOpen,
    setIsOpen,
  } = useAPIKeyCredentialsModal({ schema, onSuccess });

  if (isLoading) {
    return null;
  }

  return (
    <>
      <Dialog
        title={`Add new API key for ${toDisplayName(provider) ?? ""}`}
        controlled={{
          isOpen: isOpen,
          set: (isOpen) => {
            if (!isOpen) setIsOpen(false);
          },
        }}
        onClose={() => setIsOpen(false)}
        styling={{
          maxWidth: "25rem",
        }}
      >
        <Dialog.Content>
          {schemaDescription && (
            <p className="mb-4 text-sm text-zinc-600">{schemaDescription}</p>
          )}

          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-2">
              <FormField
                control={form.control}
                name="apiKey"
                render={({ field }) => (
                  <>
                    <Input
                      id="apiKey"
                      label="API Key"
                      type="password"
                      placeholder="Enter API key..."
                      size="small"
                      hint={
                        schema.credentials_scopes ? (
                          <FormDescription>
                            Required scope(s) for this block:{" "}
                            {schema.credentials_scopes?.map((s, i, a) => (
                              <span key={i}>
                                <code className="text-xs font-bold">{s}</code>
                                {i < a.length - 1 && ", "}
                              </span>
                            ))}
                          </FormDescription>
                        ) : null
                      }
                      {...field}
                    />
                  </>
                )}
              />
              <FormField
                control={form.control}
                name="title"
                render={({ field }) => (
                  <Input
                    id="title"
                    label="Name"
                    type="text"
                    placeholder="Enter a name for this API key..."
                    size="small"
                    {...field}
                  />
                )}
              />
              <FormField
                control={form.control}
                name="expiresAt"
                render={({ field }) => (
                  <Input
                    id="expiresAt"
                    label="Expiration Date"
                    type="datetime-local"
                    placeholder="Select expiration date..."
                    size="small"
                    {...field}
                  />
                )}
              />
              <Button type="submit" size="small" className="min-w-68">
                Save & use this API key
              </Button>
            </form>
          </Form>
        </Dialog.Content>
      </Dialog>
      <Button
        type="button"
        className="w-auto min-w-0"
        size="small"
        onClick={() => setIsOpen(true)}
      >
        <KeyIcon />
        <Text variant="body-medium" className="!text-white opacity-100">
          Add API key
        </Text>
      </Button>
    </>
  );
}
