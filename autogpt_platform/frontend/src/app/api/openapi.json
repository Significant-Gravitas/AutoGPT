{
  "openapi": "3.1.0",
  "info": {
    "title": "AutoGPT Agent Server",
    "summary": "AutoGPT Agent Server",
    "description": "This server is used to execute agents that are created by the AutoGPT system.",
    "version": "0.1"
  },
  "paths": {
    "/api/integrations/{provider}/login": {
      "get": {
        "tags": ["v1", "integrations"],
        "summary": "Login",
        "operationId": "getV1Login",
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProviderName",
              "title": "The provider to initiate an OAuth flow for"
            }
          },
          {
            "name": "scopes",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Comma-separated list of authorization scopes",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LoginResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/integrations/{provider}/callback": {
      "post": {
        "tags": ["v1", "integrations"],
        "summary": "Callback",
        "operationId": "postV1Callback",
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProviderName",
              "title": "The target provider for this OAuth exchange"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Body_postV1Callback" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialsMetaResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/integrations/credentials": {
      "get": {
        "tags": ["v1", "integrations"],
        "summary": "List Credentials",
        "operationId": "getV1ListCredentials",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CredentialsMetaResponse"
                  },
                  "type": "array",
                  "title": "Response Getv1Listcredentials"
                }
              }
            }
          }
        }
      }
    },
    "/api/integrations/{provider}/credentials": {
      "get": {
        "tags": ["v1", "integrations"],
        "summary": "List Credentials By Provider",
        "operationId": "getV1ListCredentialsByProvider",
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProviderName",
              "title": "The provider to list credentials for"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CredentialsMetaResponse"
                  },
                  "title": "Response Getv1Listcredentialsbyprovider"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["v1", "integrations"],
        "summary": "Create Credentials",
        "operationId": "postV1CreateCredentials",
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProviderName",
              "title": "The provider to create credentials for"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  { "$ref": "#/components/schemas/OAuth2Credentials" },
                  { "$ref": "#/components/schemas/APIKeyCredentials" },
                  { "$ref": "#/components/schemas/UserPasswordCredentials" },
                  { "$ref": "#/components/schemas/HostScopedCredentials-Input" }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "oauth2": "#/components/schemas/OAuth2Credentials",
                    "api_key": "#/components/schemas/APIKeyCredentials",
                    "user_password": "#/components/schemas/UserPasswordCredentials",
                    "host_scoped": "#/components/schemas/HostScopedCredentials-Input"
                  }
                },
                "title": "Credentials"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/OAuth2Credentials" },
                    { "$ref": "#/components/schemas/APIKeyCredentials" },
                    { "$ref": "#/components/schemas/UserPasswordCredentials" },
                    {
                      "$ref": "#/components/schemas/HostScopedCredentials-Output"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "oauth2": "#/components/schemas/OAuth2Credentials",
                      "api_key": "#/components/schemas/APIKeyCredentials",
                      "user_password": "#/components/schemas/UserPasswordCredentials",
                      "host_scoped": "#/components/schemas/HostScopedCredentials-Output"
                    }
                  },
                  "title": "Response Postv1Createcredentials"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/integrations/{provider}/credentials/{cred_id}": {
      "get": {
        "tags": ["v1", "integrations"],
        "summary": "Get Credential",
        "operationId": "getV1GetCredential",
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProviderName",
              "title": "The provider to retrieve credentials for"
            }
          },
          {
            "name": "cred_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The ID of the credentials to retrieve"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/OAuth2Credentials" },
                    { "$ref": "#/components/schemas/APIKeyCredentials" },
                    { "$ref": "#/components/schemas/UserPasswordCredentials" },
                    {
                      "$ref": "#/components/schemas/HostScopedCredentials-Output"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "oauth2": "#/components/schemas/OAuth2Credentials",
                      "api_key": "#/components/schemas/APIKeyCredentials",
                      "user_password": "#/components/schemas/UserPasswordCredentials",
                      "host_scoped": "#/components/schemas/HostScopedCredentials-Output"
                    }
                  },
                  "title": "Response Getv1Getcredential"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["v1", "integrations"],
        "summary": "Delete Credentials",
        "operationId": "deleteV1DeleteCredentials",
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProviderName",
              "title": "The provider to delete credentials for"
            }
          },
          {
            "name": "cred_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The ID of the credentials to delete"
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Whether to proceed if any linked webhooks are still in use",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/CredentialsDeletionResponse"
                    },
                    {
                      "$ref": "#/components/schemas/CredentialsDeletionNeedsConfirmationResponse"
                    }
                  ],
                  "title": "Response Deletev1Deletecredentials"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/integrations/{provider}/webhooks/{webhook_id}/ingress": {
      "post": {
        "tags": ["v1", "integrations"],
        "summary": "Webhook Ingress Generic",
        "operationId": "postV1WebhookIngressGeneric",
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProviderName",
              "title": "Provider where the webhook was registered"
            }
          },
          {
            "name": "webhook_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Our ID for the webhook" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/integrations/webhooks/{webhook_id}/ping": {
      "post": {
        "tags": ["v1", "integrations"],
        "summary": "Webhook Ping",
        "operationId": "postV1WebhookPing",
        "parameters": [
          {
            "name": "webhook_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Our ID for the webhook" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/analytics/log_raw_metric": {
      "post": {
        "tags": ["v1", "analytics"],
        "summary": "Log Raw Metric",
        "operationId": "postV1LogRawMetric",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/LogRawMetricRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/analytics/log_raw_analytics": {
      "post": {
        "tags": ["v1", "analytics"],
        "summary": "Log Raw Analytics",
        "operationId": "postV1LogRawAnalytics",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_postV1LogRawAnalytics"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/auth/user": {
      "post": {
        "tags": ["v1", "auth"],
        "summary": "Get or create user",
        "operationId": "postV1Get or create user",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        }
      }
    },
    "/api/auth/user/email": {
      "post": {
        "tags": ["v1", "auth"],
        "summary": "Update user email",
        "operationId": "postV1Update user email",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "type": "string", "title": "Email" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": { "type": "string" },
                  "type": "object",
                  "title": "Response Postv1Update User Email"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/auth/user/preferences": {
      "get": {
        "tags": ["v1", "auth"],
        "summary": "Get notification preferences",
        "operationId": "getV1Get notification preferences",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationPreference"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["v1", "auth"],
        "summary": "Update notification preferences",
        "operationId": "postV1Update notification preferences",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationPreferenceDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationPreference"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/onboarding": {
      "get": {
        "tags": ["v1", "onboarding"],
        "summary": "Get onboarding status",
        "operationId": "getV1Get onboarding status",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        }
      },
      "patch": {
        "tags": ["v1", "onboarding"],
        "summary": "Update onboarding progress",
        "operationId": "patchV1Update onboarding progress",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserOnboardingUpdate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/onboarding/agents": {
      "get": {
        "tags": ["v1", "onboarding"],
        "summary": "Get recommended agents",
        "operationId": "getV1Get recommended agents",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        }
      }
    },
    "/api/onboarding/enabled": {
      "get": {
        "tags": ["v1", "onboarding", "public"],
        "summary": "Check onboarding enabled",
        "operationId": "getV1Check onboarding enabled",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        }
      }
    },
    "/api/blocks": {
      "get": {
        "tags": ["v1", "blocks"],
        "summary": "List available blocks",
        "operationId": "getV1List available blocks",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": { "additionalProperties": true, "type": "object" },
                  "type": "array",
                  "title": "Response Getv1List Available Blocks"
                }
              }
            }
          }
        }
      }
    },
    "/api/blocks/{block_id}/execute": {
      "post": {
        "tags": ["v1", "blocks"],
        "summary": "Execute graph block",
        "operationId": "postV1Execute graph block",
        "parameters": [
          {
            "name": "block_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Block Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Data"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": { "type": "array", "items": {} },
                  "title": "Response Postv1Execute Graph Block"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/credits": {
      "get": {
        "tags": ["v1", "credits"],
        "summary": "Get user credits",
        "operationId": "getV1Get user credits",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": { "type": "integer" },
                  "type": "object",
                  "title": "Response Getv1Get User Credits"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["v1", "credits"],
        "summary": "Request credit top up",
        "operationId": "postV1Request credit top up",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RequestTopUp" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["v1", "credits"],
        "summary": "Fulfill checkout session",
        "operationId": "patchV1Fulfill checkout session",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        }
      }
    },
    "/api/credits/{transaction_key}/refund": {
      "post": {
        "tags": ["v1", "credits"],
        "summary": "Refund credit transaction",
        "operationId": "postV1Refund credit transaction",
        "parameters": [
          {
            "name": "transaction_key",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Transaction Key" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": { "type": "string" },
                "title": "Metadata"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "title": "Response Postv1Refund Credit Transaction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/credits/auto-top-up": {
      "get": {
        "tags": ["v1", "credits"],
        "summary": "Get auto top up",
        "operationId": "getV1Get auto top up",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AutoTopUpConfig" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["v1", "credits"],
        "summary": "Configure auto top up",
        "operationId": "postV1Configure auto top up",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AutoTopUpConfig" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Postv1Configure Auto Top Up"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/credits/stripe_webhook": {
      "post": {
        "tags": ["v1", "credits"],
        "summary": "Handle Stripe webhooks",
        "operationId": "postV1Handle stripe webhooks",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        }
      }
    },
    "/api/credits/manage": {
      "get": {
        "tags": ["v1", "credits"],
        "summary": "Manage payment methods",
        "operationId": "getV1Manage payment methods",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": { "type": "string" },
                  "type": "object",
                  "title": "Response Getv1Manage Payment Methods"
                }
              }
            }
          }
        }
      }
    },
    "/api/credits/transactions": {
      "get": {
        "tags": ["v1", "credits"],
        "summary": "Get credit history",
        "operationId": "getV1Get credit history",
        "parameters": [
          {
            "name": "transaction_time",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ],
              "title": "Transaction Time"
            }
          },
          {
            "name": "transaction_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Transaction Type"
            }
          },
          {
            "name": "transaction_count_limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "title": "Transaction Count Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TransactionHistory" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/credits/refunds": {
      "get": {
        "tags": ["v1", "credits"],
        "summary": "Get refund requests",
        "operationId": "getV1Get refund requests",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/RefundRequest" },
                  "type": "array",
                  "title": "Response Getv1Get Refund Requests"
                }
              }
            }
          }
        }
      }
    },
    "/api/graphs": {
      "get": {
        "tags": ["v1", "graphs"],
        "summary": "List user graphs",
        "operationId": "getV1List user graphs",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/GraphModel" },
                  "type": "array",
                  "title": "Response Getv1List User Graphs"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["v1", "graphs"],
        "summary": "Create new graph",
        "operationId": "postV1Create new graph",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateGraph" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GraphModel" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/graphs/{graph_id}/versions/{version}": {
      "get": {
        "tags": ["v1", "graphs"],
        "summary": "Get graph version",
        "operationId": "getV1Get graph version",
        "parameters": [
          {
            "name": "graph_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Graph Id" }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [{ "type": "integer" }, { "type": "null" }],
              "title": "Version"
            }
          },
          {
            "name": "for_export",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "For Export"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GraphModel" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/graphs/{graph_id}": {
      "get": {
        "tags": ["v1", "graphs"],
        "summary": "Get specific graph",
        "operationId": "getV1Get specific graph",
        "parameters": [
          {
            "name": "graph_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Graph Id" }
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "integer" }, { "type": "null" }],
              "title": "Version"
            }
          },
          {
            "name": "for_export",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "For Export"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GraphModel" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["v1", "graphs"],
        "summary": "Delete graph permanently",
        "operationId": "deleteV1Delete graph permanently",
        "parameters": [
          {
            "name": "graph_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Graph Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DeleteGraphResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["v1", "graphs"],
        "summary": "Update graph version",
        "operationId": "putV1Update graph version",
        "parameters": [
          {
            "name": "graph_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Graph Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Graph" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GraphModel" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/graphs/{graph_id}/versions": {
      "get": {
        "tags": ["v1", "graphs"],
        "summary": "Get all graph versions",
        "operationId": "getV1Get all graph versions",
        "parameters": [
          {
            "name": "graph_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Graph Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/GraphModel" },
                  "title": "Response Getv1Get All Graph Versions"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/graphs/{graph_id}/versions/active": {
      "put": {
        "tags": ["v1", "graphs"],
        "summary": "Set active graph version",
        "operationId": "putV1Set active graph version",
        "parameters": [
          {
            "name": "graph_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Graph Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SetGraphActiveVersion" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/graphs/{graph_id}/execute/{graph_version}": {
      "post": {
        "tags": ["v1", "graphs"],
        "summary": "Execute graph agent",
        "operationId": "postV1Execute graph agent",
        "parameters": [
          {
            "name": "graph_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Graph Id" }
          },
          {
            "name": "graph_version",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [{ "type": "integer" }, { "type": "null" }],
              "title": "Graph Version"
            }
          },
          {
            "name": "preset_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Preset Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_postV1Execute_graph_agent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecuteGraphResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/graphs/{graph_id}/executions/{graph_exec_id}/stop": {
      "post": {
        "tags": ["v1", "graphs"],
        "summary": "Stop graph execution",
        "operationId": "postV1Stop graph execution",
        "parameters": [
          {
            "name": "graph_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Graph Id" }
          },
          {
            "name": "graph_exec_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Graph Exec Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GraphExecution" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/executions": {
      "get": {
        "tags": ["v1", "graphs"],
        "summary": "Get all executions",
        "operationId": "getV1Get all executions",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GraphExecutionMeta"
                  },
                  "type": "array",
                  "title": "Response Getv1Get All Executions"
                }
              }
            }
          }
        }
      }
    },
    "/api/graphs/{graph_id}/executions": {
      "get": {
        "tags": ["v1", "graphs"],
        "summary": "Get graph executions",
        "operationId": "getV1Get graph executions",
        "parameters": [
          {
            "name": "graph_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Graph Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GraphExecutionMeta"
                  },
                  "title": "Response Getv1Get Graph Executions"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/graphs/{graph_id}/executions/{graph_exec_id}": {
      "get": {
        "tags": ["v1", "graphs"],
        "summary": "Get execution details",
        "operationId": "getV1Get execution details",
        "parameters": [
          {
            "name": "graph_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Graph Id" }
          },
          {
            "name": "graph_exec_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Graph Exec Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    { "$ref": "#/components/schemas/GraphExecution" },
                    { "$ref": "#/components/schemas/GraphExecutionWithNodes" }
                  ],
                  "title": "Response Getv1Get Execution Details"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/executions/{graph_exec_id}": {
      "delete": {
        "tags": ["v1", "graphs"],
        "summary": "Delete graph execution",
        "operationId": "deleteV1Delete graph execution",
        "parameters": [
          {
            "name": "graph_exec_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Graph Exec Id" }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/graphs/{graph_id}/schedules": {
      "post": {
        "tags": ["v1", "schedules"],
        "summary": "Create execution schedule",
        "operationId": "postV1Create execution schedule",
        "parameters": [
          {
            "name": "graph_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the graph to schedule",
              "title": "Graph Id"
            },
            "description": "ID of the graph to schedule"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleCreationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GraphExecutionJobInfo"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["v1", "schedules"],
        "summary": "List execution schedules for a graph",
        "operationId": "getV1List execution schedules for a graph",
        "parameters": [
          {
            "name": "graph_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Graph Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GraphExecutionJobInfo"
                  },
                  "title": "Response Getv1List Execution Schedules For A Graph"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/schedules": {
      "get": {
        "tags": ["v1", "schedules"],
        "summary": "List execution schedules for a user",
        "operationId": "getV1List execution schedules for a user",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GraphExecutionJobInfo"
                  },
                  "type": "array",
                  "title": "Response Getv1List Execution Schedules For A User"
                }
              }
            }
          }
        }
      }
    },
    "/api/schedules/{schedule_id}": {
      "delete": {
        "tags": ["v1", "schedules"],
        "summary": "Delete execution schedule",
        "operationId": "deleteV1Delete execution schedule",
        "parameters": [
          {
            "name": "schedule_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the schedule to delete",
              "title": "Schedule Id"
            },
            "description": "ID of the schedule to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Deletev1Delete Execution Schedule"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/api-keys": {
      "get": {
        "tags": ["v1", "api-keys"],
        "summary": "List user API keys",
        "description": "List all API keys for the user",
        "operationId": "getV1List user api keys",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/APIKeyWithoutHash"
                      },
                      "type": "array"
                    },
                    {
                      "additionalProperties": { "type": "string" },
                      "type": "object"
                    }
                  ],
                  "title": "Response Getv1List User Api Keys"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["v1", "api-keys"],
        "summary": "Create new API key",
        "description": "Create a new API key",
        "operationId": "postV1Create new api key",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateAPIKeyRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAPIKeyResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/api-keys/{key_id}": {
      "get": {
        "tags": ["v1", "api-keys"],
        "summary": "Get specific API key",
        "description": "Get a specific API key",
        "operationId": "getV1Get specific api key",
        "parameters": [
          {
            "name": "key_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Key Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIKeyWithoutHash" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["v1", "api-keys"],
        "summary": "Revoke API key",
        "description": "Revoke an API key",
        "operationId": "deleteV1Revoke api key",
        "parameters": [
          {
            "name": "key_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Key Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIKeyWithoutHash" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/api-keys/{key_id}/suspend": {
      "post": {
        "tags": ["v1", "api-keys"],
        "summary": "Suspend API key",
        "description": "Suspend an API key",
        "operationId": "postV1Suspend api key",
        "parameters": [
          {
            "name": "key_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Key Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIKeyWithoutHash" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/api-keys/{key_id}/permissions": {
      "put": {
        "tags": ["v1", "api-keys"],
        "summary": "Update key permissions",
        "description": "Update API key permissions",
        "operationId": "putV1Update key permissions",
        "parameters": [
          {
            "name": "key_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Key Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePermissionsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/APIKeyWithoutHash" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/store/profile": {
      "get": {
        "tags": ["v2", "store", "private"],
        "summary": "Get user profile",
        "description": "Get the profile details for the authenticated user.",
        "operationId": "getV2Get user profile",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProfileDetails" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["v2", "store", "private"],
        "summary": "Update user profile",
        "description": "Update the store profile for the authenticated user.\n\nArgs:\n    profile (Profile): The updated profile details\n    user_id (str): ID of the authenticated user\n\nReturns:\n    CreatorDetails: The updated profile\n\nRaises:\n    HTTPException: If there is an error updating the profile",
        "operationId": "postV2Update user profile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Profile" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CreatorDetails" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/store/agents": {
      "get": {
        "tags": ["v2", "store", "public"],
        "summary": "List store agents",
        "description": "Get a paginated list of agents from the store with optional filtering and sorting.\n\nArgs:\n    featured (bool, optional): Filter to only show featured agents. Defaults to False.\n    creator (str | None, optional): Filter agents by creator username. Defaults to None.\n    sorted_by (str | None, optional): Sort agents by \"runs\" or \"rating\". Defaults to None.\n    search_query (str | None, optional): Search agents by name, subheading and description. Defaults to None.\n    category (str | None, optional): Filter agents by category. Defaults to None.\n    page (int, optional): Page number for pagination. Defaults to 1.\n    page_size (int, optional): Number of agents per page. Defaults to 20.\n\nReturns:\n    StoreAgentsResponse: Paginated list of agents matching the filters\n\nRaises:\n    HTTPException: If page or page_size are less than 1\n\nUsed for:\n- Home Page Featured Agents\n- Home Page Top Agents\n- Search Results\n- Agent Details - Other Agents By Creator\n- Agent Details - Similar Agents\n- Creator Details - Agents By Creator",
        "operationId": "getV2List store agents",
        "parameters": [
          {
            "name": "featured",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Featured"
            }
          },
          {
            "name": "creator",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Creator"
            }
          },
          {
            "name": "sorted_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Sorted By"
            }
          },
          {
            "name": "search_query",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Search Query"
            }
          },
          {
            "name": "category",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Category"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 1, "title": "Page" }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 20, "title": "Page Size" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/StoreAgentsResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/store/agents/{username}/{agent_name}": {
      "get": {
        "tags": ["v2", "store", "public"],
        "summary": "Get specific agent",
        "description": "This is only used on the AgentDetails Page\n\nIt returns the store listing agents details.",
        "operationId": "getV2Get specific agent",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Username" }
          },
          {
            "name": "agent_name",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Agent Name" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/StoreAgentDetails" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/store/graph/{store_listing_version_id}": {
      "get": {
        "tags": ["v2", "store"],
        "summary": "Get agent graph",
        "description": "Get Agent Graph from Store Listing Version ID.",
        "operationId": "getV2Get agent graph",
        "parameters": [
          {
            "name": "store_listing_version_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Store Listing Version Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/store/agents/{store_listing_version_id}": {
      "get": {
        "tags": ["v2", "store"],
        "summary": "Get agent by version",
        "description": "Get Store Agent Details from Store Listing Version ID.",
        "operationId": "getV2Get agent by version",
        "parameters": [
          {
            "name": "store_listing_version_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Store Listing Version Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/StoreAgentDetails" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/store/agents/{username}/{agent_name}/review": {
      "post": {
        "tags": ["v2", "store"],
        "summary": "Create agent review",
        "description": "Create a review for a store agent.\n\nArgs:\n    username: Creator's username\n    agent_name: Name/slug of the agent\n    review: Review details including score and optional comments\n    user_id: ID of authenticated user creating the review\n\nReturns:\n    The created review",
        "operationId": "postV2Create agent review",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Username" }
          },
          {
            "name": "agent_name",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Agent Name" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/StoreReviewCreate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/StoreReview" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/store/creators": {
      "get": {
        "tags": ["v2", "store", "public"],
        "summary": "List store creators",
        "description": "This is needed for:\n- Home Page Featured Creators\n- Search Results Page\n\n---\n\nTo support this functionality we need:\n- featured: bool - to limit the list to just featured agents\n- search_query: str - vector search based on the creators profile description.\n- sorted_by: [agent_rating, agent_runs] -",
        "operationId": "getV2List store creators",
        "parameters": [
          {
            "name": "featured",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Featured"
            }
          },
          {
            "name": "search_query",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Search Query"
            }
          },
          {
            "name": "sorted_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Sorted By"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 1, "title": "Page" }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 20, "title": "Page Size" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CreatorsResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/store/creator/{username}": {
      "get": {
        "tags": ["v2", "store", "public"],
        "summary": "Get creator details",
        "description": "Get the details of a creator\n- Creator Details Page",
        "operationId": "getV2Get creator details",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Username" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CreatorDetails" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/store/myagents": {
      "get": {
        "tags": ["v2", "store", "private"],
        "summary": "Get my agents",
        "operationId": "getV2Get my agents",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MyAgentsResponse" }
              }
            }
          }
        }
      }
    },
    "/api/store/submissions/{submission_id}": {
      "delete": {
        "tags": ["v2", "store", "private"],
        "summary": "Delete store submission",
        "description": "Delete a store listing submission.\n\nArgs:\n    user_id (str): ID of the authenticated user\n    submission_id (str): ID of the submission to be deleted\n\nReturns:\n    bool: True if the submission was successfully deleted, False otherwise",
        "operationId": "deleteV2Delete store submission",
        "parameters": [
          {
            "name": "submission_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Submission Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "title": "Response Deletev2Delete Store Submission"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/store/submissions": {
      "get": {
        "tags": ["v2", "store", "private"],
        "summary": "List my submissions",
        "description": "Get a paginated list of store submissions for the authenticated user.\n\nArgs:\n    user_id (str): ID of the authenticated user\n    page (int, optional): Page number for pagination. Defaults to 1.\n    page_size (int, optional): Number of submissions per page. Defaults to 20.\n\nReturns:\n    StoreListingsResponse: Paginated list of store submissions\n\nRaises:\n    HTTPException: If page or page_size are less than 1",
        "operationId": "getV2List my submissions",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 1, "title": "Page" }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 20, "title": "Page Size" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreSubmissionsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["v2", "store", "private"],
        "summary": "Create store submission",
        "description": "Create a new store listing submission.\n\nArgs:\n    submission_request (StoreSubmissionRequest): The submission details\n    user_id (str): ID of the authenticated user submitting the listing\n\nReturns:\n    StoreSubmission: The created store submission\n\nRaises:\n    HTTPException: If there is an error creating the submission",
        "operationId": "postV2Create store submission",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreSubmissionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/StoreSubmission" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/store/submissions/media": {
      "post": {
        "tags": ["v2", "store", "private"],
        "summary": "Upload submission media",
        "description": "Upload media (images/videos) for a store listing submission.\n\nArgs:\n    file (UploadFile): The media file to upload\n    user_id (str): ID of the authenticated user uploading the media\n\nReturns:\n    str: URL of the uploaded media file\n\nRaises:\n    HTTPException: If there is an error uploading the media",
        "operationId": "postV2Upload submission media",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_postV2Upload_submission_media"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/store/submissions/generate_image": {
      "post": {
        "tags": ["v2", "store", "private"],
        "summary": "Generate submission image",
        "description": "Generate an image for a store listing submission.\n\nArgs:\n    agent_id (str): ID of the agent to generate an image for\n    user_id (str): ID of the authenticated user\n\nReturns:\n    JSONResponse: JSON containing the URL of the generated image",
        "operationId": "postV2Generate submission image",
        "parameters": [
          {
            "name": "agent_id",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "title": "Agent Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/store/download/agents/{store_listing_version_id}": {
      "get": {
        "tags": ["v2", "store", "public"],
        "summary": "Download agent file",
        "description": "Download the agent file by streaming its content.\n\nArgs:\n    store_listing_version_id (str): The ID of the agent to download\n\nReturns:\n    StreamingResponse: A streaming response containing the agent's graph data.\n\nRaises:\n    HTTPException: If the agent is not found or an unexpected error occurs.",
        "operationId": "getV2Download agent file",
        "parameters": [
          {
            "name": "store_listing_version_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the agent to download",
              "title": "Store Listing Version Id"
            },
            "description": "The ID of the agent to download"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/store/admin/listings": {
      "get": {
        "tags": ["v2", "admin", "store", "admin"],
        "summary": "Get Admin Listings History",
        "description": "Get store listings with their version history for admins.\n\nThis provides a consolidated view of listings with their versions,\nallowing for an expandable UI in the admin dashboard.\n\nArgs:\n    status: Filter by submission status (PENDING, APPROVED, REJECTED)\n    search: Search by name, description, or user email\n    page: Page number for pagination\n    page_size: Number of items per page\n\nReturns:\n    StoreListingsWithVersionsResponse with listings and their versions",
        "operationId": "getV2Get admin listings history",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "$ref": "#/components/schemas/SubmissionStatus" },
                { "type": "null" }
              ],
              "title": "Status"
            }
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Search"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 1, "title": "Page" }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 20, "title": "Page Size" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreListingsWithVersionsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/store/admin/submissions/{store_listing_version_id}/review": {
      "post": {
        "tags": ["v2", "admin", "store", "admin"],
        "summary": "Review Store Submission",
        "description": "Review a store listing submission.\n\nArgs:\n    store_listing_version_id: ID of the submission to review\n    request: Review details including approval status and comments\n    user: Authenticated admin user performing the review\n\nReturns:\n    StoreSubmission with updated review information",
        "operationId": "postV2Review store submission",
        "parameters": [
          {
            "name": "store_listing_version_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Store Listing Version Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReviewSubmissionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/StoreSubmission" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/store/admin/submissions/download/{store_listing_version_id}": {
      "get": {
        "tags": ["v2", "admin", "store", "admin", "store", "admin"],
        "summary": "Admin Download Agent File",
        "description": "Download the agent file by streaming its content.\n\nArgs:\n    store_listing_version_id (str): The ID of the agent to download\n\nReturns:\n    StreamingResponse: A streaming response containing the agent's graph data.\n\nRaises:\n    HTTPException: If the agent is not found or an unexpected error occurs.",
        "operationId": "getV2Admin download agent file",
        "parameters": [
          {
            "name": "store_listing_version_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the agent to download",
              "title": "Store Listing Version Id"
            },
            "description": "The ID of the agent to download"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/credits/admin/add_credits": {
      "post": {
        "tags": ["v2", "admin", "credits", "admin"],
        "summary": "Add Credits to User",
        "operationId": "postV2Add credits to user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_postV2Add_credits_to_user"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddUserCreditsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/credits/admin/users_history": {
      "get": {
        "tags": ["v2", "admin", "credits", "admin"],
        "summary": "Get All Users History",
        "operationId": "getV2Get all users history",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Search"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 1, "title": "Page" }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 20, "title": "Page Size" }
          },
          {
            "name": "transaction_filter",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "$ref": "#/components/schemas/CreditTransactionType" },
                { "type": "null" }
              ],
              "title": "Transaction Filter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserHistoryResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/library/presets": {
      "get": {
        "tags": ["v2", "presets"],
        "summary": "List presets",
        "description": "Retrieve a paginated list of presets for the current user.",
        "operationId": "getV2List presets",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 10,
              "title": "Page Size"
            }
          },
          {
            "name": "graph_id",
            "in": "query",
            "required": true,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "description": "Allows to filter presets by a specific agent graph",
              "title": "Graph Id"
            },
            "description": "Allows to filter presets by a specific agent graph"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LibraryAgentPresetResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["v2", "presets"],
        "summary": "Create a new preset",
        "description": "Create a new preset for the current user.",
        "operationId": "postV2Create a new preset",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/LibraryAgentPresetCreatable"
                  },
                  {
                    "$ref": "#/components/schemas/LibraryAgentPresetCreatableFromGraphExecution"
                  }
                ],
                "title": "Preset"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LibraryAgentPreset" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/library/presets/{preset_id}": {
      "get": {
        "tags": ["v2", "presets"],
        "summary": "Get a specific preset",
        "description": "Retrieve details for a specific preset by its ID.",
        "operationId": "getV2Get a specific preset",
        "parameters": [
          {
            "name": "preset_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Preset Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LibraryAgentPreset" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["v2", "presets"],
        "summary": "Update an existing preset",
        "description": "Update an existing preset by its ID.",
        "operationId": "patchV2Update an existing preset",
        "parameters": [
          {
            "name": "preset_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Preset Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LibraryAgentPresetUpdatable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LibraryAgentPreset" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["v2", "presets"],
        "summary": "Delete a preset",
        "description": "Delete an existing preset by its ID.",
        "operationId": "deleteV2Delete a preset",
        "parameters": [
          {
            "name": "preset_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Preset Id" }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/library/presets/{preset_id}/execute": {
      "post": {
        "tags": ["v2", "presets", "presets"],
        "summary": "Execute a preset",
        "description": "Execute a preset with the given graph and node input for the current user.",
        "operationId": "postV2Execute a preset",
        "parameters": [
          {
            "name": "preset_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Preset Id" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_postV2Execute_a_preset"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Postv2Execute A Preset"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/library/agents": {
      "get": {
        "tags": ["v2", "library", "private"],
        "summary": "List Library Agents",
        "description": "Get all agents in the user's library (both created and saved).\n\nArgs:\n    user_id: ID of the authenticated user.\n    search_term: Optional search term to filter agents by name/description.\n    filter_by: List of filters to apply (favorites, created by user).\n    sort_by: List of sorting criteria (created date, updated date).\n    page: Page number to retrieve.\n    page_size: Number of agents per page.\n\nReturns:\n    A LibraryAgentResponse containing agents and pagination metadata.\n\nRaises:\n    HTTPException: If a server/database error occurs.",
        "operationId": "getV2List library agents",
        "parameters": [
          {
            "name": "search_term",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "description": "Search term to filter agents",
              "title": "Search Term"
            },
            "description": "Search term to filter agents"
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/LibraryAgentSort",
              "description": "Criteria to sort results by",
              "default": "updatedAt"
            },
            "description": "Criteria to sort results by"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number to retrieve (must be >= 1)",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number to retrieve (must be >= 1)"
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Number of agents per page (must be >= 1)",
              "default": 15,
              "title": "Page Size"
            },
            "description": "Number of agents per page (must be >= 1)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LibraryAgentResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": { "application/json": {} }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["v2", "library", "private"],
        "summary": "Add Marketplace Agent",
        "description": "Add an agent from the marketplace to the user's library.\n\nArgs:\n    store_listing_version_id: ID of the store listing version to add.\n    user_id: ID of the authenticated user.\n\nReturns:\n    library_model.LibraryAgent: Agent added to the library\n\nRaises:\n    HTTPException(404): If the listing version is not found.\n    HTTPException(500): If a server/database error occurs.",
        "operationId": "postV2Add marketplace agent",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_postV2Add_marketplace_agent"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Agent added successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LibraryAgent" }
              }
            }
          },
          "404": { "description": "Store listing version not found" },
          "500": { "description": "Server error" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/library/agents/{library_agent_id}": {
      "get": {
        "tags": ["v2", "library", "private"],
        "summary": "Get Library Agent",
        "operationId": "getV2Get library agent",
        "parameters": [
          {
            "name": "library_agent_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Library Agent Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LibraryAgent" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["v2", "library", "private"],
        "summary": "Update Library Agent",
        "description": "Update the library agent with the given fields.\n\nArgs:\n    library_agent_id: ID of the library agent to update.\n    payload: Fields to update (auto_update_version, is_favorite, etc.).\n    user_id: ID of the authenticated user.\n\nRaises:\n    HTTPException(500): If a server/database error occurs.",
        "operationId": "patchV2Update library agent",
        "parameters": [
          {
            "name": "library_agent_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Library Agent Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LibraryAgentUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Agent updated successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LibraryAgent" }
              }
            }
          },
          "500": { "description": "Server error" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["v2", "library", "private"],
        "summary": "Delete Library Agent",
        "description": "Soft-delete the specified library agent.\n\nArgs:\n    library_agent_id: ID of the library agent to delete.\n    user_id: ID of the authenticated user.\n\nReturns:\n    204 No Content if successful.\n\nRaises:\n    HTTPException(404): If the agent does not exist.\n    HTTPException(500): If a server/database error occurs.",
        "operationId": "deleteV2Delete library agent",
        "parameters": [
          {
            "name": "library_agent_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Library Agent Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "204": { "description": "Agent deleted successfully" },
          "404": { "description": "Agent not found" },
          "500": { "description": "Server error" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/library/agents/marketplace/{store_listing_version_id}": {
      "get": {
        "tags": ["v2", "library", "private", "store, library"],
        "summary": "Get Agent By Store ID",
        "description": "Get Library Agent from Store Listing Version ID.",
        "operationId": "getV2Get agent by store id",
        "parameters": [
          {
            "name": "store_listing_version_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Store Listing Version Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    { "$ref": "#/components/schemas/LibraryAgent" },
                    { "type": "null" }
                  ],
                  "title": "Response Getv2Get Agent By Store Id"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/library/agents/{library_agent_id}/fork": {
      "post": {
        "tags": ["v2", "library", "private"],
        "summary": "Fork Library Agent",
        "operationId": "postV2Fork library agent",
        "parameters": [
          {
            "name": "library_agent_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Library Agent Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LibraryAgent" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/library/agents/{library_agent_id}/setup-trigger": {
      "post": {
        "tags": ["v2", "library", "private"],
        "summary": "Setup Trigger",
        "description": "Sets up a webhook-triggered `LibraryAgentPreset` for a `LibraryAgent`.\nReturns the correspondingly created `LibraryAgentPreset` with `webhook_id` set.",
        "operationId": "postV2SetupTrigger",
        "parameters": [
          {
            "name": "library_agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the library agent",
              "title": "Library Agent Id"
            },
            "description": "ID of the library agent"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TriggeredPresetSetupParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LibraryAgentPreset" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/otto/ask": {
      "post": {
        "tags": ["v2", "otto"],
        "summary": "Proxy Otto Chat Request",
        "description": "Proxy requests to Otto API while adding necessary security headers and logging.\nRequires an authenticated user.",
        "operationId": "postV2Proxy otto chat request",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ChatRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/turnstile/verify": {
      "post": {
        "tags": ["v2", "turnstile"],
        "summary": "Verify Turnstile Token",
        "description": "Verify a Cloudflare Turnstile token.\nThis endpoint verifies a token returned by the Cloudflare Turnstile challenge\non the client side. It returns whether the verification was successful.",
        "operationId": "postV2Verify turnstile token",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TurnstileVerifyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TurnstileVerifyResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/email/unsubscribe": {
      "post": {
        "tags": ["v1", "email"],
        "summary": "One Click Email Unsubscribe",
        "operationId": "postV1One click email unsubscribe",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "title": "Token" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/email/": {
      "post": {
        "tags": ["v1", "email"],
        "summary": "Handle Postmark Email Webhooks",
        "operationId": "postV1Handle postmark email webhooks",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  { "$ref": "#/components/schemas/PostmarkDeliveryWebhook" },
                  { "$ref": "#/components/schemas/PostmarkBounceWebhook" },
                  {
                    "$ref": "#/components/schemas/PostmarkSpamComplaintWebhook"
                  },
                  { "$ref": "#/components/schemas/PostmarkOpenWebhook" },
                  { "$ref": "#/components/schemas/PostmarkClickWebhook" },
                  {
                    "$ref": "#/components/schemas/PostmarkSubscriptionChangeWebhook"
                  }
                ],
                "title": "Webhook",
                "discriminator": {
                  "propertyName": "RecordType",
                  "mapping": {
                    "Delivery": "#/components/schemas/PostmarkDeliveryWebhook",
                    "Bounce": "#/components/schemas/PostmarkBounceWebhook",
                    "SpamComplaint": "#/components/schemas/PostmarkSpamComplaintWebhook",
                    "Open": "#/components/schemas/PostmarkOpenWebhook",
                    "Click": "#/components/schemas/PostmarkClickWebhook",
                    "SubscriptionChange": "#/components/schemas/PostmarkSubscriptionChangeWebhook"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    },
    "/health": {
      "get": {
        "tags": ["health"],
        "summary": "Health",
        "operationId": "getHealthHealth",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "APIKeyCredentials": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "provider": { "type": "string", "title": "Provider" },
          "title": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Title"
          },
          "type": {
            "type": "string",
            "const": "api_key",
            "title": "Type",
            "default": "api_key"
          },
          "api_key": {
            "type": "string",
            "format": "password",
            "title": "Api Key",
            "writeOnly": true
          },
          "expires_at": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Expires At",
            "description": "Unix timestamp (seconds) indicating when the API key expires (if at all)"
          }
        },
        "type": "object",
        "required": ["provider", "api_key"],
        "title": "APIKeyCredentials"
      },
      "APIKeyPermission": {
        "type": "string",
        "enum": ["EXECUTE_GRAPH", "READ_GRAPH", "EXECUTE_BLOCK", "READ_BLOCK"],
        "title": "APIKeyPermission"
      },
      "APIKeyStatus": {
        "type": "string",
        "enum": ["ACTIVE", "REVOKED", "SUSPENDED"],
        "title": "APIKeyStatus"
      },
      "APIKeyWithoutHash": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "name": { "type": "string", "title": "Name" },
          "prefix": { "type": "string", "title": "Prefix" },
          "postfix": { "type": "string", "title": "Postfix" },
          "status": { "$ref": "#/components/schemas/APIKeyStatus" },
          "permissions": {
            "items": { "$ref": "#/components/schemas/APIKeyPermission" },
            "type": "array",
            "title": "Permissions"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "last_used_at": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Last Used At"
          },
          "revoked_at": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Revoked At"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "user_id": { "type": "string", "title": "User Id" }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "prefix",
          "postfix",
          "status",
          "permissions",
          "created_at",
          "last_used_at",
          "revoked_at",
          "description",
          "user_id"
        ],
        "title": "APIKeyWithoutHash"
      },
      "AddUserCreditsResponse": {
        "properties": {
          "new_balance": { "type": "integer", "title": "New Balance" },
          "transaction_key": { "type": "string", "title": "Transaction Key" }
        },
        "type": "object",
        "required": ["new_balance", "transaction_key"],
        "title": "AddUserCreditsResponse"
      },
      "AgentExecutionStatus": {
        "type": "string",
        "enum": [
          "INCOMPLETE",
          "QUEUED",
          "RUNNING",
          "COMPLETED",
          "TERMINATED",
          "FAILED"
        ],
        "title": "AgentExecutionStatus"
      },
      "ApiResponse": {
        "properties": {
          "answer": { "type": "string", "title": "Answer" },
          "documents": {
            "items": { "$ref": "#/components/schemas/Document" },
            "type": "array",
            "title": "Documents"
          },
          "success": { "type": "boolean", "title": "Success" }
        },
        "type": "object",
        "required": ["answer", "documents", "success"],
        "title": "ApiResponse"
      },
      "AutoTopUpConfig": {
        "properties": {
          "amount": { "type": "integer", "title": "Amount" },
          "threshold": { "type": "integer", "title": "Threshold" }
        },
        "type": "object",
        "required": ["amount", "threshold"],
        "title": "AutoTopUpConfig"
      },
      "BaseGraph-Input": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "version": { "type": "integer", "title": "Version", "default": 1 },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "name": { "type": "string", "title": "Name" },
          "description": { "type": "string", "title": "Description" },
          "nodes": {
            "items": { "$ref": "#/components/schemas/Node" },
            "type": "array",
            "title": "Nodes",
            "default": []
          },
          "links": {
            "items": { "$ref": "#/components/schemas/Link" },
            "type": "array",
            "title": "Links",
            "default": []
          },
          "forked_from_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Forked From Id"
          },
          "forked_from_version": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Forked From Version"
          }
        },
        "type": "object",
        "required": ["name", "description"],
        "title": "BaseGraph"
      },
      "BaseGraph-Output": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "version": { "type": "integer", "title": "Version", "default": 1 },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "name": { "type": "string", "title": "Name" },
          "description": { "type": "string", "title": "Description" },
          "nodes": {
            "items": { "$ref": "#/components/schemas/Node" },
            "type": "array",
            "title": "Nodes",
            "default": []
          },
          "links": {
            "items": { "$ref": "#/components/schemas/Link" },
            "type": "array",
            "title": "Links",
            "default": []
          },
          "forked_from_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Forked From Id"
          },
          "forked_from_version": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Forked From Version"
          },
          "input_schema": {
            "additionalProperties": true,
            "type": "object",
            "title": "Input Schema",
            "readOnly": true
          },
          "output_schema": {
            "additionalProperties": true,
            "type": "object",
            "title": "Output Schema",
            "readOnly": true
          }
        },
        "type": "object",
        "required": ["name", "description", "input_schema", "output_schema"],
        "title": "BaseGraph"
      },
      "Body_postV1Callback": {
        "properties": {
          "code": {
            "type": "string",
            "title": "Authorization code acquired by user login"
          },
          "state_token": { "type": "string", "title": "Anti-CSRF nonce" }
        },
        "type": "object",
        "required": ["code", "state_token"],
        "title": "Body_postV1Callback"
      },
      "Body_postV1Execute_graph_agent": {
        "properties": {
          "inputs": {
            "additionalProperties": true,
            "type": "object",
            "title": "Inputs"
          },
          "credentials_inputs": {
            "additionalProperties": {
              "$ref": "#/components/schemas/CredentialsMetaInput"
            },
            "type": "object",
            "title": "Credentials Inputs"
          }
        },
        "type": "object",
        "title": "Body_postV1Execute graph agent"
      },
      "Body_postV1LogRawAnalytics": {
        "properties": {
          "type": { "type": "string", "title": "Type" },
          "data": {
            "additionalProperties": true,
            "type": "object",
            "title": "Data",
            "description": "The data to log"
          },
          "data_index": {
            "type": "string",
            "title": "Data Index",
            "description": "Indexable field for any count based analytical measures like page order clicking, tutorial step completion, etc."
          }
        },
        "type": "object",
        "required": ["type", "data", "data_index"],
        "title": "Body_postV1LogRawAnalytics"
      },
      "Body_postV2Add_credits_to_user": {
        "properties": {
          "user_id": { "type": "string", "title": "User Id" },
          "amount": { "type": "integer", "title": "Amount" },
          "comments": { "type": "string", "title": "Comments" }
        },
        "type": "object",
        "required": ["user_id", "amount", "comments"],
        "title": "Body_postV2Add credits to user"
      },
      "Body_postV2Add_marketplace_agent": {
        "properties": {
          "store_listing_version_id": {
            "type": "string",
            "title": "Store Listing Version Id"
          }
        },
        "type": "object",
        "required": ["store_listing_version_id"],
        "title": "Body_postV2Add marketplace agent"
      },
      "Body_postV2Execute_a_preset": {
        "properties": {
          "inputs": {
            "additionalProperties": true,
            "type": "object",
            "title": "Inputs"
          }
        },
        "type": "object",
        "title": "Body_postV2Execute a preset"
      },
      "Body_postV2Upload_submission_media": {
        "properties": {
          "file": { "type": "string", "format": "binary", "title": "File" }
        },
        "type": "object",
        "required": ["file"],
        "title": "Body_postV2Upload submission media"
      },
      "ChatRequest": {
        "properties": {
          "query": { "type": "string", "title": "Query" },
          "conversation_history": {
            "items": { "$ref": "#/components/schemas/Message" },
            "type": "array",
            "title": "Conversation History"
          },
          "message_id": { "type": "string", "title": "Message Id" },
          "include_graph_data": {
            "type": "boolean",
            "title": "Include Graph Data",
            "default": false
          },
          "graph_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Graph Id"
          }
        },
        "type": "object",
        "required": ["query", "conversation_history", "message_id"],
        "title": "ChatRequest"
      },
      "CreateAPIKeyRequest": {
        "properties": {
          "name": { "type": "string", "title": "Name" },
          "permissions": {
            "items": { "$ref": "#/components/schemas/APIKeyPermission" },
            "type": "array",
            "title": "Permissions"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          }
        },
        "type": "object",
        "required": ["name", "permissions"],
        "title": "CreateAPIKeyRequest"
      },
      "CreateAPIKeyResponse": {
        "properties": {
          "api_key": { "$ref": "#/components/schemas/APIKeyWithoutHash" },
          "plain_text_key": { "type": "string", "title": "Plain Text Key" }
        },
        "type": "object",
        "required": ["api_key", "plain_text_key"],
        "title": "CreateAPIKeyResponse"
      },
      "CreateGraph": {
        "properties": { "graph": { "$ref": "#/components/schemas/Graph" } },
        "type": "object",
        "required": ["graph"],
        "title": "CreateGraph"
      },
      "Creator": {
        "properties": {
          "name": { "type": "string", "title": "Name" },
          "username": { "type": "string", "title": "Username" },
          "description": { "type": "string", "title": "Description" },
          "avatar_url": { "type": "string", "title": "Avatar Url" },
          "num_agents": { "type": "integer", "title": "Num Agents" },
          "agent_rating": { "type": "number", "title": "Agent Rating" },
          "agent_runs": { "type": "integer", "title": "Agent Runs" },
          "is_featured": { "type": "boolean", "title": "Is Featured" }
        },
        "type": "object",
        "required": [
          "name",
          "username",
          "description",
          "avatar_url",
          "num_agents",
          "agent_rating",
          "agent_runs",
          "is_featured"
        ],
        "title": "Creator"
      },
      "CreatorDetails": {
        "properties": {
          "name": { "type": "string", "title": "Name" },
          "username": { "type": "string", "title": "Username" },
          "description": { "type": "string", "title": "Description" },
          "links": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Links"
          },
          "avatar_url": { "type": "string", "title": "Avatar Url" },
          "agent_rating": { "type": "number", "title": "Agent Rating" },
          "agent_runs": { "type": "integer", "title": "Agent Runs" },
          "top_categories": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Top Categories"
          }
        },
        "type": "object",
        "required": [
          "name",
          "username",
          "description",
          "links",
          "avatar_url",
          "agent_rating",
          "agent_runs",
          "top_categories"
        ],
        "title": "CreatorDetails"
      },
      "CreatorsResponse": {
        "properties": {
          "creators": {
            "items": { "$ref": "#/components/schemas/Creator" },
            "type": "array",
            "title": "Creators"
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        },
        "type": "object",
        "required": ["creators", "pagination"],
        "title": "CreatorsResponse"
      },
      "CredentialsDeletionNeedsConfirmationResponse": {
        "properties": {
          "deleted": {
            "type": "boolean",
            "const": false,
            "title": "Deleted",
            "default": false
          },
          "need_confirmation": {
            "type": "boolean",
            "const": true,
            "title": "Need Confirmation",
            "default": true
          },
          "message": { "type": "string", "title": "Message" }
        },
        "type": "object",
        "required": ["message"],
        "title": "CredentialsDeletionNeedsConfirmationResponse"
      },
      "CredentialsDeletionResponse": {
        "properties": {
          "deleted": {
            "type": "boolean",
            "const": true,
            "title": "Deleted",
            "default": true
          },
          "revoked": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Revoked",
            "description": "Indicates whether the credentials were also revoked by their provider. `None`/`null` if not applicable, e.g. when deleting non-revocable credentials such as API keys."
          }
        },
        "type": "object",
        "required": ["revoked"],
        "title": "CredentialsDeletionResponse"
      },
      "CredentialsMetaInput": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "title": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Title"
          },
          "provider": { "$ref": "#/components/schemas/ProviderName" },
          "type": {
            "type": "string",
            "enum": ["api_key", "oauth2", "user_password", "host_scoped"],
            "title": "Type"
          }
        },
        "type": "object",
        "required": ["id", "provider", "type"],
        "title": "CredentialsMetaInput",
        "credentials_provider": [],
        "credentials_types": []
      },
      "CredentialsMetaResponse": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "provider": { "type": "string", "title": "Provider" },
          "type": {
            "type": "string",
            "enum": ["api_key", "oauth2", "user_password", "host_scoped"],
            "title": "Type"
          },
          "title": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Title"
          },
          "scopes": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Scopes"
          },
          "username": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Username"
          },
          "host": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Host",
            "description": "Host pattern for host-scoped credentials"
          }
        },
        "type": "object",
        "required": ["id", "provider", "type", "title", "scopes", "username"],
        "title": "CredentialsMetaResponse"
      },
      "CreditTransactionType": {
        "type": "string",
        "enum": ["TOP_UP", "USAGE", "GRANT", "REFUND", "CARD_CHECK"],
        "title": "CreditTransactionType"
      },
      "DeleteGraphResponse": {
        "properties": {
          "version_counts": { "type": "integer", "title": "Version Counts" }
        },
        "type": "object",
        "required": ["version_counts"],
        "title": "DeleteGraphResponse"
      },
      "Document": {
        "properties": {
          "url": { "type": "string", "title": "Url" },
          "relevance_score": { "type": "number", "title": "Relevance Score" }
        },
        "type": "object",
        "required": ["url", "relevance_score"],
        "title": "Document"
      },
      "ExecuteGraphResponse": {
        "properties": {
          "graph_exec_id": { "type": "string", "title": "Graph Exec Id" }
        },
        "type": "object",
        "required": ["graph_exec_id"],
        "title": "ExecuteGraphResponse"
      },
      "Graph": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "version": { "type": "integer", "title": "Version", "default": 1 },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "name": { "type": "string", "title": "Name" },
          "description": { "type": "string", "title": "Description" },
          "nodes": {
            "items": { "$ref": "#/components/schemas/Node" },
            "type": "array",
            "title": "Nodes",
            "default": []
          },
          "links": {
            "items": { "$ref": "#/components/schemas/Link" },
            "type": "array",
            "title": "Links",
            "default": []
          },
          "forked_from_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Forked From Id"
          },
          "forked_from_version": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Forked From Version"
          },
          "sub_graphs": {
            "items": { "$ref": "#/components/schemas/BaseGraph-Input" },
            "type": "array",
            "title": "Sub Graphs",
            "default": []
          }
        },
        "type": "object",
        "required": ["name", "description"],
        "title": "Graph"
      },
      "GraphExecution": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "user_id": { "type": "string", "title": "User Id" },
          "graph_id": { "type": "string", "title": "Graph Id" },
          "graph_version": { "type": "integer", "title": "Graph Version" },
          "preset_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Preset Id"
          },
          "status": { "$ref": "#/components/schemas/AgentExecutionStatus" },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "title": "Started At"
          },
          "ended_at": {
            "type": "string",
            "format": "date-time",
            "title": "Ended At"
          },
          "stats": {
            "anyOf": [
              { "$ref": "#/components/schemas/Stats" },
              { "type": "null" }
            ]
          },
          "inputs": {
            "additionalProperties": true,
            "type": "object",
            "title": "Inputs"
          },
          "outputs": {
            "additionalProperties": { "items": {}, "type": "array" },
            "type": "object",
            "title": "Outputs"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "graph_id",
          "graph_version",
          "status",
          "started_at",
          "ended_at",
          "stats",
          "inputs",
          "outputs"
        ],
        "title": "GraphExecution"
      },
      "GraphExecutionJobInfo": {
        "properties": {
          "user_id": { "type": "string", "title": "User Id" },
          "graph_id": { "type": "string", "title": "Graph Id" },
          "graph_version": { "type": "integer", "title": "Graph Version" },
          "cron": { "type": "string", "title": "Cron" },
          "input_data": {
            "additionalProperties": true,
            "type": "object",
            "title": "Input Data"
          },
          "input_credentials": {
            "additionalProperties": {
              "$ref": "#/components/schemas/CredentialsMetaInput"
            },
            "type": "object",
            "title": "Input Credentials"
          },
          "id": { "type": "string", "title": "Id" },
          "name": { "type": "string", "title": "Name" },
          "next_run_time": { "type": "string", "title": "Next Run Time" }
        },
        "type": "object",
        "required": [
          "user_id",
          "graph_id",
          "graph_version",
          "cron",
          "input_data",
          "id",
          "name",
          "next_run_time"
        ],
        "title": "GraphExecutionJobInfo"
      },
      "GraphExecutionMeta": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "user_id": { "type": "string", "title": "User Id" },
          "graph_id": { "type": "string", "title": "Graph Id" },
          "graph_version": { "type": "integer", "title": "Graph Version" },
          "preset_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Preset Id"
          },
          "status": { "$ref": "#/components/schemas/AgentExecutionStatus" },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "title": "Started At"
          },
          "ended_at": {
            "type": "string",
            "format": "date-time",
            "title": "Ended At"
          },
          "stats": {
            "anyOf": [
              { "$ref": "#/components/schemas/Stats" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "graph_id",
          "graph_version",
          "status",
          "started_at",
          "ended_at",
          "stats"
        ],
        "title": "GraphExecutionMeta"
      },
      "GraphExecutionWithNodes": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "user_id": { "type": "string", "title": "User Id" },
          "graph_id": { "type": "string", "title": "Graph Id" },
          "graph_version": { "type": "integer", "title": "Graph Version" },
          "preset_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Preset Id"
          },
          "status": { "$ref": "#/components/schemas/AgentExecutionStatus" },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "title": "Started At"
          },
          "ended_at": {
            "type": "string",
            "format": "date-time",
            "title": "Ended At"
          },
          "stats": {
            "anyOf": [
              { "$ref": "#/components/schemas/Stats" },
              { "type": "null" }
            ]
          },
          "inputs": {
            "additionalProperties": true,
            "type": "object",
            "title": "Inputs"
          },
          "outputs": {
            "additionalProperties": { "items": {}, "type": "array" },
            "type": "object",
            "title": "Outputs"
          },
          "node_executions": {
            "items": { "$ref": "#/components/schemas/NodeExecutionResult" },
            "type": "array",
            "title": "Node Executions"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "graph_id",
          "graph_version",
          "status",
          "started_at",
          "ended_at",
          "stats",
          "inputs",
          "outputs",
          "node_executions"
        ],
        "title": "GraphExecutionWithNodes"
      },
      "GraphModel": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "version": { "type": "integer", "title": "Version", "default": 1 },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "name": { "type": "string", "title": "Name" },
          "description": { "type": "string", "title": "Description" },
          "nodes": {
            "items": { "$ref": "#/components/schemas/NodeModel" },
            "type": "array",
            "title": "Nodes",
            "default": []
          },
          "links": {
            "items": { "$ref": "#/components/schemas/Link" },
            "type": "array",
            "title": "Links",
            "default": []
          },
          "forked_from_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Forked From Id"
          },
          "forked_from_version": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Forked From Version"
          },
          "sub_graphs": {
            "items": { "$ref": "#/components/schemas/BaseGraph-Output" },
            "type": "array",
            "title": "Sub Graphs",
            "default": []
          },
          "user_id": { "type": "string", "title": "User Id" },
          "input_schema": {
            "additionalProperties": true,
            "type": "object",
            "title": "Input Schema",
            "readOnly": true
          },
          "output_schema": {
            "additionalProperties": true,
            "type": "object",
            "title": "Output Schema",
            "readOnly": true
          },
          "credentials_input_schema": {
            "additionalProperties": true,
            "type": "object",
            "title": "Credentials Input Schema",
            "readOnly": true
          },
          "has_webhook_trigger": {
            "type": "boolean",
            "title": "Has Webhook Trigger",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "name",
          "description",
          "user_id",
          "input_schema",
          "output_schema",
          "credentials_input_schema",
          "has_webhook_trigger"
        ],
        "title": "GraphModel"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": { "$ref": "#/components/schemas/ValidationError" },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HostScopedCredentials-Input": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "provider": { "type": "string", "title": "Provider" },
          "title": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Title"
          },
          "type": {
            "type": "string",
            "const": "host_scoped",
            "title": "Type",
            "default": "host_scoped"
          },
          "host": {
            "type": "string",
            "title": "Host",
            "description": "The host/URI pattern to match against request URLs"
          },
          "headers": {
            "additionalProperties": {
              "type": "string",
              "format": "password",
              "writeOnly": true
            },
            "type": "object",
            "title": "Headers",
            "description": "Key-value header map to add to matching requests"
          }
        },
        "type": "object",
        "required": ["provider", "host"],
        "title": "HostScopedCredentials"
      },
      "HostScopedCredentials-Output": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "provider": { "type": "string", "title": "Provider" },
          "title": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Title"
          },
          "type": {
            "type": "string",
            "const": "host_scoped",
            "title": "Type",
            "default": "host_scoped"
          },
          "host": {
            "type": "string",
            "title": "Host",
            "description": "The host/URI pattern to match against request URLs"
          },
          "headers": {
            "additionalProperties": { "type": "string" },
            "type": "object",
            "title": "Headers",
            "description": "Key-value header map to add to matching requests"
          }
        },
        "type": "object",
        "required": ["provider", "host"],
        "title": "HostScopedCredentials"
      },
      "LibraryAgent": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "graph_id": { "type": "string", "title": "Graph Id" },
          "graph_version": { "type": "integer", "title": "Graph Version" },
          "image_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Image Url"
          },
          "creator_name": { "type": "string", "title": "Creator Name" },
          "creator_image_url": {
            "type": "string",
            "title": "Creator Image Url"
          },
          "status": { "$ref": "#/components/schemas/LibraryAgentStatus" },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "name": { "type": "string", "title": "Name" },
          "description": { "type": "string", "title": "Description" },
          "input_schema": {
            "additionalProperties": true,
            "type": "object",
            "title": "Input Schema"
          },
          "credentials_input_schema": {
            "additionalProperties": true,
            "type": "object",
            "title": "Credentials Input Schema",
            "description": "Input schema for credentials required by the agent"
          },
          "has_external_trigger": {
            "type": "boolean",
            "title": "Has External Trigger",
            "description": "Whether the agent has an external trigger (e.g. webhook) node"
          },
          "trigger_setup_info": {
            "anyOf": [
              { "$ref": "#/components/schemas/LibraryAgentTriggerInfo" },
              { "type": "null" }
            ]
          },
          "new_output": { "type": "boolean", "title": "New Output" },
          "can_access_graph": {
            "type": "boolean",
            "title": "Can Access Graph"
          },
          "is_latest_version": {
            "type": "boolean",
            "title": "Is Latest Version"
          }
        },
        "type": "object",
        "required": [
          "id",
          "graph_id",
          "graph_version",
          "image_url",
          "creator_name",
          "creator_image_url",
          "status",
          "updated_at",
          "name",
          "description",
          "input_schema",
          "credentials_input_schema",
          "has_external_trigger",
          "new_output",
          "can_access_graph",
          "is_latest_version"
        ],
        "title": "LibraryAgent",
        "description": "Represents an agent in the library, including metadata for display and\nuser interaction within the system."
      },
      "LibraryAgentPreset": {
        "properties": {
          "graph_id": { "type": "string", "title": "Graph Id" },
          "graph_version": { "type": "integer", "title": "Graph Version" },
          "inputs": {
            "additionalProperties": true,
            "type": "object",
            "title": "Inputs"
          },
          "credentials": {
            "additionalProperties": {
              "$ref": "#/components/schemas/CredentialsMetaInput"
            },
            "type": "object",
            "title": "Credentials"
          },
          "name": { "type": "string", "title": "Name" },
          "description": { "type": "string", "title": "Description" },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "webhook_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Webhook Id"
          },
          "id": { "type": "string", "title": "Id" },
          "user_id": { "type": "string", "title": "User Id" },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "graph_id",
          "graph_version",
          "inputs",
          "credentials",
          "name",
          "description",
          "id",
          "user_id",
          "updated_at"
        ],
        "title": "LibraryAgentPreset",
        "description": "Represents a preset configuration for a library agent."
      },
      "LibraryAgentPresetCreatable": {
        "properties": {
          "graph_id": { "type": "string", "title": "Graph Id" },
          "graph_version": { "type": "integer", "title": "Graph Version" },
          "inputs": {
            "additionalProperties": true,
            "type": "object",
            "title": "Inputs"
          },
          "credentials": {
            "additionalProperties": {
              "$ref": "#/components/schemas/CredentialsMetaInput"
            },
            "type": "object",
            "title": "Credentials"
          },
          "name": { "type": "string", "title": "Name" },
          "description": { "type": "string", "title": "Description" },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "webhook_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Webhook Id"
          }
        },
        "type": "object",
        "required": [
          "graph_id",
          "graph_version",
          "inputs",
          "credentials",
          "name",
          "description"
        ],
        "title": "LibraryAgentPresetCreatable",
        "description": "Request model used when creating a new preset for a library agent."
      },
      "LibraryAgentPresetCreatableFromGraphExecution": {
        "properties": {
          "graph_execution_id": {
            "type": "string",
            "title": "Graph Execution Id"
          },
          "name": { "type": "string", "title": "Name" },
          "description": { "type": "string", "title": "Description" },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          }
        },
        "type": "object",
        "required": ["graph_execution_id", "name", "description"],
        "title": "LibraryAgentPresetCreatableFromGraphExecution",
        "description": "Request model used when creating a new preset for a library agent."
      },
      "LibraryAgentPresetResponse": {
        "properties": {
          "presets": {
            "items": { "$ref": "#/components/schemas/LibraryAgentPreset" },
            "type": "array",
            "title": "Presets"
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        },
        "type": "object",
        "required": ["presets", "pagination"],
        "title": "LibraryAgentPresetResponse",
        "description": "Response schema for a list of agent presets and pagination info."
      },
      "LibraryAgentPresetUpdatable": {
        "properties": {
          "inputs": {
            "anyOf": [
              { "additionalProperties": true, "type": "object" },
              { "type": "null" }
            ],
            "title": "Inputs"
          },
          "credentials": {
            "anyOf": [
              {
                "additionalProperties": {
                  "$ref": "#/components/schemas/CredentialsMetaInput"
                },
                "type": "object"
              },
              { "type": "null" }
            ],
            "title": "Credentials"
          },
          "name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Name"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "is_active": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Is Active"
          }
        },
        "type": "object",
        "title": "LibraryAgentPresetUpdatable",
        "description": "Request model used when updating a preset for a library agent."
      },
      "LibraryAgentResponse": {
        "properties": {
          "agents": {
            "items": { "$ref": "#/components/schemas/LibraryAgent" },
            "type": "array",
            "title": "Agents"
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        },
        "type": "object",
        "required": ["agents", "pagination"],
        "title": "LibraryAgentResponse",
        "description": "Response schema for a list of library agents and pagination info."
      },
      "LibraryAgentSort": {
        "type": "string",
        "enum": ["createdAt", "updatedAt"],
        "title": "LibraryAgentSort",
        "description": "Possible sort options for sorting library agents."
      },
      "LibraryAgentStatus": {
        "type": "string",
        "enum": ["COMPLETED", "HEALTHY", "WAITING", "ERROR"],
        "title": "LibraryAgentStatus"
      },
      "LibraryAgentTriggerInfo": {
        "properties": {
          "provider": { "$ref": "#/components/schemas/ProviderName" },
          "config_schema": {
            "additionalProperties": true,
            "type": "object",
            "title": "Config Schema",
            "description": "Input schema for the trigger block"
          },
          "credentials_input_name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Credentials Input Name"
          }
        },
        "type": "object",
        "required": ["provider", "config_schema", "credentials_input_name"],
        "title": "LibraryAgentTriggerInfo"
      },
      "LibraryAgentUpdateRequest": {
        "properties": {
          "auto_update_version": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Auto Update Version",
            "description": "Auto-update the agent version"
          },
          "is_favorite": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Is Favorite",
            "description": "Mark the agent as a favorite"
          },
          "is_archived": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Is Archived",
            "description": "Archive the agent"
          }
        },
        "type": "object",
        "title": "LibraryAgentUpdateRequest",
        "description": "Schema for updating a library agent via PUT.\n\nIncludes flags for auto-updating version, marking as favorite,\narchiving, or deleting."
      },
      "Link": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "source_id": { "type": "string", "title": "Source Id" },
          "sink_id": { "type": "string", "title": "Sink Id" },
          "source_name": { "type": "string", "title": "Source Name" },
          "sink_name": { "type": "string", "title": "Sink Name" },
          "is_static": {
            "type": "boolean",
            "title": "Is Static",
            "default": false
          }
        },
        "type": "object",
        "required": ["source_id", "sink_id", "source_name", "sink_name"],
        "title": "Link"
      },
      "LogRawMetricRequest": {
        "properties": {
          "metric_name": {
            "type": "string",
            "minLength": 1,
            "title": "Metric Name"
          },
          "metric_value": { "type": "number", "title": "Metric Value" },
          "data_string": {
            "type": "string",
            "minLength": 1,
            "title": "Data String"
          }
        },
        "type": "object",
        "required": ["metric_name", "metric_value", "data_string"],
        "title": "LogRawMetricRequest"
      },
      "LoginResponse": {
        "properties": {
          "login_url": { "type": "string", "title": "Login Url" },
          "state_token": { "type": "string", "title": "State Token" }
        },
        "type": "object",
        "required": ["login_url", "state_token"],
        "title": "LoginResponse"
      },
      "Message": {
        "properties": {
          "query": { "type": "string", "title": "Query" },
          "response": { "type": "string", "title": "Response" }
        },
        "type": "object",
        "required": ["query", "response"],
        "title": "Message"
      },
      "MyAgent": {
        "properties": {
          "agent_id": { "type": "string", "title": "Agent Id" },
          "agent_version": { "type": "integer", "title": "Agent Version" },
          "agent_name": { "type": "string", "title": "Agent Name" },
          "agent_image": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Agent Image"
          },
          "description": { "type": "string", "title": "Description" },
          "last_edited": {
            "type": "string",
            "format": "date-time",
            "title": "Last Edited"
          }
        },
        "type": "object",
        "required": [
          "agent_id",
          "agent_version",
          "agent_name",
          "description",
          "last_edited"
        ],
        "title": "MyAgent"
      },
      "MyAgentsResponse": {
        "properties": {
          "agents": {
            "items": { "$ref": "#/components/schemas/MyAgent" },
            "type": "array",
            "title": "Agents"
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        },
        "type": "object",
        "required": ["agents", "pagination"],
        "title": "MyAgentsResponse"
      },
      "Node": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "block_id": { "type": "string", "title": "Block Id" },
          "input_default": {
            "additionalProperties": true,
            "type": "object",
            "title": "Input Default",
            "default": {}
          },
          "metadata": {
            "additionalProperties": true,
            "type": "object",
            "title": "Metadata",
            "default": {}
          },
          "input_links": {
            "items": { "$ref": "#/components/schemas/Link" },
            "type": "array",
            "title": "Input Links",
            "default": []
          },
          "output_links": {
            "items": { "$ref": "#/components/schemas/Link" },
            "type": "array",
            "title": "Output Links",
            "default": []
          }
        },
        "type": "object",
        "required": ["block_id"],
        "title": "Node"
      },
      "NodeExecutionResult": {
        "properties": {
          "user_id": { "type": "string", "title": "User Id" },
          "graph_id": { "type": "string", "title": "Graph Id" },
          "graph_version": { "type": "integer", "title": "Graph Version" },
          "graph_exec_id": { "type": "string", "title": "Graph Exec Id" },
          "node_exec_id": { "type": "string", "title": "Node Exec Id" },
          "node_id": { "type": "string", "title": "Node Id" },
          "block_id": { "type": "string", "title": "Block Id" },
          "status": { "$ref": "#/components/schemas/AgentExecutionStatus" },
          "input_data": {
            "additionalProperties": true,
            "type": "object",
            "title": "Input Data"
          },
          "output_data": {
            "additionalProperties": { "items": {}, "type": "array" },
            "type": "object",
            "title": "Output Data"
          },
          "add_time": {
            "type": "string",
            "format": "date-time",
            "title": "Add Time"
          },
          "queue_time": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Queue Time"
          },
          "start_time": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Start Time"
          },
          "end_time": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "End Time"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "graph_id",
          "graph_version",
          "graph_exec_id",
          "node_exec_id",
          "node_id",
          "block_id",
          "status",
          "input_data",
          "output_data",
          "add_time",
          "queue_time",
          "start_time",
          "end_time"
        ],
        "title": "NodeExecutionResult"
      },
      "NodeModel": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "block_id": { "type": "string", "title": "Block Id" },
          "input_default": {
            "additionalProperties": true,
            "type": "object",
            "title": "Input Default",
            "default": {}
          },
          "metadata": {
            "additionalProperties": true,
            "type": "object",
            "title": "Metadata",
            "default": {}
          },
          "input_links": {
            "items": { "$ref": "#/components/schemas/Link" },
            "type": "array",
            "title": "Input Links",
            "default": []
          },
          "output_links": {
            "items": { "$ref": "#/components/schemas/Link" },
            "type": "array",
            "title": "Output Links",
            "default": []
          },
          "graph_id": { "type": "string", "title": "Graph Id" },
          "graph_version": { "type": "integer", "title": "Graph Version" },
          "webhook_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Webhook Id"
          },
          "webhook": {
            "anyOf": [
              { "$ref": "#/components/schemas/Webhook" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["block_id", "graph_id", "graph_version"],
        "title": "NodeModel"
      },
      "NotificationPreference": {
        "properties": {
          "user_id": { "type": "string", "title": "User Id" },
          "email": { "type": "string", "format": "email", "title": "Email" },
          "preferences": {
            "additionalProperties": { "type": "boolean" },
            "propertyNames": {
              "$ref": "#/components/schemas/NotificationType"
            },
            "type": "object",
            "title": "Preferences",
            "description": "Which notifications the user wants"
          },
          "daily_limit": {
            "type": "integer",
            "title": "Daily Limit",
            "default": 10
          },
          "emails_sent_today": {
            "type": "integer",
            "title": "Emails Sent Today",
            "default": 0
          },
          "last_reset_date": {
            "type": "string",
            "format": "date-time",
            "title": "Last Reset Date"
          }
        },
        "type": "object",
        "required": ["user_id", "email"],
        "title": "NotificationPreference"
      },
      "NotificationPreferenceDTO": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email",
            "description": "User's email address"
          },
          "preferences": {
            "additionalProperties": { "type": "boolean" },
            "propertyNames": {
              "$ref": "#/components/schemas/NotificationType"
            },
            "type": "object",
            "title": "Preferences",
            "description": "Which notifications the user wants"
          },
          "daily_limit": {
            "type": "integer",
            "title": "Daily Limit",
            "description": "Max emails per day"
          }
        },
        "type": "object",
        "required": ["email", "preferences", "daily_limit"],
        "title": "NotificationPreferenceDTO"
      },
      "NotificationType": {
        "type": "string",
        "enum": [
          "AGENT_RUN",
          "ZERO_BALANCE",
          "LOW_BALANCE",
          "BLOCK_EXECUTION_FAILED",
          "CONTINUOUS_AGENT_ERROR",
          "DAILY_SUMMARY",
          "WEEKLY_SUMMARY",
          "MONTHLY_SUMMARY",
          "REFUND_REQUEST",
          "REFUND_PROCESSED"
        ],
        "title": "NotificationType"
      },
      "OAuth2Credentials": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "provider": { "type": "string", "title": "Provider" },
          "title": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Title"
          },
          "type": {
            "type": "string",
            "const": "oauth2",
            "title": "Type",
            "default": "oauth2"
          },
          "username": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Username"
          },
          "access_token": {
            "type": "string",
            "format": "password",
            "title": "Access Token",
            "writeOnly": true
          },
          "access_token_expires_at": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Access Token Expires At"
          },
          "refresh_token": {
            "anyOf": [
              { "type": "string", "format": "password", "writeOnly": true },
              { "type": "null" }
            ],
            "title": "Refresh Token"
          },
          "refresh_token_expires_at": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Refresh Token Expires At"
          },
          "scopes": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Scopes"
          },
          "metadata": {
            "additionalProperties": true,
            "type": "object",
            "title": "Metadata"
          }
        },
        "type": "object",
        "required": ["provider", "access_token", "scopes"],
        "title": "OAuth2Credentials"
      },
      "OnboardingStep": {
        "type": "string",
        "enum": [
          "WELCOME",
          "USAGE_REASON",
          "INTEGRATIONS",
          "AGENT_CHOICE",
          "AGENT_NEW_RUN",
          "AGENT_INPUT",
          "CONGRATS",
          "GET_RESULTS",
          "MARKETPLACE_VISIT",
          "MARKETPLACE_ADD_AGENT",
          "MARKETPLACE_RUN_AGENT",
          "BUILDER_OPEN",
          "BUILDER_SAVE_AGENT",
          "BUILDER_RUN_AGENT"
        ],
        "title": "OnboardingStep"
      },
      "Pagination": {
        "properties": {
          "total_items": {
            "type": "integer",
            "title": "Total Items",
            "description": "Total number of items.",
            "examples": [42]
          },
          "total_pages": {
            "type": "integer",
            "title": "Total Pages",
            "description": "Total number of pages.",
            "examples": [2]
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "Current_page page number.",
            "examples": [1]
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size",
            "description": "Number of items per page.",
            "examples": [25]
          }
        },
        "type": "object",
        "required": ["total_items", "total_pages", "current_page", "page_size"],
        "title": "Pagination"
      },
      "PostmarkBounceEnum": {
        "type": "integer",
        "enum": [
          1, 2, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384,
          100000, 100001, 100002, 100003, 100006, 100007, 100008, 100009, 100010
        ],
        "title": "PostmarkBounceEnum"
      },
      "PostmarkBounceWebhook": {
        "properties": {
          "RecordType": {
            "type": "string",
            "const": "Bounce",
            "title": "Recordtype",
            "default": "Bounce"
          },
          "ID": { "type": "integer", "title": "Id" },
          "Type": { "type": "string", "title": "Type" },
          "TypeCode": { "$ref": "#/components/schemas/PostmarkBounceEnum" },
          "Tag": { "type": "string", "title": "Tag" },
          "MessageID": { "type": "string", "title": "Messageid" },
          "Details": { "type": "string", "title": "Details" },
          "Email": { "type": "string", "title": "Email" },
          "From": { "type": "string", "title": "From" },
          "BouncedAt": { "type": "string", "title": "Bouncedat" },
          "Inactive": { "type": "boolean", "title": "Inactive" },
          "DumpAvailable": { "type": "boolean", "title": "Dumpavailable" },
          "CanActivate": { "type": "boolean", "title": "Canactivate" },
          "Subject": { "type": "string", "title": "Subject" },
          "ServerID": { "type": "integer", "title": "Serverid" },
          "MessageStream": { "type": "string", "title": "Messagestream" },
          "Content": { "type": "string", "title": "Content" },
          "Name": { "type": "string", "title": "Name" },
          "Description": { "type": "string", "title": "Description" },
          "Metadata": {
            "additionalProperties": { "type": "string" },
            "type": "object",
            "title": "Metadata"
          }
        },
        "type": "object",
        "required": [
          "ID",
          "Type",
          "TypeCode",
          "Tag",
          "MessageID",
          "Details",
          "Email",
          "From",
          "BouncedAt",
          "Inactive",
          "DumpAvailable",
          "CanActivate",
          "Subject",
          "ServerID",
          "MessageStream",
          "Content",
          "Name",
          "Description",
          "Metadata"
        ],
        "title": "PostmarkBounceWebhook"
      },
      "PostmarkClickWebhook": {
        "properties": {
          "RecordType": {
            "type": "string",
            "const": "Click",
            "title": "Recordtype",
            "default": "Click"
          },
          "MessageStream": { "type": "string", "title": "Messagestream" },
          "Metadata": {
            "additionalProperties": { "type": "string" },
            "type": "object",
            "title": "Metadata"
          },
          "Recipient": { "type": "string", "title": "Recipient" },
          "MessageID": { "type": "string", "title": "Messageid" },
          "ReceivedAt": { "type": "string", "title": "Receivedat" },
          "Platform": { "type": "string", "title": "Platform" },
          "ClickLocation": { "type": "string", "title": "Clicklocation" },
          "OriginalLink": { "type": "string", "title": "Originallink" },
          "Tag": { "type": "string", "title": "Tag" },
          "UserAgent": { "type": "string", "title": "Useragent" },
          "OS": {
            "additionalProperties": { "type": "string" },
            "type": "object",
            "title": "Os"
          },
          "Client": {
            "additionalProperties": { "type": "string" },
            "type": "object",
            "title": "Client"
          },
          "Geo": {
            "additionalProperties": { "type": "string" },
            "type": "object",
            "title": "Geo"
          }
        },
        "type": "object",
        "required": [
          "MessageStream",
          "Metadata",
          "Recipient",
          "MessageID",
          "ReceivedAt",
          "Platform",
          "ClickLocation",
          "OriginalLink",
          "Tag",
          "UserAgent",
          "OS",
          "Client",
          "Geo"
        ],
        "title": "PostmarkClickWebhook"
      },
      "PostmarkDeliveryWebhook": {
        "properties": {
          "RecordType": {
            "type": "string",
            "const": "Delivery",
            "title": "Recordtype",
            "default": "Delivery"
          },
          "ServerID": { "type": "integer", "title": "Serverid" },
          "MessageStream": { "type": "string", "title": "Messagestream" },
          "MessageID": { "type": "string", "title": "Messageid" },
          "Recipient": { "type": "string", "title": "Recipient" },
          "Tag": { "type": "string", "title": "Tag" },
          "DeliveredAt": { "type": "string", "title": "Deliveredat" },
          "Details": { "type": "string", "title": "Details" },
          "Metadata": {
            "additionalProperties": { "type": "string" },
            "type": "object",
            "title": "Metadata"
          }
        },
        "type": "object",
        "required": [
          "ServerID",
          "MessageStream",
          "MessageID",
          "Recipient",
          "Tag",
          "DeliveredAt",
          "Details",
          "Metadata"
        ],
        "title": "PostmarkDeliveryWebhook"
      },
      "PostmarkOpenWebhook": {
        "properties": {
          "RecordType": {
            "type": "string",
            "const": "Open",
            "title": "Recordtype",
            "default": "Open"
          },
          "MessageStream": { "type": "string", "title": "Messagestream" },
          "Metadata": {
            "additionalProperties": { "type": "string" },
            "type": "object",
            "title": "Metadata"
          },
          "FirstOpen": { "type": "boolean", "title": "Firstopen" },
          "Recipient": { "type": "string", "title": "Recipient" },
          "MessageID": { "type": "string", "title": "Messageid" },
          "ReceivedAt": { "type": "string", "title": "Receivedat" },
          "Platform": { "type": "string", "title": "Platform" },
          "ReadSeconds": { "type": "integer", "title": "Readseconds" },
          "Tag": { "type": "string", "title": "Tag" },
          "UserAgent": { "type": "string", "title": "Useragent" },
          "OS": {
            "additionalProperties": { "type": "string" },
            "type": "object",
            "title": "Os"
          },
          "Client": {
            "additionalProperties": { "type": "string" },
            "type": "object",
            "title": "Client"
          },
          "Geo": {
            "additionalProperties": { "type": "string" },
            "type": "object",
            "title": "Geo"
          }
        },
        "type": "object",
        "required": [
          "MessageStream",
          "Metadata",
          "FirstOpen",
          "Recipient",
          "MessageID",
          "ReceivedAt",
          "Platform",
          "ReadSeconds",
          "Tag",
          "UserAgent",
          "OS",
          "Client",
          "Geo"
        ],
        "title": "PostmarkOpenWebhook"
      },
      "PostmarkSpamComplaintWebhook": {
        "properties": {
          "RecordType": {
            "type": "string",
            "const": "SpamComplaint",
            "title": "Recordtype",
            "default": "SpamComplaint"
          },
          "ID": { "type": "integer", "title": "Id" },
          "Type": { "type": "string", "title": "Type" },
          "TypeCode": { "type": "integer", "title": "Typecode" },
          "Tag": { "type": "string", "title": "Tag" },
          "MessageID": { "type": "string", "title": "Messageid" },
          "Details": { "type": "string", "title": "Details" },
          "Email": { "type": "string", "title": "Email" },
          "From": { "type": "string", "title": "From" },
          "BouncedAt": { "type": "string", "title": "Bouncedat" },
          "Inactive": { "type": "boolean", "title": "Inactive" },
          "DumpAvailable": { "type": "boolean", "title": "Dumpavailable" },
          "CanActivate": { "type": "boolean", "title": "Canactivate" },
          "Subject": { "type": "string", "title": "Subject" },
          "ServerID": { "type": "integer", "title": "Serverid" },
          "MessageStream": { "type": "string", "title": "Messagestream" },
          "Content": { "type": "string", "title": "Content" },
          "Name": { "type": "string", "title": "Name" },
          "Description": { "type": "string", "title": "Description" },
          "Metadata": {
            "additionalProperties": { "type": "string" },
            "type": "object",
            "title": "Metadata"
          }
        },
        "type": "object",
        "required": [
          "ID",
          "Type",
          "TypeCode",
          "Tag",
          "MessageID",
          "Details",
          "Email",
          "From",
          "BouncedAt",
          "Inactive",
          "DumpAvailable",
          "CanActivate",
          "Subject",
          "ServerID",
          "MessageStream",
          "Content",
          "Name",
          "Description",
          "Metadata"
        ],
        "title": "PostmarkSpamComplaintWebhook"
      },
      "PostmarkSubscriptionChangeWebhook": {
        "properties": {
          "RecordType": {
            "type": "string",
            "const": "SubscriptionChange",
            "title": "Recordtype",
            "default": "SubscriptionChange"
          },
          "MessageID": { "type": "string", "title": "Messageid" },
          "ServerID": { "type": "integer", "title": "Serverid" },
          "MessageStream": { "type": "string", "title": "Messagestream" },
          "ChangedAt": { "type": "string", "title": "Changedat" },
          "Recipient": { "type": "string", "title": "Recipient" },
          "Origin": { "type": "string", "title": "Origin" },
          "SuppressSending": { "type": "boolean", "title": "Suppresssending" },
          "SuppressionReason": {
            "type": "string",
            "title": "Suppressionreason"
          },
          "Tag": { "type": "string", "title": "Tag" },
          "Metadata": {
            "additionalProperties": { "type": "string" },
            "type": "object",
            "title": "Metadata"
          }
        },
        "type": "object",
        "required": [
          "MessageID",
          "ServerID",
          "MessageStream",
          "ChangedAt",
          "Recipient",
          "Origin",
          "SuppressSending",
          "SuppressionReason",
          "Tag",
          "Metadata"
        ],
        "title": "PostmarkSubscriptionChangeWebhook"
      },
      "Profile": {
        "properties": {
          "name": { "type": "string", "title": "Name" },
          "username": { "type": "string", "title": "Username" },
          "description": { "type": "string", "title": "Description" },
          "links": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Links"
          },
          "avatar_url": { "type": "string", "title": "Avatar Url" },
          "is_featured": {
            "type": "boolean",
            "title": "Is Featured",
            "default": false
          }
        },
        "type": "object",
        "required": ["name", "username", "description", "links", "avatar_url"],
        "title": "Profile"
      },
      "ProfileDetails": {
        "properties": {
          "name": { "type": "string", "title": "Name" },
          "username": { "type": "string", "title": "Username" },
          "description": { "type": "string", "title": "Description" },
          "links": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Links"
          },
          "avatar_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Avatar Url"
          }
        },
        "type": "object",
        "required": ["name", "username", "description", "links"],
        "title": "ProfileDetails"
      },
      "ProviderName": {
        "type": "string",
        "enum": [
          "aiml_api",
          "anthropic",
          "apollo",
          "compass",
          "discord",
          "d_id",
          "e2b",
          "exa",
          "fal",
          "generic_webhook",
          "github",
          "google",
          "google_maps",
          "groq",
          "http",
          "hubspot",
          "ideogram",
          "jina",
          "linear",
          "llama_api",
          "medium",
          "mem0",
          "notion",
          "nvidia",
          "ollama",
          "openai",
          "openweathermap",
          "open_router",
          "pinecone",
          "reddit",
          "replicate",
          "revid",
          "screenshotone",
          "slant3d",
          "smartlead",
          "smtp",
          "twitter",
          "todoist",
          "unreal_speech",
          "zerobounce"
        ],
        "title": "ProviderName"
      },
      "RefundRequest": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "user_id": { "type": "string", "title": "User Id" },
          "transaction_key": { "type": "string", "title": "Transaction Key" },
          "amount": { "type": "integer", "title": "Amount" },
          "reason": { "type": "string", "title": "Reason" },
          "result": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Result"
          },
          "status": { "type": "string", "title": "Status" },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "user_id",
          "transaction_key",
          "amount",
          "reason",
          "status",
          "created_at",
          "updated_at"
        ],
        "title": "RefundRequest"
      },
      "RequestTopUp": {
        "properties": {
          "credit_amount": { "type": "integer", "title": "Credit Amount" }
        },
        "type": "object",
        "required": ["credit_amount"],
        "title": "RequestTopUp"
      },
      "ReviewSubmissionRequest": {
        "properties": {
          "store_listing_version_id": {
            "type": "string",
            "title": "Store Listing Version Id"
          },
          "is_approved": { "type": "boolean", "title": "Is Approved" },
          "comments": { "type": "string", "title": "Comments" },
          "internal_comments": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Internal Comments"
          }
        },
        "type": "object",
        "required": ["store_listing_version_id", "is_approved", "comments"],
        "title": "ReviewSubmissionRequest"
      },
      "ScheduleCreationRequest": {
        "properties": {
          "graph_version": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Graph Version"
          },
          "name": { "type": "string", "title": "Name" },
          "cron": { "type": "string", "title": "Cron" },
          "inputs": {
            "additionalProperties": true,
            "type": "object",
            "title": "Inputs"
          },
          "credentials": {
            "additionalProperties": {
              "$ref": "#/components/schemas/CredentialsMetaInput"
            },
            "type": "object",
            "title": "Credentials"
          }
        },
        "type": "object",
        "required": ["name", "cron", "inputs"],
        "title": "ScheduleCreationRequest"
      },
      "SetGraphActiveVersion": {
        "properties": {
          "active_graph_version": {
            "type": "integer",
            "title": "Active Graph Version"
          }
        },
        "type": "object",
        "required": ["active_graph_version"],
        "title": "SetGraphActiveVersion"
      },
      "Stats": {
        "properties": {
          "cost": {
            "type": "integer",
            "title": "Cost",
            "description": "Execution cost (cents)",
            "default": 0
          },
          "duration": {
            "type": "number",
            "title": "Duration",
            "description": "Seconds from start to end of run",
            "default": 0
          },
          "duration_cpu_only": {
            "type": "number",
            "title": "Duration Cpu Only",
            "description": "CPU sec of duration",
            "default": 0
          },
          "node_exec_time": {
            "type": "number",
            "title": "Node Exec Time",
            "description": "Seconds of total node runtime",
            "default": 0
          },
          "node_exec_time_cpu_only": {
            "type": "number",
            "title": "Node Exec Time Cpu Only",
            "description": "CPU sec of node_exec_time",
            "default": 0
          },
          "node_exec_count": {
            "type": "integer",
            "title": "Node Exec Count",
            "description": "Number of node executions",
            "default": 0
          },
          "node_error_count": {
            "type": "integer",
            "title": "Node Error Count",
            "description": "Number of node errors",
            "default": 0
          },
          "error": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Error",
            "description": "Error message if any"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "title": "Stats"
      },
      "StoreAgent": {
        "properties": {
          "slug": { "type": "string", "title": "Slug" },
          "agent_name": { "type": "string", "title": "Agent Name" },
          "agent_image": { "type": "string", "title": "Agent Image" },
          "creator": { "type": "string", "title": "Creator" },
          "creator_avatar": { "type": "string", "title": "Creator Avatar" },
          "sub_heading": { "type": "string", "title": "Sub Heading" },
          "description": { "type": "string", "title": "Description" },
          "runs": { "type": "integer", "title": "Runs" },
          "rating": { "type": "number", "title": "Rating" }
        },
        "type": "object",
        "required": [
          "slug",
          "agent_name",
          "agent_image",
          "creator",
          "creator_avatar",
          "sub_heading",
          "description",
          "runs",
          "rating"
        ],
        "title": "StoreAgent"
      },
      "StoreAgentDetails": {
        "properties": {
          "store_listing_version_id": {
            "type": "string",
            "title": "Store Listing Version Id"
          },
          "slug": { "type": "string", "title": "Slug" },
          "agent_name": { "type": "string", "title": "Agent Name" },
          "agent_video": { "type": "string", "title": "Agent Video" },
          "agent_image": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Agent Image"
          },
          "creator": { "type": "string", "title": "Creator" },
          "creator_avatar": { "type": "string", "title": "Creator Avatar" },
          "sub_heading": { "type": "string", "title": "Sub Heading" },
          "description": { "type": "string", "title": "Description" },
          "categories": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Categories"
          },
          "runs": { "type": "integer", "title": "Runs" },
          "rating": { "type": "number", "title": "Rating" },
          "versions": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Versions"
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated"
          },
          "active_version_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Active Version Id"
          },
          "has_approved_version": {
            "type": "boolean",
            "title": "Has Approved Version",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "store_listing_version_id",
          "slug",
          "agent_name",
          "agent_video",
          "agent_image",
          "creator",
          "creator_avatar",
          "sub_heading",
          "description",
          "categories",
          "runs",
          "rating",
          "versions",
          "last_updated"
        ],
        "title": "StoreAgentDetails"
      },
      "StoreAgentsResponse": {
        "properties": {
          "agents": {
            "items": { "$ref": "#/components/schemas/StoreAgent" },
            "type": "array",
            "title": "Agents"
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        },
        "type": "object",
        "required": ["agents", "pagination"],
        "title": "StoreAgentsResponse"
      },
      "StoreListingWithVersions": {
        "properties": {
          "listing_id": { "type": "string", "title": "Listing Id" },
          "slug": { "type": "string", "title": "Slug" },
          "agent_id": { "type": "string", "title": "Agent Id" },
          "agent_version": { "type": "integer", "title": "Agent Version" },
          "active_version_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Active Version Id"
          },
          "has_approved_version": {
            "type": "boolean",
            "title": "Has Approved Version",
            "default": false
          },
          "creator_email": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Creator Email"
          },
          "latest_version": {
            "anyOf": [
              { "$ref": "#/components/schemas/StoreSubmission" },
              { "type": "null" }
            ]
          },
          "versions": {
            "items": { "$ref": "#/components/schemas/StoreSubmission" },
            "type": "array",
            "title": "Versions",
            "default": []
          }
        },
        "type": "object",
        "required": ["listing_id", "slug", "agent_id", "agent_version"],
        "title": "StoreListingWithVersions",
        "description": "A store listing with its version history"
      },
      "StoreListingsWithVersionsResponse": {
        "properties": {
          "listings": {
            "items": {
              "$ref": "#/components/schemas/StoreListingWithVersions"
            },
            "type": "array",
            "title": "Listings"
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        },
        "type": "object",
        "required": ["listings", "pagination"],
        "title": "StoreListingsWithVersionsResponse",
        "description": "Response model for listings with version history"
      },
      "StoreReview": {
        "properties": {
          "score": { "type": "integer", "title": "Score" },
          "comments": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Comments"
          }
        },
        "type": "object",
        "required": ["score"],
        "title": "StoreReview"
      },
      "StoreReviewCreate": {
        "properties": {
          "store_listing_version_id": {
            "type": "string",
            "title": "Store Listing Version Id"
          },
          "score": { "type": "integer", "title": "Score" },
          "comments": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Comments"
          }
        },
        "type": "object",
        "required": ["store_listing_version_id", "score"],
        "title": "StoreReviewCreate"
      },
      "StoreSubmission": {
        "properties": {
          "agent_id": { "type": "string", "title": "Agent Id" },
          "agent_version": { "type": "integer", "title": "Agent Version" },
          "name": { "type": "string", "title": "Name" },
          "sub_heading": { "type": "string", "title": "Sub Heading" },
          "slug": { "type": "string", "title": "Slug" },
          "description": { "type": "string", "title": "Description" },
          "image_urls": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Image Urls"
          },
          "date_submitted": {
            "type": "string",
            "format": "date-time",
            "title": "Date Submitted"
          },
          "status": { "$ref": "#/components/schemas/SubmissionStatus" },
          "runs": { "type": "integer", "title": "Runs" },
          "rating": { "type": "number", "title": "Rating" },
          "store_listing_version_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Store Listing Version Id"
          },
          "version": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Version"
          },
          "reviewer_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Reviewer Id"
          },
          "review_comments": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Review Comments"
          },
          "internal_comments": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Internal Comments"
          },
          "reviewed_at": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Reviewed At"
          },
          "changes_summary": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Changes Summary"
          }
        },
        "type": "object",
        "required": [
          "agent_id",
          "agent_version",
          "name",
          "sub_heading",
          "slug",
          "description",
          "image_urls",
          "date_submitted",
          "status",
          "runs",
          "rating"
        ],
        "title": "StoreSubmission"
      },
      "StoreSubmissionRequest": {
        "properties": {
          "agent_id": { "type": "string", "title": "Agent Id" },
          "agent_version": { "type": "integer", "title": "Agent Version" },
          "slug": { "type": "string", "title": "Slug" },
          "name": { "type": "string", "title": "Name" },
          "sub_heading": { "type": "string", "title": "Sub Heading" },
          "video_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Video Url"
          },
          "image_urls": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Image Urls",
            "default": []
          },
          "description": {
            "type": "string",
            "title": "Description",
            "default": ""
          },
          "categories": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Categories",
            "default": []
          },
          "changes_summary": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Changes Summary"
          }
        },
        "type": "object",
        "required": [
          "agent_id",
          "agent_version",
          "slug",
          "name",
          "sub_heading"
        ],
        "title": "StoreSubmissionRequest"
      },
      "StoreSubmissionsResponse": {
        "properties": {
          "submissions": {
            "items": { "$ref": "#/components/schemas/StoreSubmission" },
            "type": "array",
            "title": "Submissions"
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        },
        "type": "object",
        "required": ["submissions", "pagination"],
        "title": "StoreSubmissionsResponse"
      },
      "SubmissionStatus": {
        "type": "string",
        "enum": ["DRAFT", "PENDING", "APPROVED", "REJECTED"],
        "title": "SubmissionStatus"
      },
      "TransactionHistory": {
        "properties": {
          "transactions": {
            "items": { "$ref": "#/components/schemas/UserTransaction" },
            "type": "array",
            "title": "Transactions"
          },
          "next_transaction_time": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Next Transaction Time"
          }
        },
        "type": "object",
        "required": ["transactions", "next_transaction_time"],
        "title": "TransactionHistory"
      },
      "TriggeredPresetSetupParams": {
        "properties": {
          "name": { "type": "string", "title": "Name" },
          "description": {
            "type": "string",
            "title": "Description",
            "default": ""
          },
          "trigger_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Trigger Config"
          },
          "agent_credentials": {
            "additionalProperties": {
              "$ref": "#/components/schemas/CredentialsMetaInput"
            },
            "type": "object",
            "title": "Agent Credentials"
          }
        },
        "type": "object",
        "required": ["name", "trigger_config"],
        "title": "TriggeredPresetSetupParams"
      },
      "TurnstileVerifyRequest": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token",
            "description": "The Turnstile token to verify"
          },
          "action": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Action",
            "description": "The action that the user is attempting to perform"
          }
        },
        "type": "object",
        "required": ["token"],
        "title": "TurnstileVerifyRequest",
        "description": "Request model for verifying a Turnstile token."
      },
      "TurnstileVerifyResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Whether the token verification was successful"
          },
          "error": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Error",
            "description": "Error message if verification failed"
          },
          "challenge_timestamp": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Challenge Timestamp",
            "description": "Timestamp of the challenge (ISO format)"
          },
          "hostname": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Hostname",
            "description": "Hostname of the site where the challenge was solved"
          },
          "action": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Action",
            "description": "The action associated with this verification"
          }
        },
        "type": "object",
        "required": ["success"],
        "title": "TurnstileVerifyResponse",
        "description": "Response model for the Turnstile verification endpoint."
      },
      "UpdatePermissionsRequest": {
        "properties": {
          "permissions": {
            "items": { "$ref": "#/components/schemas/APIKeyPermission" },
            "type": "array",
            "title": "Permissions"
          }
        },
        "type": "object",
        "required": ["permissions"],
        "title": "UpdatePermissionsRequest"
      },
      "UserHistoryResponse": {
        "properties": {
          "history": {
            "items": { "$ref": "#/components/schemas/UserTransaction" },
            "type": "array",
            "title": "History"
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        },
        "type": "object",
        "required": ["history", "pagination"],
        "title": "UserHistoryResponse",
        "description": "Response model for listings with version history"
      },
      "UserOnboardingUpdate": {
        "properties": {
          "completedSteps": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/OnboardingStep" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Completedsteps"
          },
          "notificationDot": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Notificationdot"
          },
          "notified": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/OnboardingStep" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Notified"
          },
          "usageReason": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Usagereason"
          },
          "integrations": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Integrations"
          },
          "otherIntegrations": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Otherintegrations"
          },
          "selectedStoreListingVersionId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Selectedstorelistingversionid"
          },
          "agentInput": {
            "anyOf": [
              { "additionalProperties": true, "type": "object" },
              { "type": "null" }
            ],
            "title": "Agentinput"
          },
          "onboardingAgentExecutionId": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Onboardingagentexecutionid"
          },
          "agentRuns": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Agentruns"
          }
        },
        "type": "object",
        "title": "UserOnboardingUpdate"
      },
      "UserPasswordCredentials": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "provider": { "type": "string", "title": "Provider" },
          "title": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Title"
          },
          "type": {
            "type": "string",
            "const": "user_password",
            "title": "Type",
            "default": "user_password"
          },
          "username": {
            "type": "string",
            "format": "password",
            "title": "Username",
            "writeOnly": true
          },
          "password": {
            "type": "string",
            "format": "password",
            "title": "Password",
            "writeOnly": true
          }
        },
        "type": "object",
        "required": ["provider", "username", "password"],
        "title": "UserPasswordCredentials"
      },
      "UserTransaction": {
        "properties": {
          "transaction_key": {
            "type": "string",
            "title": "Transaction Key",
            "default": ""
          },
          "transaction_time": {
            "type": "string",
            "format": "date-time",
            "title": "Transaction Time",
            "default": "0001-01-01T00:00:00Z"
          },
          "transaction_type": {
            "$ref": "#/components/schemas/CreditTransactionType",
            "default": "USAGE"
          },
          "amount": { "type": "integer", "title": "Amount", "default": 0 },
          "running_balance": {
            "type": "integer",
            "title": "Running Balance",
            "default": 0
          },
          "current_balance": {
            "type": "integer",
            "title": "Current Balance",
            "default": 0
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "usage_graph_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Usage Graph Id"
          },
          "usage_execution_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Usage Execution Id"
          },
          "usage_node_count": {
            "type": "integer",
            "title": "Usage Node Count",
            "default": 0
          },
          "usage_start_time": {
            "type": "string",
            "format": "date-time",
            "title": "Usage Start Time",
            "default": "9999-12-31T23:59:59.999999Z"
          },
          "user_id": { "type": "string", "title": "User Id" },
          "user_email": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "User Email"
          },
          "reason": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Reason"
          },
          "admin_email": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Admin Email"
          },
          "extra_data": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Extra Data"
          }
        },
        "type": "object",
        "required": ["user_id"],
        "title": "UserTransaction"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": { "anyOf": [{ "type": "string" }, { "type": "integer" }] },
            "type": "array",
            "title": "Location"
          },
          "msg": { "type": "string", "title": "Message" },
          "type": { "type": "string", "title": "Error Type" }
        },
        "type": "object",
        "required": ["loc", "msg", "type"],
        "title": "ValidationError"
      },
      "Webhook": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "user_id": { "type": "string", "title": "User Id" },
          "provider": { "$ref": "#/components/schemas/ProviderName" },
          "credentials_id": { "type": "string", "title": "Credentials Id" },
          "webhook_type": { "type": "string", "title": "Webhook Type" },
          "resource": { "type": "string", "title": "Resource" },
          "events": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Events"
          },
          "config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Config"
          },
          "secret": { "type": "string", "title": "Secret" },
          "provider_webhook_id": {
            "type": "string",
            "title": "Provider Webhook Id"
          },
          "url": { "type": "string", "title": "Url", "readOnly": true }
        },
        "type": "object",
        "required": [
          "user_id",
          "provider",
          "credentials_id",
          "webhook_type",
          "resource",
          "events",
          "secret",
          "provider_webhook_id",
          "url"
        ],
        "title": "Webhook"
      }
    },
    "securitySchemes": {
      "APIKeyHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Postmark-Webhook-Token"
      }
    }
  }
}
