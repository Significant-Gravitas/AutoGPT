/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * AutoGPT Agent Server
 * This server is used to execute agents that are created by the AutoGPT system.
 * OpenAPI spec version: 0.1
 */
import { z as zod } from "zod";

/**
 * @summary List user graphs
 */
export const getV1ListUserGraphsResponseVersionDefault = 1;
export const getV1ListUserGraphsResponseIsActiveDefault = true;
export const getV1ListUserGraphsResponseNodesItemInputDefaultDefault = {};
export const getV1ListUserGraphsResponseNodesItemMetadataDefault = {};
export const getV1ListUserGraphsResponseNodesItemInputLinksItemIsStaticDefault = false;
export const getV1ListUserGraphsResponseNodesItemInputLinksDefault = [];
export const getV1ListUserGraphsResponseNodesItemOutputLinksItemIsStaticDefault = false;
export const getV1ListUserGraphsResponseNodesItemOutputLinksDefault = [];
export const getV1ListUserGraphsResponseNodesDefault = [];
export const getV1ListUserGraphsResponseLinksItemIsStaticDefault = false;
export const getV1ListUserGraphsResponseLinksDefault = [];
export const getV1ListUserGraphsResponseSubGraphsItemVersionDefault = 1;
export const getV1ListUserGraphsResponseSubGraphsItemIsActiveDefault = true;
export const getV1ListUserGraphsResponseSubGraphsItemNodesItemInputDefaultDefault =
  {};
export const getV1ListUserGraphsResponseSubGraphsItemNodesItemMetadataDefault =
  {};
export const getV1ListUserGraphsResponseSubGraphsItemNodesItemInputLinksItemIsStaticDefault = false;
export const getV1ListUserGraphsResponseSubGraphsItemNodesItemInputLinksDefault =
  [];
export const getV1ListUserGraphsResponseSubGraphsItemNodesItemOutputLinksItemIsStaticDefault = false;
export const getV1ListUserGraphsResponseSubGraphsItemNodesItemOutputLinksDefault =
  [];
export const getV1ListUserGraphsResponseSubGraphsItemNodesDefault = [];
export const getV1ListUserGraphsResponseSubGraphsItemLinksItemIsStaticDefault = false;
export const getV1ListUserGraphsResponseSubGraphsItemLinksDefault = [];
export const getV1ListUserGraphsResponseSubGraphsDefault = [];

export const getV1ListUserGraphsResponseItem = zod.object({
  id: zod.string().optional(),
  version: zod.number().default(getV1ListUserGraphsResponseVersionDefault),
  is_active: zod.boolean().default(getV1ListUserGraphsResponseIsActiveDefault),
  name: zod.string(),
  description: zod.string(),
  nodes: zod
    .array(
      zod.object({
        id: zod.string().optional(),
        block_id: zod.string(),
        input_default: zod
          .record(zod.string(), zod.any())
          .default(getV1ListUserGraphsResponseNodesItemInputDefaultDefault),
        metadata: zod
          .record(zod.string(), zod.any())
          .default(getV1ListUserGraphsResponseNodesItemMetadataDefault),
        input_links: zod
          .array(
            zod.object({
              id: zod.string().optional(),
              source_id: zod.string(),
              sink_id: zod.string(),
              source_name: zod.string(),
              sink_name: zod.string(),
              is_static: zod.boolean().optional(),
            }),
          )
          .default(getV1ListUserGraphsResponseNodesItemInputLinksDefault),
        output_links: zod
          .array(
            zod.object({
              id: zod.string().optional(),
              source_id: zod.string(),
              sink_id: zod.string(),
              source_name: zod.string(),
              sink_name: zod.string(),
              is_static: zod.boolean().optional(),
            }),
          )
          .default(getV1ListUserGraphsResponseNodesItemOutputLinksDefault),
        graph_id: zod.string(),
        graph_version: zod.number(),
        webhook_id: zod.string().or(zod.null()).optional(),
        webhook: zod
          .object({
            id: zod.string().optional(),
            user_id: zod.string(),
            provider: zod.enum([
              "aiml_api",
              "anthropic",
              "apollo",
              "compass",
              "discord",
              "d_id",
              "e2b",
              "exa",
              "fal",
              "generic_webhook",
              "github",
              "google",
              "google_maps",
              "groq",
              "http",
              "hubspot",
              "ideogram",
              "jina",
              "linear",
              "llama_api",
              "medium",
              "mem0",
              "notion",
              "nvidia",
              "ollama",
              "openai",
              "openweathermap",
              "open_router",
              "pinecone",
              "reddit",
              "replicate",
              "revid",
              "screenshotone",
              "slant3d",
              "smartlead",
              "smtp",
              "twitter",
              "todoist",
              "unreal_speech",
              "zerobounce",
            ]),
            credentials_id: zod.string(),
            webhook_type: zod.string(),
            resource: zod.string(),
            events: zod.array(zod.string()),
            config: zod.record(zod.string(), zod.any()).optional(),
            secret: zod.string(),
            provider_webhook_id: zod.string(),
            url: zod.string(),
          })
          .or(zod.null())
          .optional(),
      }),
    )
    .default(getV1ListUserGraphsResponseNodesDefault),
  links: zod
    .array(
      zod.object({
        id: zod.string().optional(),
        source_id: zod.string(),
        sink_id: zod.string(),
        source_name: zod.string(),
        sink_name: zod.string(),
        is_static: zod.boolean().optional(),
      }),
    )
    .default(getV1ListUserGraphsResponseLinksDefault),
  forked_from_id: zod.string().or(zod.null()).optional(),
  forked_from_version: zod.number().or(zod.null()).optional(),
  sub_graphs: zod
    .array(
      zod.object({
        id: zod.string().optional(),
        version: zod
          .number()
          .default(getV1ListUserGraphsResponseSubGraphsItemVersionDefault),
        is_active: zod
          .boolean()
          .default(getV1ListUserGraphsResponseSubGraphsItemIsActiveDefault),
        name: zod.string(),
        description: zod.string(),
        nodes: zod
          .array(
            zod.object({
              id: zod.string().optional(),
              block_id: zod.string(),
              input_default: zod
                .record(zod.string(), zod.any())
                .default(
                  getV1ListUserGraphsResponseSubGraphsItemNodesItemInputDefaultDefault,
                ),
              metadata: zod
                .record(zod.string(), zod.any())
                .default(
                  getV1ListUserGraphsResponseSubGraphsItemNodesItemMetadataDefault,
                ),
              input_links: zod
                .array(
                  zod.object({
                    id: zod.string().optional(),
                    source_id: zod.string(),
                    sink_id: zod.string(),
                    source_name: zod.string(),
                    sink_name: zod.string(),
                    is_static: zod.boolean().optional(),
                  }),
                )
                .default(
                  getV1ListUserGraphsResponseSubGraphsItemNodesItemInputLinksDefault,
                ),
              output_links: zod
                .array(
                  zod.object({
                    id: zod.string().optional(),
                    source_id: zod.string(),
                    sink_id: zod.string(),
                    source_name: zod.string(),
                    sink_name: zod.string(),
                    is_static: zod.boolean().optional(),
                  }),
                )
                .default(
                  getV1ListUserGraphsResponseSubGraphsItemNodesItemOutputLinksDefault,
                ),
            }),
          )
          .default(getV1ListUserGraphsResponseSubGraphsItemNodesDefault),
        links: zod
          .array(
            zod.object({
              id: zod.string().optional(),
              source_id: zod.string(),
              sink_id: zod.string(),
              source_name: zod.string(),
              sink_name: zod.string(),
              is_static: zod.boolean().optional(),
            }),
          )
          .default(getV1ListUserGraphsResponseSubGraphsItemLinksDefault),
        forked_from_id: zod.string().or(zod.null()).optional(),
        forked_from_version: zod.number().or(zod.null()).optional(),
        input_schema: zod.record(zod.string(), zod.any()),
        output_schema: zod.record(zod.string(), zod.any()),
      }),
    )
    .default(getV1ListUserGraphsResponseSubGraphsDefault),
  user_id: zod.string(),
  input_schema: zod.record(zod.string(), zod.any()),
  output_schema: zod.record(zod.string(), zod.any()),
  credentials_input_schema: zod.record(zod.string(), zod.any()),
  has_webhook_trigger: zod.boolean(),
});
export const getV1ListUserGraphsResponse = zod.array(
  getV1ListUserGraphsResponseItem,
);

/**
 * @summary Create new graph
 */
export const postV1CreateNewGraphBodyGraphVersionDefault = 1;
export const postV1CreateNewGraphBodyGraphIsActiveDefault = true;
export const postV1CreateNewGraphBodyGraphNodesItemInputDefaultDefault = {};
export const postV1CreateNewGraphBodyGraphNodesItemMetadataDefault = {};
export const postV1CreateNewGraphBodyGraphNodesItemInputLinksItemIsStaticDefault = false;
export const postV1CreateNewGraphBodyGraphNodesItemInputLinksDefault = [];
export const postV1CreateNewGraphBodyGraphNodesItemOutputLinksItemIsStaticDefault = false;
export const postV1CreateNewGraphBodyGraphNodesItemOutputLinksDefault = [];
export const postV1CreateNewGraphBodyGraphNodesDefault = [];
export const postV1CreateNewGraphBodyGraphLinksItemIsStaticDefault = false;
export const postV1CreateNewGraphBodyGraphLinksDefault = [];
export const postV1CreateNewGraphBodyGraphSubGraphsItemVersionDefault = 1;
export const postV1CreateNewGraphBodyGraphSubGraphsItemIsActiveDefault = true;
export const postV1CreateNewGraphBodyGraphSubGraphsItemNodesItemInputDefaultDefault =
  {};
export const postV1CreateNewGraphBodyGraphSubGraphsItemNodesItemMetadataDefault =
  {};
export const postV1CreateNewGraphBodyGraphSubGraphsItemNodesItemInputLinksItemIsStaticDefault = false;
export const postV1CreateNewGraphBodyGraphSubGraphsItemNodesItemInputLinksDefault =
  [];
export const postV1CreateNewGraphBodyGraphSubGraphsItemNodesItemOutputLinksItemIsStaticDefault = false;
export const postV1CreateNewGraphBodyGraphSubGraphsItemNodesItemOutputLinksDefault =
  [];
export const postV1CreateNewGraphBodyGraphSubGraphsItemNodesDefault = [];
export const postV1CreateNewGraphBodyGraphSubGraphsItemLinksItemIsStaticDefault = false;
export const postV1CreateNewGraphBodyGraphSubGraphsItemLinksDefault = [];
export const postV1CreateNewGraphBodyGraphSubGraphsDefault = [];

export const postV1CreateNewGraphBody = zod.object({
  graph: zod.object({
    id: zod.string().optional(),
    version: zod.number().default(postV1CreateNewGraphBodyGraphVersionDefault),
    is_active: zod
      .boolean()
      .default(postV1CreateNewGraphBodyGraphIsActiveDefault),
    name: zod.string(),
    description: zod.string(),
    nodes: zod
      .array(
        zod.object({
          id: zod.string().optional(),
          block_id: zod.string(),
          input_default: zod
            .record(zod.string(), zod.any())
            .default(postV1CreateNewGraphBodyGraphNodesItemInputDefaultDefault),
          metadata: zod
            .record(zod.string(), zod.any())
            .default(postV1CreateNewGraphBodyGraphNodesItemMetadataDefault),
          input_links: zod
            .array(
              zod.object({
                id: zod.string().optional(),
                source_id: zod.string(),
                sink_id: zod.string(),
                source_name: zod.string(),
                sink_name: zod.string(),
                is_static: zod.boolean().optional(),
              }),
            )
            .default(postV1CreateNewGraphBodyGraphNodesItemInputLinksDefault),
          output_links: zod
            .array(
              zod.object({
                id: zod.string().optional(),
                source_id: zod.string(),
                sink_id: zod.string(),
                source_name: zod.string(),
                sink_name: zod.string(),
                is_static: zod.boolean().optional(),
              }),
            )
            .default(postV1CreateNewGraphBodyGraphNodesItemOutputLinksDefault),
        }),
      )
      .default(postV1CreateNewGraphBodyGraphNodesDefault),
    links: zod
      .array(
        zod.object({
          id: zod.string().optional(),
          source_id: zod.string(),
          sink_id: zod.string(),
          source_name: zod.string(),
          sink_name: zod.string(),
          is_static: zod.boolean().optional(),
        }),
      )
      .default(postV1CreateNewGraphBodyGraphLinksDefault),
    forked_from_id: zod.string().or(zod.null()).optional(),
    forked_from_version: zod.number().or(zod.null()).optional(),
    sub_graphs: zod
      .array(
        zod.object({
          id: zod.string().optional(),
          version: zod
            .number()
            .default(postV1CreateNewGraphBodyGraphSubGraphsItemVersionDefault),
          is_active: zod
            .boolean()
            .default(postV1CreateNewGraphBodyGraphSubGraphsItemIsActiveDefault),
          name: zod.string(),
          description: zod.string(),
          nodes: zod
            .array(
              zod.object({
                id: zod.string().optional(),
                block_id: zod.string(),
                input_default: zod
                  .record(zod.string(), zod.any())
                  .default(
                    postV1CreateNewGraphBodyGraphSubGraphsItemNodesItemInputDefaultDefault,
                  ),
                metadata: zod
                  .record(zod.string(), zod.any())
                  .default(
                    postV1CreateNewGraphBodyGraphSubGraphsItemNodesItemMetadataDefault,
                  ),
                input_links: zod
                  .array(
                    zod.object({
                      id: zod.string().optional(),
                      source_id: zod.string(),
                      sink_id: zod.string(),
                      source_name: zod.string(),
                      sink_name: zod.string(),
                      is_static: zod.boolean().optional(),
                    }),
                  )
                  .default(
                    postV1CreateNewGraphBodyGraphSubGraphsItemNodesItemInputLinksDefault,
                  ),
                output_links: zod
                  .array(
                    zod.object({
                      id: zod.string().optional(),
                      source_id: zod.string(),
                      sink_id: zod.string(),
                      source_name: zod.string(),
                      sink_name: zod.string(),
                      is_static: zod.boolean().optional(),
                    }),
                  )
                  .default(
                    postV1CreateNewGraphBodyGraphSubGraphsItemNodesItemOutputLinksDefault,
                  ),
              }),
            )
            .default(postV1CreateNewGraphBodyGraphSubGraphsItemNodesDefault),
          links: zod
            .array(
              zod.object({
                id: zod.string().optional(),
                source_id: zod.string(),
                sink_id: zod.string(),
                source_name: zod.string(),
                sink_name: zod.string(),
                is_static: zod.boolean().optional(),
              }),
            )
            .default(postV1CreateNewGraphBodyGraphSubGraphsItemLinksDefault),
          forked_from_id: zod.string().or(zod.null()).optional(),
          forked_from_version: zod.number().or(zod.null()).optional(),
        }),
      )
      .default(postV1CreateNewGraphBodyGraphSubGraphsDefault),
  }),
});

export const postV1CreateNewGraphResponseVersionDefault = 1;
export const postV1CreateNewGraphResponseIsActiveDefault = true;
export const postV1CreateNewGraphResponseNodesItemInputDefaultDefault = {};
export const postV1CreateNewGraphResponseNodesItemMetadataDefault = {};
export const postV1CreateNewGraphResponseNodesItemInputLinksItemIsStaticDefault = false;
export const postV1CreateNewGraphResponseNodesItemInputLinksDefault = [];
export const postV1CreateNewGraphResponseNodesItemOutputLinksItemIsStaticDefault = false;
export const postV1CreateNewGraphResponseNodesItemOutputLinksDefault = [];
export const postV1CreateNewGraphResponseNodesDefault = [];
export const postV1CreateNewGraphResponseLinksItemIsStaticDefault = false;
export const postV1CreateNewGraphResponseLinksDefault = [];
export const postV1CreateNewGraphResponseSubGraphsItemVersionDefault = 1;
export const postV1CreateNewGraphResponseSubGraphsItemIsActiveDefault = true;
export const postV1CreateNewGraphResponseSubGraphsItemNodesItemInputDefaultDefault =
  {};
export const postV1CreateNewGraphResponseSubGraphsItemNodesItemMetadataDefault =
  {};
export const postV1CreateNewGraphResponseSubGraphsItemNodesItemInputLinksItemIsStaticDefault = false;
export const postV1CreateNewGraphResponseSubGraphsItemNodesItemInputLinksDefault =
  [];
export const postV1CreateNewGraphResponseSubGraphsItemNodesItemOutputLinksItemIsStaticDefault = false;
export const postV1CreateNewGraphResponseSubGraphsItemNodesItemOutputLinksDefault =
  [];
export const postV1CreateNewGraphResponseSubGraphsItemNodesDefault = [];
export const postV1CreateNewGraphResponseSubGraphsItemLinksItemIsStaticDefault = false;
export const postV1CreateNewGraphResponseSubGraphsItemLinksDefault = [];
export const postV1CreateNewGraphResponseSubGraphsDefault = [];

export const postV1CreateNewGraphResponse = zod.object({
  id: zod.string().optional(),
  version: zod.number().default(postV1CreateNewGraphResponseVersionDefault),
  is_active: zod.boolean().default(postV1CreateNewGraphResponseIsActiveDefault),
  name: zod.string(),
  description: zod.string(),
  nodes: zod
    .array(
      zod.object({
        id: zod.string().optional(),
        block_id: zod.string(),
        input_default: zod
          .record(zod.string(), zod.any())
          .default(postV1CreateNewGraphResponseNodesItemInputDefaultDefault),
        metadata: zod
          .record(zod.string(), zod.any())
          .default(postV1CreateNewGraphResponseNodesItemMetadataDefault),
        input_links: zod
          .array(
            zod.object({
              id: zod.string().optional(),
              source_id: zod.string(),
              sink_id: zod.string(),
              source_name: zod.string(),
              sink_name: zod.string(),
              is_static: zod.boolean().optional(),
            }),
          )
          .default(postV1CreateNewGraphResponseNodesItemInputLinksDefault),
        output_links: zod
          .array(
            zod.object({
              id: zod.string().optional(),
              source_id: zod.string(),
              sink_id: zod.string(),
              source_name: zod.string(),
              sink_name: zod.string(),
              is_static: zod.boolean().optional(),
            }),
          )
          .default(postV1CreateNewGraphResponseNodesItemOutputLinksDefault),
        graph_id: zod.string(),
        graph_version: zod.number(),
        webhook_id: zod.string().or(zod.null()).optional(),
        webhook: zod
          .object({
            id: zod.string().optional(),
            user_id: zod.string(),
            provider: zod.enum([
              "aiml_api",
              "anthropic",
              "apollo",
              "compass",
              "discord",
              "d_id",
              "e2b",
              "exa",
              "fal",
              "generic_webhook",
              "github",
              "google",
              "google_maps",
              "groq",
              "http",
              "hubspot",
              "ideogram",
              "jina",
              "linear",
              "llama_api",
              "medium",
              "mem0",
              "notion",
              "nvidia",
              "ollama",
              "openai",
              "openweathermap",
              "open_router",
              "pinecone",
              "reddit",
              "replicate",
              "revid",
              "screenshotone",
              "slant3d",
              "smartlead",
              "smtp",
              "twitter",
              "todoist",
              "unreal_speech",
              "zerobounce",
            ]),
            credentials_id: zod.string(),
            webhook_type: zod.string(),
            resource: zod.string(),
            events: zod.array(zod.string()),
            config: zod.record(zod.string(), zod.any()).optional(),
            secret: zod.string(),
            provider_webhook_id: zod.string(),
            url: zod.string(),
          })
          .or(zod.null())
          .optional(),
      }),
    )
    .default(postV1CreateNewGraphResponseNodesDefault),
  links: zod
    .array(
      zod.object({
        id: zod.string().optional(),
        source_id: zod.string(),
        sink_id: zod.string(),
        source_name: zod.string(),
        sink_name: zod.string(),
        is_static: zod.boolean().optional(),
      }),
    )
    .default(postV1CreateNewGraphResponseLinksDefault),
  forked_from_id: zod.string().or(zod.null()).optional(),
  forked_from_version: zod.number().or(zod.null()).optional(),
  sub_graphs: zod
    .array(
      zod.object({
        id: zod.string().optional(),
        version: zod
          .number()
          .default(postV1CreateNewGraphResponseSubGraphsItemVersionDefault),
        is_active: zod
          .boolean()
          .default(postV1CreateNewGraphResponseSubGraphsItemIsActiveDefault),
        name: zod.string(),
        description: zod.string(),
        nodes: zod
          .array(
            zod.object({
              id: zod.string().optional(),
              block_id: zod.string(),
              input_default: zod
                .record(zod.string(), zod.any())
                .default(
                  postV1CreateNewGraphResponseSubGraphsItemNodesItemInputDefaultDefault,
                ),
              metadata: zod
                .record(zod.string(), zod.any())
                .default(
                  postV1CreateNewGraphResponseSubGraphsItemNodesItemMetadataDefault,
                ),
              input_links: zod
                .array(
                  zod.object({
                    id: zod.string().optional(),
                    source_id: zod.string(),
                    sink_id: zod.string(),
                    source_name: zod.string(),
                    sink_name: zod.string(),
                    is_static: zod.boolean().optional(),
                  }),
                )
                .default(
                  postV1CreateNewGraphResponseSubGraphsItemNodesItemInputLinksDefault,
                ),
              output_links: zod
                .array(
                  zod.object({
                    id: zod.string().optional(),
                    source_id: zod.string(),
                    sink_id: zod.string(),
                    source_name: zod.string(),
                    sink_name: zod.string(),
                    is_static: zod.boolean().optional(),
                  }),
                )
                .default(
                  postV1CreateNewGraphResponseSubGraphsItemNodesItemOutputLinksDefault,
                ),
            }),
          )
          .default(postV1CreateNewGraphResponseSubGraphsItemNodesDefault),
        links: zod
          .array(
            zod.object({
              id: zod.string().optional(),
              source_id: zod.string(),
              sink_id: zod.string(),
              source_name: zod.string(),
              sink_name: zod.string(),
              is_static: zod.boolean().optional(),
            }),
          )
          .default(postV1CreateNewGraphResponseSubGraphsItemLinksDefault),
        forked_from_id: zod.string().or(zod.null()).optional(),
        forked_from_version: zod.number().or(zod.null()).optional(),
        input_schema: zod.record(zod.string(), zod.any()),
        output_schema: zod.record(zod.string(), zod.any()),
      }),
    )
    .default(postV1CreateNewGraphResponseSubGraphsDefault),
  user_id: zod.string(),
  input_schema: zod.record(zod.string(), zod.any()),
  output_schema: zod.record(zod.string(), zod.any()),
  credentials_input_schema: zod.record(zod.string(), zod.any()),
  has_webhook_trigger: zod.boolean(),
});

/**
 * @summary Get graph version
 */
export const getV1GetGraphVersionParams = zod.object({
  graph_id: zod.string(),
  version: zod.number().or(zod.null()),
});

export const getV1GetGraphVersionQueryForExportDefault = false;

export const getV1GetGraphVersionQueryParams = zod.object({
  for_export: zod.boolean().optional(),
});

export const getV1GetGraphVersionResponseVersionDefault = 1;
export const getV1GetGraphVersionResponseIsActiveDefault = true;
export const getV1GetGraphVersionResponseNodesItemInputDefaultDefault = {};
export const getV1GetGraphVersionResponseNodesItemMetadataDefault = {};
export const getV1GetGraphVersionResponseNodesItemInputLinksItemIsStaticDefault = false;
export const getV1GetGraphVersionResponseNodesItemInputLinksDefault = [];
export const getV1GetGraphVersionResponseNodesItemOutputLinksItemIsStaticDefault = false;
export const getV1GetGraphVersionResponseNodesItemOutputLinksDefault = [];
export const getV1GetGraphVersionResponseNodesDefault = [];
export const getV1GetGraphVersionResponseLinksItemIsStaticDefault = false;
export const getV1GetGraphVersionResponseLinksDefault = [];
export const getV1GetGraphVersionResponseSubGraphsItemVersionDefault = 1;
export const getV1GetGraphVersionResponseSubGraphsItemIsActiveDefault = true;
export const getV1GetGraphVersionResponseSubGraphsItemNodesItemInputDefaultDefault =
  {};
export const getV1GetGraphVersionResponseSubGraphsItemNodesItemMetadataDefault =
  {};
export const getV1GetGraphVersionResponseSubGraphsItemNodesItemInputLinksItemIsStaticDefault = false;
export const getV1GetGraphVersionResponseSubGraphsItemNodesItemInputLinksDefault =
  [];
export const getV1GetGraphVersionResponseSubGraphsItemNodesItemOutputLinksItemIsStaticDefault = false;
export const getV1GetGraphVersionResponseSubGraphsItemNodesItemOutputLinksDefault =
  [];
export const getV1GetGraphVersionResponseSubGraphsItemNodesDefault = [];
export const getV1GetGraphVersionResponseSubGraphsItemLinksItemIsStaticDefault = false;
export const getV1GetGraphVersionResponseSubGraphsItemLinksDefault = [];
export const getV1GetGraphVersionResponseSubGraphsDefault = [];

export const getV1GetGraphVersionResponse = zod.object({
  id: zod.string().optional(),
  version: zod.number().default(getV1GetGraphVersionResponseVersionDefault),
  is_active: zod.boolean().default(getV1GetGraphVersionResponseIsActiveDefault),
  name: zod.string(),
  description: zod.string(),
  nodes: zod
    .array(
      zod.object({
        id: zod.string().optional(),
        block_id: zod.string(),
        input_default: zod
          .record(zod.string(), zod.any())
          .default(getV1GetGraphVersionResponseNodesItemInputDefaultDefault),
        metadata: zod
          .record(zod.string(), zod.any())
          .default(getV1GetGraphVersionResponseNodesItemMetadataDefault),
        input_links: zod
          .array(
            zod.object({
              id: zod.string().optional(),
              source_id: zod.string(),
              sink_id: zod.string(),
              source_name: zod.string(),
              sink_name: zod.string(),
              is_static: zod.boolean().optional(),
            }),
          )
          .default(getV1GetGraphVersionResponseNodesItemInputLinksDefault),
        output_links: zod
          .array(
            zod.object({
              id: zod.string().optional(),
              source_id: zod.string(),
              sink_id: zod.string(),
              source_name: zod.string(),
              sink_name: zod.string(),
              is_static: zod.boolean().optional(),
            }),
          )
          .default(getV1GetGraphVersionResponseNodesItemOutputLinksDefault),
        graph_id: zod.string(),
        graph_version: zod.number(),
        webhook_id: zod.string().or(zod.null()).optional(),
        webhook: zod
          .object({
            id: zod.string().optional(),
            user_id: zod.string(),
            provider: zod.enum([
              "aiml_api",
              "anthropic",
              "apollo",
              "compass",
              "discord",
              "d_id",
              "e2b",
              "exa",
              "fal",
              "generic_webhook",
              "github",
              "google",
              "google_maps",
              "groq",
              "http",
              "hubspot",
              "ideogram",
              "jina",
              "linear",
              "llama_api",
              "medium",
              "mem0",
              "notion",
              "nvidia",
              "ollama",
              "openai",
              "openweathermap",
              "open_router",
              "pinecone",
              "reddit",
              "replicate",
              "revid",
              "screenshotone",
              "slant3d",
              "smartlead",
              "smtp",
              "twitter",
              "todoist",
              "unreal_speech",
              "zerobounce",
            ]),
            credentials_id: zod.string(),
            webhook_type: zod.string(),
            resource: zod.string(),
            events: zod.array(zod.string()),
            config: zod.record(zod.string(), zod.any()).optional(),
            secret: zod.string(),
            provider_webhook_id: zod.string(),
            url: zod.string(),
          })
          .or(zod.null())
          .optional(),
      }),
    )
    .default(getV1GetGraphVersionResponseNodesDefault),
  links: zod
    .array(
      zod.object({
        id: zod.string().optional(),
        source_id: zod.string(),
        sink_id: zod.string(),
        source_name: zod.string(),
        sink_name: zod.string(),
        is_static: zod.boolean().optional(),
      }),
    )
    .default(getV1GetGraphVersionResponseLinksDefault),
  forked_from_id: zod.string().or(zod.null()).optional(),
  forked_from_version: zod.number().or(zod.null()).optional(),
  sub_graphs: zod
    .array(
      zod.object({
        id: zod.string().optional(),
        version: zod
          .number()
          .default(getV1GetGraphVersionResponseSubGraphsItemVersionDefault),
        is_active: zod
          .boolean()
          .default(getV1GetGraphVersionResponseSubGraphsItemIsActiveDefault),
        name: zod.string(),
        description: zod.string(),
        nodes: zod
          .array(
            zod.object({
              id: zod.string().optional(),
              block_id: zod.string(),
              input_default: zod
                .record(zod.string(), zod.any())
                .default(
                  getV1GetGraphVersionResponseSubGraphsItemNodesItemInputDefaultDefault,
                ),
              metadata: zod
                .record(zod.string(), zod.any())
                .default(
                  getV1GetGraphVersionResponseSubGraphsItemNodesItemMetadataDefault,
                ),
              input_links: zod
                .array(
                  zod.object({
                    id: zod.string().optional(),
                    source_id: zod.string(),
                    sink_id: zod.string(),
                    source_name: zod.string(),
                    sink_name: zod.string(),
                    is_static: zod.boolean().optional(),
                  }),
                )
                .default(
                  getV1GetGraphVersionResponseSubGraphsItemNodesItemInputLinksDefault,
                ),
              output_links: zod
                .array(
                  zod.object({
                    id: zod.string().optional(),
                    source_id: zod.string(),
                    sink_id: zod.string(),
                    source_name: zod.string(),
                    sink_name: zod.string(),
                    is_static: zod.boolean().optional(),
                  }),
                )
                .default(
                  getV1GetGraphVersionResponseSubGraphsItemNodesItemOutputLinksDefault,
                ),
            }),
          )
          .default(getV1GetGraphVersionResponseSubGraphsItemNodesDefault),
        links: zod
          .array(
            zod.object({
              id: zod.string().optional(),
              source_id: zod.string(),
              sink_id: zod.string(),
              source_name: zod.string(),
              sink_name: zod.string(),
              is_static: zod.boolean().optional(),
            }),
          )
          .default(getV1GetGraphVersionResponseSubGraphsItemLinksDefault),
        forked_from_id: zod.string().or(zod.null()).optional(),
        forked_from_version: zod.number().or(zod.null()).optional(),
        input_schema: zod.record(zod.string(), zod.any()),
        output_schema: zod.record(zod.string(), zod.any()),
      }),
    )
    .default(getV1GetGraphVersionResponseSubGraphsDefault),
  user_id: zod.string(),
  input_schema: zod.record(zod.string(), zod.any()),
  output_schema: zod.record(zod.string(), zod.any()),
  credentials_input_schema: zod.record(zod.string(), zod.any()),
  has_webhook_trigger: zod.boolean(),
});

/**
 * @summary Get specific graph
 */
export const getV1GetSpecificGraphParams = zod.object({
  graph_id: zod.string(),
});

export const getV1GetSpecificGraphQueryForExportDefault = false;

export const getV1GetSpecificGraphQueryParams = zod.object({
  version: zod.number().or(zod.null()).optional(),
  for_export: zod.boolean().optional(),
});

export const getV1GetSpecificGraphResponseVersionDefault = 1;
export const getV1GetSpecificGraphResponseIsActiveDefault = true;
export const getV1GetSpecificGraphResponseNodesItemInputDefaultDefault = {};
export const getV1GetSpecificGraphResponseNodesItemMetadataDefault = {};
export const getV1GetSpecificGraphResponseNodesItemInputLinksItemIsStaticDefault = false;
export const getV1GetSpecificGraphResponseNodesItemInputLinksDefault = [];
export const getV1GetSpecificGraphResponseNodesItemOutputLinksItemIsStaticDefault = false;
export const getV1GetSpecificGraphResponseNodesItemOutputLinksDefault = [];
export const getV1GetSpecificGraphResponseNodesDefault = [];
export const getV1GetSpecificGraphResponseLinksItemIsStaticDefault = false;
export const getV1GetSpecificGraphResponseLinksDefault = [];
export const getV1GetSpecificGraphResponseSubGraphsItemVersionDefault = 1;
export const getV1GetSpecificGraphResponseSubGraphsItemIsActiveDefault = true;
export const getV1GetSpecificGraphResponseSubGraphsItemNodesItemInputDefaultDefault =
  {};
export const getV1GetSpecificGraphResponseSubGraphsItemNodesItemMetadataDefault =
  {};
export const getV1GetSpecificGraphResponseSubGraphsItemNodesItemInputLinksItemIsStaticDefault = false;
export const getV1GetSpecificGraphResponseSubGraphsItemNodesItemInputLinksDefault =
  [];
export const getV1GetSpecificGraphResponseSubGraphsItemNodesItemOutputLinksItemIsStaticDefault = false;
export const getV1GetSpecificGraphResponseSubGraphsItemNodesItemOutputLinksDefault =
  [];
export const getV1GetSpecificGraphResponseSubGraphsItemNodesDefault = [];
export const getV1GetSpecificGraphResponseSubGraphsItemLinksItemIsStaticDefault = false;
export const getV1GetSpecificGraphResponseSubGraphsItemLinksDefault = [];
export const getV1GetSpecificGraphResponseSubGraphsDefault = [];

export const getV1GetSpecificGraphResponse = zod.object({
  id: zod.string().optional(),
  version: zod.number().default(getV1GetSpecificGraphResponseVersionDefault),
  is_active: zod
    .boolean()
    .default(getV1GetSpecificGraphResponseIsActiveDefault),
  name: zod.string(),
  description: zod.string(),
  nodes: zod
    .array(
      zod.object({
        id: zod.string().optional(),
        block_id: zod.string(),
        input_default: zod
          .record(zod.string(), zod.any())
          .default(getV1GetSpecificGraphResponseNodesItemInputDefaultDefault),
        metadata: zod
          .record(zod.string(), zod.any())
          .default(getV1GetSpecificGraphResponseNodesItemMetadataDefault),
        input_links: zod
          .array(
            zod.object({
              id: zod.string().optional(),
              source_id: zod.string(),
              sink_id: zod.string(),
              source_name: zod.string(),
              sink_name: zod.string(),
              is_static: zod.boolean().optional(),
            }),
          )
          .default(getV1GetSpecificGraphResponseNodesItemInputLinksDefault),
        output_links: zod
          .array(
            zod.object({
              id: zod.string().optional(),
              source_id: zod.string(),
              sink_id: zod.string(),
              source_name: zod.string(),
              sink_name: zod.string(),
              is_static: zod.boolean().optional(),
            }),
          )
          .default(getV1GetSpecificGraphResponseNodesItemOutputLinksDefault),
        graph_id: zod.string(),
        graph_version: zod.number(),
        webhook_id: zod.string().or(zod.null()).optional(),
        webhook: zod
          .object({
            id: zod.string().optional(),
            user_id: zod.string(),
            provider: zod.enum([
              "aiml_api",
              "anthropic",
              "apollo",
              "compass",
              "discord",
              "d_id",
              "e2b",
              "exa",
              "fal",
              "generic_webhook",
              "github",
              "google",
              "google_maps",
              "groq",
              "http",
              "hubspot",
              "ideogram",
              "jina",
              "linear",
              "llama_api",
              "medium",
              "mem0",
              "notion",
              "nvidia",
              "ollama",
              "openai",
              "openweathermap",
              "open_router",
              "pinecone",
              "reddit",
              "replicate",
              "revid",
              "screenshotone",
              "slant3d",
              "smartlead",
              "smtp",
              "twitter",
              "todoist",
              "unreal_speech",
              "zerobounce",
            ]),
            credentials_id: zod.string(),
            webhook_type: zod.string(),
            resource: zod.string(),
            events: zod.array(zod.string()),
            config: zod.record(zod.string(), zod.any()).optional(),
            secret: zod.string(),
            provider_webhook_id: zod.string(),
            url: zod.string(),
          })
          .or(zod.null())
          .optional(),
      }),
    )
    .default(getV1GetSpecificGraphResponseNodesDefault),
  links: zod
    .array(
      zod.object({
        id: zod.string().optional(),
        source_id: zod.string(),
        sink_id: zod.string(),
        source_name: zod.string(),
        sink_name: zod.string(),
        is_static: zod.boolean().optional(),
      }),
    )
    .default(getV1GetSpecificGraphResponseLinksDefault),
  forked_from_id: zod.string().or(zod.null()).optional(),
  forked_from_version: zod.number().or(zod.null()).optional(),
  sub_graphs: zod
    .array(
      zod.object({
        id: zod.string().optional(),
        version: zod
          .number()
          .default(getV1GetSpecificGraphResponseSubGraphsItemVersionDefault),
        is_active: zod
          .boolean()
          .default(getV1GetSpecificGraphResponseSubGraphsItemIsActiveDefault),
        name: zod.string(),
        description: zod.string(),
        nodes: zod
          .array(
            zod.object({
              id: zod.string().optional(),
              block_id: zod.string(),
              input_default: zod
                .record(zod.string(), zod.any())
                .default(
                  getV1GetSpecificGraphResponseSubGraphsItemNodesItemInputDefaultDefault,
                ),
              metadata: zod
                .record(zod.string(), zod.any())
                .default(
                  getV1GetSpecificGraphResponseSubGraphsItemNodesItemMetadataDefault,
                ),
              input_links: zod
                .array(
                  zod.object({
                    id: zod.string().optional(),
                    source_id: zod.string(),
                    sink_id: zod.string(),
                    source_name: zod.string(),
                    sink_name: zod.string(),
                    is_static: zod.boolean().optional(),
                  }),
                )
                .default(
                  getV1GetSpecificGraphResponseSubGraphsItemNodesItemInputLinksDefault,
                ),
              output_links: zod
                .array(
                  zod.object({
                    id: zod.string().optional(),
                    source_id: zod.string(),
                    sink_id: zod.string(),
                    source_name: zod.string(),
                    sink_name: zod.string(),
                    is_static: zod.boolean().optional(),
                  }),
                )
                .default(
                  getV1GetSpecificGraphResponseSubGraphsItemNodesItemOutputLinksDefault,
                ),
            }),
          )
          .default(getV1GetSpecificGraphResponseSubGraphsItemNodesDefault),
        links: zod
          .array(
            zod.object({
              id: zod.string().optional(),
              source_id: zod.string(),
              sink_id: zod.string(),
              source_name: zod.string(),
              sink_name: zod.string(),
              is_static: zod.boolean().optional(),
            }),
          )
          .default(getV1GetSpecificGraphResponseSubGraphsItemLinksDefault),
        forked_from_id: zod.string().or(zod.null()).optional(),
        forked_from_version: zod.number().or(zod.null()).optional(),
        input_schema: zod.record(zod.string(), zod.any()),
        output_schema: zod.record(zod.string(), zod.any()),
      }),
    )
    .default(getV1GetSpecificGraphResponseSubGraphsDefault),
  user_id: zod.string(),
  input_schema: zod.record(zod.string(), zod.any()),
  output_schema: zod.record(zod.string(), zod.any()),
  credentials_input_schema: zod.record(zod.string(), zod.any()),
  has_webhook_trigger: zod.boolean(),
});

/**
 * @summary Delete graph permanently
 */
export const deleteV1DeleteGraphPermanentlyParams = zod.object({
  graph_id: zod.string(),
});

export const deleteV1DeleteGraphPermanentlyResponse = zod.object({
  version_counts: zod.number(),
});

/**
 * @summary Update graph version
 */
export const putV1UpdateGraphVersionParams = zod.object({
  graph_id: zod.string(),
});

export const putV1UpdateGraphVersionBodyVersionDefault = 1;
export const putV1UpdateGraphVersionBodyIsActiveDefault = true;
export const putV1UpdateGraphVersionBodyNodesItemInputDefaultDefault = {};
export const putV1UpdateGraphVersionBodyNodesItemMetadataDefault = {};
export const putV1UpdateGraphVersionBodyNodesItemInputLinksItemIsStaticDefault = false;
export const putV1UpdateGraphVersionBodyNodesItemInputLinksDefault = [];
export const putV1UpdateGraphVersionBodyNodesItemOutputLinksItemIsStaticDefault = false;
export const putV1UpdateGraphVersionBodyNodesItemOutputLinksDefault = [];
export const putV1UpdateGraphVersionBodyNodesDefault = [];
export const putV1UpdateGraphVersionBodyLinksItemIsStaticDefault = false;
export const putV1UpdateGraphVersionBodyLinksDefault = [];
export const putV1UpdateGraphVersionBodySubGraphsItemVersionDefault = 1;
export const putV1UpdateGraphVersionBodySubGraphsItemIsActiveDefault = true;
export const putV1UpdateGraphVersionBodySubGraphsItemNodesItemInputDefaultDefault =
  {};
export const putV1UpdateGraphVersionBodySubGraphsItemNodesItemMetadataDefault =
  {};
export const putV1UpdateGraphVersionBodySubGraphsItemNodesItemInputLinksItemIsStaticDefault = false;
export const putV1UpdateGraphVersionBodySubGraphsItemNodesItemInputLinksDefault =
  [];
export const putV1UpdateGraphVersionBodySubGraphsItemNodesItemOutputLinksItemIsStaticDefault = false;
export const putV1UpdateGraphVersionBodySubGraphsItemNodesItemOutputLinksDefault =
  [];
export const putV1UpdateGraphVersionBodySubGraphsItemNodesDefault = [];
export const putV1UpdateGraphVersionBodySubGraphsItemLinksItemIsStaticDefault = false;
export const putV1UpdateGraphVersionBodySubGraphsItemLinksDefault = [];
export const putV1UpdateGraphVersionBodySubGraphsDefault = [];

export const putV1UpdateGraphVersionBody = zod.object({
  id: zod.string().optional(),
  version: zod.number().default(putV1UpdateGraphVersionBodyVersionDefault),
  is_active: zod.boolean().default(putV1UpdateGraphVersionBodyIsActiveDefault),
  name: zod.string(),
  description: zod.string(),
  nodes: zod
    .array(
      zod.object({
        id: zod.string().optional(),
        block_id: zod.string(),
        input_default: zod
          .record(zod.string(), zod.any())
          .default(putV1UpdateGraphVersionBodyNodesItemInputDefaultDefault),
        metadata: zod
          .record(zod.string(), zod.any())
          .default(putV1UpdateGraphVersionBodyNodesItemMetadataDefault),
        input_links: zod
          .array(
            zod.object({
              id: zod.string().optional(),
              source_id: zod.string(),
              sink_id: zod.string(),
              source_name: zod.string(),
              sink_name: zod.string(),
              is_static: zod.boolean().optional(),
            }),
          )
          .default(putV1UpdateGraphVersionBodyNodesItemInputLinksDefault),
        output_links: zod
          .array(
            zod.object({
              id: zod.string().optional(),
              source_id: zod.string(),
              sink_id: zod.string(),
              source_name: zod.string(),
              sink_name: zod.string(),
              is_static: zod.boolean().optional(),
            }),
          )
          .default(putV1UpdateGraphVersionBodyNodesItemOutputLinksDefault),
      }),
    )
    .default(putV1UpdateGraphVersionBodyNodesDefault),
  links: zod
    .array(
      zod.object({
        id: zod.string().optional(),
        source_id: zod.string(),
        sink_id: zod.string(),
        source_name: zod.string(),
        sink_name: zod.string(),
        is_static: zod.boolean().optional(),
      }),
    )
    .default(putV1UpdateGraphVersionBodyLinksDefault),
  forked_from_id: zod.string().or(zod.null()).optional(),
  forked_from_version: zod.number().or(zod.null()).optional(),
  sub_graphs: zod
    .array(
      zod.object({
        id: zod.string().optional(),
        version: zod
          .number()
          .default(putV1UpdateGraphVersionBodySubGraphsItemVersionDefault),
        is_active: zod
          .boolean()
          .default(putV1UpdateGraphVersionBodySubGraphsItemIsActiveDefault),
        name: zod.string(),
        description: zod.string(),
        nodes: zod
          .array(
            zod.object({
              id: zod.string().optional(),
              block_id: zod.string(),
              input_default: zod
                .record(zod.string(), zod.any())
                .default(
                  putV1UpdateGraphVersionBodySubGraphsItemNodesItemInputDefaultDefault,
                ),
              metadata: zod
                .record(zod.string(), zod.any())
                .default(
                  putV1UpdateGraphVersionBodySubGraphsItemNodesItemMetadataDefault,
                ),
              input_links: zod
                .array(
                  zod.object({
                    id: zod.string().optional(),
                    source_id: zod.string(),
                    sink_id: zod.string(),
                    source_name: zod.string(),
                    sink_name: zod.string(),
                    is_static: zod.boolean().optional(),
                  }),
                )
                .default(
                  putV1UpdateGraphVersionBodySubGraphsItemNodesItemInputLinksDefault,
                ),
              output_links: zod
                .array(
                  zod.object({
                    id: zod.string().optional(),
                    source_id: zod.string(),
                    sink_id: zod.string(),
                    source_name: zod.string(),
                    sink_name: zod.string(),
                    is_static: zod.boolean().optional(),
                  }),
                )
                .default(
                  putV1UpdateGraphVersionBodySubGraphsItemNodesItemOutputLinksDefault,
                ),
            }),
          )
          .default(putV1UpdateGraphVersionBodySubGraphsItemNodesDefault),
        links: zod
          .array(
            zod.object({
              id: zod.string().optional(),
              source_id: zod.string(),
              sink_id: zod.string(),
              source_name: zod.string(),
              sink_name: zod.string(),
              is_static: zod.boolean().optional(),
            }),
          )
          .default(putV1UpdateGraphVersionBodySubGraphsItemLinksDefault),
        forked_from_id: zod.string().or(zod.null()).optional(),
        forked_from_version: zod.number().or(zod.null()).optional(),
      }),
    )
    .default(putV1UpdateGraphVersionBodySubGraphsDefault),
});

export const putV1UpdateGraphVersionResponseVersionDefault = 1;
export const putV1UpdateGraphVersionResponseIsActiveDefault = true;
export const putV1UpdateGraphVersionResponseNodesItemInputDefaultDefault = {};
export const putV1UpdateGraphVersionResponseNodesItemMetadataDefault = {};
export const putV1UpdateGraphVersionResponseNodesItemInputLinksItemIsStaticDefault = false;
export const putV1UpdateGraphVersionResponseNodesItemInputLinksDefault = [];
export const putV1UpdateGraphVersionResponseNodesItemOutputLinksItemIsStaticDefault = false;
export const putV1UpdateGraphVersionResponseNodesItemOutputLinksDefault = [];
export const putV1UpdateGraphVersionResponseNodesDefault = [];
export const putV1UpdateGraphVersionResponseLinksItemIsStaticDefault = false;
export const putV1UpdateGraphVersionResponseLinksDefault = [];
export const putV1UpdateGraphVersionResponseSubGraphsItemVersionDefault = 1;
export const putV1UpdateGraphVersionResponseSubGraphsItemIsActiveDefault = true;
export const putV1UpdateGraphVersionResponseSubGraphsItemNodesItemInputDefaultDefault =
  {};
export const putV1UpdateGraphVersionResponseSubGraphsItemNodesItemMetadataDefault =
  {};
export const putV1UpdateGraphVersionResponseSubGraphsItemNodesItemInputLinksItemIsStaticDefault = false;
export const putV1UpdateGraphVersionResponseSubGraphsItemNodesItemInputLinksDefault =
  [];
export const putV1UpdateGraphVersionResponseSubGraphsItemNodesItemOutputLinksItemIsStaticDefault = false;
export const putV1UpdateGraphVersionResponseSubGraphsItemNodesItemOutputLinksDefault =
  [];
export const putV1UpdateGraphVersionResponseSubGraphsItemNodesDefault = [];
export const putV1UpdateGraphVersionResponseSubGraphsItemLinksItemIsStaticDefault = false;
export const putV1UpdateGraphVersionResponseSubGraphsItemLinksDefault = [];
export const putV1UpdateGraphVersionResponseSubGraphsDefault = [];

export const putV1UpdateGraphVersionResponse = zod.object({
  id: zod.string().optional(),
  version: zod.number().default(putV1UpdateGraphVersionResponseVersionDefault),
  is_active: zod
    .boolean()
    .default(putV1UpdateGraphVersionResponseIsActiveDefault),
  name: zod.string(),
  description: zod.string(),
  nodes: zod
    .array(
      zod.object({
        id: zod.string().optional(),
        block_id: zod.string(),
        input_default: zod
          .record(zod.string(), zod.any())
          .default(putV1UpdateGraphVersionResponseNodesItemInputDefaultDefault),
        metadata: zod
          .record(zod.string(), zod.any())
          .default(putV1UpdateGraphVersionResponseNodesItemMetadataDefault),
        input_links: zod
          .array(
            zod.object({
              id: zod.string().optional(),
              source_id: zod.string(),
              sink_id: zod.string(),
              source_name: zod.string(),
              sink_name: zod.string(),
              is_static: zod.boolean().optional(),
            }),
          )
          .default(putV1UpdateGraphVersionResponseNodesItemInputLinksDefault),
        output_links: zod
          .array(
            zod.object({
              id: zod.string().optional(),
              source_id: zod.string(),
              sink_id: zod.string(),
              source_name: zod.string(),
              sink_name: zod.string(),
              is_static: zod.boolean().optional(),
            }),
          )
          .default(putV1UpdateGraphVersionResponseNodesItemOutputLinksDefault),
        graph_id: zod.string(),
        graph_version: zod.number(),
        webhook_id: zod.string().or(zod.null()).optional(),
        webhook: zod
          .object({
            id: zod.string().optional(),
            user_id: zod.string(),
            provider: zod.enum([
              "aiml_api",
              "anthropic",
              "apollo",
              "compass",
              "discord",
              "d_id",
              "e2b",
              "exa",
              "fal",
              "generic_webhook",
              "github",
              "google",
              "google_maps",
              "groq",
              "http",
              "hubspot",
              "ideogram",
              "jina",
              "linear",
              "llama_api",
              "medium",
              "mem0",
              "notion",
              "nvidia",
              "ollama",
              "openai",
              "openweathermap",
              "open_router",
              "pinecone",
              "reddit",
              "replicate",
              "revid",
              "screenshotone",
              "slant3d",
              "smartlead",
              "smtp",
              "twitter",
              "todoist",
              "unreal_speech",
              "zerobounce",
            ]),
            credentials_id: zod.string(),
            webhook_type: zod.string(),
            resource: zod.string(),
            events: zod.array(zod.string()),
            config: zod.record(zod.string(), zod.any()).optional(),
            secret: zod.string(),
            provider_webhook_id: zod.string(),
            url: zod.string(),
          })
          .or(zod.null())
          .optional(),
      }),
    )
    .default(putV1UpdateGraphVersionResponseNodesDefault),
  links: zod
    .array(
      zod.object({
        id: zod.string().optional(),
        source_id: zod.string(),
        sink_id: zod.string(),
        source_name: zod.string(),
        sink_name: zod.string(),
        is_static: zod.boolean().optional(),
      }),
    )
    .default(putV1UpdateGraphVersionResponseLinksDefault),
  forked_from_id: zod.string().or(zod.null()).optional(),
  forked_from_version: zod.number().or(zod.null()).optional(),
  sub_graphs: zod
    .array(
      zod.object({
        id: zod.string().optional(),
        version: zod
          .number()
          .default(putV1UpdateGraphVersionResponseSubGraphsItemVersionDefault),
        is_active: zod
          .boolean()
          .default(putV1UpdateGraphVersionResponseSubGraphsItemIsActiveDefault),
        name: zod.string(),
        description: zod.string(),
        nodes: zod
          .array(
            zod.object({
              id: zod.string().optional(),
              block_id: zod.string(),
              input_default: zod
                .record(zod.string(), zod.any())
                .default(
                  putV1UpdateGraphVersionResponseSubGraphsItemNodesItemInputDefaultDefault,
                ),
              metadata: zod
                .record(zod.string(), zod.any())
                .default(
                  putV1UpdateGraphVersionResponseSubGraphsItemNodesItemMetadataDefault,
                ),
              input_links: zod
                .array(
                  zod.object({
                    id: zod.string().optional(),
                    source_id: zod.string(),
                    sink_id: zod.string(),
                    source_name: zod.string(),
                    sink_name: zod.string(),
                    is_static: zod.boolean().optional(),
                  }),
                )
                .default(
                  putV1UpdateGraphVersionResponseSubGraphsItemNodesItemInputLinksDefault,
                ),
              output_links: zod
                .array(
                  zod.object({
                    id: zod.string().optional(),
                    source_id: zod.string(),
                    sink_id: zod.string(),
                    source_name: zod.string(),
                    sink_name: zod.string(),
                    is_static: zod.boolean().optional(),
                  }),
                )
                .default(
                  putV1UpdateGraphVersionResponseSubGraphsItemNodesItemOutputLinksDefault,
                ),
            }),
          )
          .default(putV1UpdateGraphVersionResponseSubGraphsItemNodesDefault),
        links: zod
          .array(
            zod.object({
              id: zod.string().optional(),
              source_id: zod.string(),
              sink_id: zod.string(),
              source_name: zod.string(),
              sink_name: zod.string(),
              is_static: zod.boolean().optional(),
            }),
          )
          .default(putV1UpdateGraphVersionResponseSubGraphsItemLinksDefault),
        forked_from_id: zod.string().or(zod.null()).optional(),
        forked_from_version: zod.number().or(zod.null()).optional(),
        input_schema: zod.record(zod.string(), zod.any()),
        output_schema: zod.record(zod.string(), zod.any()),
      }),
    )
    .default(putV1UpdateGraphVersionResponseSubGraphsDefault),
  user_id: zod.string(),
  input_schema: zod.record(zod.string(), zod.any()),
  output_schema: zod.record(zod.string(), zod.any()),
  credentials_input_schema: zod.record(zod.string(), zod.any()),
  has_webhook_trigger: zod.boolean(),
});

/**
 * @summary Get all graph versions
 */
export const getV1GetAllGraphVersionsParams = zod.object({
  graph_id: zod.string(),
});

export const getV1GetAllGraphVersionsResponseVersionDefault = 1;
export const getV1GetAllGraphVersionsResponseIsActiveDefault = true;
export const getV1GetAllGraphVersionsResponseNodesItemInputDefaultDefault = {};
export const getV1GetAllGraphVersionsResponseNodesItemMetadataDefault = {};
export const getV1GetAllGraphVersionsResponseNodesItemInputLinksItemIsStaticDefault = false;
export const getV1GetAllGraphVersionsResponseNodesItemInputLinksDefault = [];
export const getV1GetAllGraphVersionsResponseNodesItemOutputLinksItemIsStaticDefault = false;
export const getV1GetAllGraphVersionsResponseNodesItemOutputLinksDefault = [];
export const getV1GetAllGraphVersionsResponseNodesDefault = [];
export const getV1GetAllGraphVersionsResponseLinksItemIsStaticDefault = false;
export const getV1GetAllGraphVersionsResponseLinksDefault = [];
export const getV1GetAllGraphVersionsResponseSubGraphsItemVersionDefault = 1;
export const getV1GetAllGraphVersionsResponseSubGraphsItemIsActiveDefault = true;
export const getV1GetAllGraphVersionsResponseSubGraphsItemNodesItemInputDefaultDefault =
  {};
export const getV1GetAllGraphVersionsResponseSubGraphsItemNodesItemMetadataDefault =
  {};
export const getV1GetAllGraphVersionsResponseSubGraphsItemNodesItemInputLinksItemIsStaticDefault = false;
export const getV1GetAllGraphVersionsResponseSubGraphsItemNodesItemInputLinksDefault =
  [];
export const getV1GetAllGraphVersionsResponseSubGraphsItemNodesItemOutputLinksItemIsStaticDefault = false;
export const getV1GetAllGraphVersionsResponseSubGraphsItemNodesItemOutputLinksDefault =
  [];
export const getV1GetAllGraphVersionsResponseSubGraphsItemNodesDefault = [];
export const getV1GetAllGraphVersionsResponseSubGraphsItemLinksItemIsStaticDefault = false;
export const getV1GetAllGraphVersionsResponseSubGraphsItemLinksDefault = [];
export const getV1GetAllGraphVersionsResponseSubGraphsDefault = [];

export const getV1GetAllGraphVersionsResponseItem = zod.object({
  id: zod.string().optional(),
  version: zod.number().default(getV1GetAllGraphVersionsResponseVersionDefault),
  is_active: zod
    .boolean()
    .default(getV1GetAllGraphVersionsResponseIsActiveDefault),
  name: zod.string(),
  description: zod.string(),
  nodes: zod
    .array(
      zod.object({
        id: zod.string().optional(),
        block_id: zod.string(),
        input_default: zod
          .record(zod.string(), zod.any())
          .default(
            getV1GetAllGraphVersionsResponseNodesItemInputDefaultDefault,
          ),
        metadata: zod
          .record(zod.string(), zod.any())
          .default(getV1GetAllGraphVersionsResponseNodesItemMetadataDefault),
        input_links: zod
          .array(
            zod.object({
              id: zod.string().optional(),
              source_id: zod.string(),
              sink_id: zod.string(),
              source_name: zod.string(),
              sink_name: zod.string(),
              is_static: zod.boolean().optional(),
            }),
          )
          .default(getV1GetAllGraphVersionsResponseNodesItemInputLinksDefault),
        output_links: zod
          .array(
            zod.object({
              id: zod.string().optional(),
              source_id: zod.string(),
              sink_id: zod.string(),
              source_name: zod.string(),
              sink_name: zod.string(),
              is_static: zod.boolean().optional(),
            }),
          )
          .default(getV1GetAllGraphVersionsResponseNodesItemOutputLinksDefault),
        graph_id: zod.string(),
        graph_version: zod.number(),
        webhook_id: zod.string().or(zod.null()).optional(),
        webhook: zod
          .object({
            id: zod.string().optional(),
            user_id: zod.string(),
            provider: zod.enum([
              "aiml_api",
              "anthropic",
              "apollo",
              "compass",
              "discord",
              "d_id",
              "e2b",
              "exa",
              "fal",
              "generic_webhook",
              "github",
              "google",
              "google_maps",
              "groq",
              "http",
              "hubspot",
              "ideogram",
              "jina",
              "linear",
              "llama_api",
              "medium",
              "mem0",
              "notion",
              "nvidia",
              "ollama",
              "openai",
              "openweathermap",
              "open_router",
              "pinecone",
              "reddit",
              "replicate",
              "revid",
              "screenshotone",
              "slant3d",
              "smartlead",
              "smtp",
              "twitter",
              "todoist",
              "unreal_speech",
              "zerobounce",
            ]),
            credentials_id: zod.string(),
            webhook_type: zod.string(),
            resource: zod.string(),
            events: zod.array(zod.string()),
            config: zod.record(zod.string(), zod.any()).optional(),
            secret: zod.string(),
            provider_webhook_id: zod.string(),
            url: zod.string(),
          })
          .or(zod.null())
          .optional(),
      }),
    )
    .default(getV1GetAllGraphVersionsResponseNodesDefault),
  links: zod
    .array(
      zod.object({
        id: zod.string().optional(),
        source_id: zod.string(),
        sink_id: zod.string(),
        source_name: zod.string(),
        sink_name: zod.string(),
        is_static: zod.boolean().optional(),
      }),
    )
    .default(getV1GetAllGraphVersionsResponseLinksDefault),
  forked_from_id: zod.string().or(zod.null()).optional(),
  forked_from_version: zod.number().or(zod.null()).optional(),
  sub_graphs: zod
    .array(
      zod.object({
        id: zod.string().optional(),
        version: zod
          .number()
          .default(getV1GetAllGraphVersionsResponseSubGraphsItemVersionDefault),
        is_active: zod
          .boolean()
          .default(
            getV1GetAllGraphVersionsResponseSubGraphsItemIsActiveDefault,
          ),
        name: zod.string(),
        description: zod.string(),
        nodes: zod
          .array(
            zod.object({
              id: zod.string().optional(),
              block_id: zod.string(),
              input_default: zod
                .record(zod.string(), zod.any())
                .default(
                  getV1GetAllGraphVersionsResponseSubGraphsItemNodesItemInputDefaultDefault,
                ),
              metadata: zod
                .record(zod.string(), zod.any())
                .default(
                  getV1GetAllGraphVersionsResponseSubGraphsItemNodesItemMetadataDefault,
                ),
              input_links: zod
                .array(
                  zod.object({
                    id: zod.string().optional(),
                    source_id: zod.string(),
                    sink_id: zod.string(),
                    source_name: zod.string(),
                    sink_name: zod.string(),
                    is_static: zod.boolean().optional(),
                  }),
                )
                .default(
                  getV1GetAllGraphVersionsResponseSubGraphsItemNodesItemInputLinksDefault,
                ),
              output_links: zod
                .array(
                  zod.object({
                    id: zod.string().optional(),
                    source_id: zod.string(),
                    sink_id: zod.string(),
                    source_name: zod.string(),
                    sink_name: zod.string(),
                    is_static: zod.boolean().optional(),
                  }),
                )
                .default(
                  getV1GetAllGraphVersionsResponseSubGraphsItemNodesItemOutputLinksDefault,
                ),
            }),
          )
          .default(getV1GetAllGraphVersionsResponseSubGraphsItemNodesDefault),
        links: zod
          .array(
            zod.object({
              id: zod.string().optional(),
              source_id: zod.string(),
              sink_id: zod.string(),
              source_name: zod.string(),
              sink_name: zod.string(),
              is_static: zod.boolean().optional(),
            }),
          )
          .default(getV1GetAllGraphVersionsResponseSubGraphsItemLinksDefault),
        forked_from_id: zod.string().or(zod.null()).optional(),
        forked_from_version: zod.number().or(zod.null()).optional(),
        input_schema: zod.record(zod.string(), zod.any()),
        output_schema: zod.record(zod.string(), zod.any()),
      }),
    )
    .default(getV1GetAllGraphVersionsResponseSubGraphsDefault),
  user_id: zod.string(),
  input_schema: zod.record(zod.string(), zod.any()),
  output_schema: zod.record(zod.string(), zod.any()),
  credentials_input_schema: zod.record(zod.string(), zod.any()),
  has_webhook_trigger: zod.boolean(),
});
export const getV1GetAllGraphVersionsResponse = zod.array(
  getV1GetAllGraphVersionsResponseItem,
);

/**
 * @summary Set active graph version
 */
export const putV1SetActiveGraphVersionParams = zod.object({
  graph_id: zod.string(),
});

export const putV1SetActiveGraphVersionBody = zod.object({
  active_graph_version: zod.number(),
});

export const putV1SetActiveGraphVersionResponse = zod.any();

/**
 * @summary Execute graph agent
 */
export const postV1ExecuteGraphAgentParams = zod.object({
  graph_id: zod.string(),
  graph_version: zod.number().or(zod.null()),
});

export const postV1ExecuteGraphAgentQueryParams = zod.object({
  preset_id: zod.string().or(zod.null()).optional(),
});

export const postV1ExecuteGraphAgentBody = zod.object({
  inputs: zod.record(zod.string(), zod.any()).optional(),
  credentials_inputs: zod
    .record(
      zod.string(),
      zod.object({
        id: zod.string(),
        title: zod.string().or(zod.null()).optional(),
        provider: zod.enum([
          "aiml_api",
          "anthropic",
          "apollo",
          "compass",
          "discord",
          "d_id",
          "e2b",
          "exa",
          "fal",
          "generic_webhook",
          "github",
          "google",
          "google_maps",
          "groq",
          "http",
          "hubspot",
          "ideogram",
          "jina",
          "linear",
          "llama_api",
          "medium",
          "mem0",
          "notion",
          "nvidia",
          "ollama",
          "openai",
          "openweathermap",
          "open_router",
          "pinecone",
          "reddit",
          "replicate",
          "revid",
          "screenshotone",
          "slant3d",
          "smartlead",
          "smtp",
          "twitter",
          "todoist",
          "unreal_speech",
          "zerobounce",
        ]),
        type: zod.enum(["api_key", "oauth2", "user_password", "host_scoped"]),
      }),
    )
    .optional(),
});

export const postV1ExecuteGraphAgentResponse = zod.object({
  graph_exec_id: zod.string(),
});

/**
 * @summary Stop graph execution
 */
export const postV1StopGraphExecutionParams = zod.object({
  graph_id: zod.string(),
  graph_exec_id: zod.string(),
});

export const postV1StopGraphExecutionResponseStatsCostDefault = 0;
export const postV1StopGraphExecutionResponseStatsDurationDefault = 0;
export const postV1StopGraphExecutionResponseStatsDurationCpuOnlyDefault = 0;
export const postV1StopGraphExecutionResponseStatsNodeExecTimeDefault = 0;
export const postV1StopGraphExecutionResponseStatsNodeExecTimeCpuOnlyDefault = 0;
export const postV1StopGraphExecutionResponseStatsNodeExecCountDefault = 0;
export const postV1StopGraphExecutionResponseStatsNodeErrorCountDefault = 0;

export const postV1StopGraphExecutionResponse = zod.object({
  id: zod.string().optional(),
  user_id: zod.string(),
  graph_id: zod.string(),
  graph_version: zod.number(),
  preset_id: zod.string().or(zod.null()).optional(),
  status: zod.enum([
    "INCOMPLETE",
    "QUEUED",
    "RUNNING",
    "COMPLETED",
    "TERMINATED",
    "FAILED",
  ]),
  started_at: zod.string().datetime({}),
  ended_at: zod.string().datetime({}),
  stats: zod
    .object({
      cost: zod.number().optional().describe("Execution cost (cents)"),
      duration: zod
        .number()
        .optional()
        .describe("Seconds from start to end of run"),
      duration_cpu_only: zod
        .number()
        .optional()
        .describe("CPU sec of duration"),
      node_exec_time: zod
        .number()
        .optional()
        .describe("Seconds of total node runtime"),
      node_exec_time_cpu_only: zod
        .number()
        .optional()
        .describe("CPU sec of node_exec_time"),
      node_exec_count: zod
        .number()
        .optional()
        .describe("Number of node executions"),
      node_error_count: zod
        .number()
        .optional()
        .describe("Number of node errors"),
      error: zod
        .string()
        .or(zod.null())
        .optional()
        .describe("Error message if any"),
    })
    .or(zod.null()),
  inputs: zod.record(zod.string(), zod.any()),
  outputs: zod.record(zod.string(), zod.array(zod.any())),
});

/**
 * @summary Get all executions
 */
export const getV1GetAllExecutionsResponseStatsCostDefault = 0;
export const getV1GetAllExecutionsResponseStatsDurationDefault = 0;
export const getV1GetAllExecutionsResponseStatsDurationCpuOnlyDefault = 0;
export const getV1GetAllExecutionsResponseStatsNodeExecTimeDefault = 0;
export const getV1GetAllExecutionsResponseStatsNodeExecTimeCpuOnlyDefault = 0;
export const getV1GetAllExecutionsResponseStatsNodeExecCountDefault = 0;
export const getV1GetAllExecutionsResponseStatsNodeErrorCountDefault = 0;

export const getV1GetAllExecutionsResponseItem = zod.object({
  id: zod.string().optional(),
  user_id: zod.string(),
  graph_id: zod.string(),
  graph_version: zod.number(),
  preset_id: zod.string().or(zod.null()).optional(),
  status: zod.enum([
    "INCOMPLETE",
    "QUEUED",
    "RUNNING",
    "COMPLETED",
    "TERMINATED",
    "FAILED",
  ]),
  started_at: zod.string().datetime({}),
  ended_at: zod.string().datetime({}),
  stats: zod
    .object({
      cost: zod.number().optional().describe("Execution cost (cents)"),
      duration: zod
        .number()
        .optional()
        .describe("Seconds from start to end of run"),
      duration_cpu_only: zod
        .number()
        .optional()
        .describe("CPU sec of duration"),
      node_exec_time: zod
        .number()
        .optional()
        .describe("Seconds of total node runtime"),
      node_exec_time_cpu_only: zod
        .number()
        .optional()
        .describe("CPU sec of node_exec_time"),
      node_exec_count: zod
        .number()
        .optional()
        .describe("Number of node executions"),
      node_error_count: zod
        .number()
        .optional()
        .describe("Number of node errors"),
      error: zod
        .string()
        .or(zod.null())
        .optional()
        .describe("Error message if any"),
    })
    .or(zod.null()),
});
export const getV1GetAllExecutionsResponse = zod.array(
  getV1GetAllExecutionsResponseItem,
);

/**
 * @summary Get graph executions
 */
export const getV1GetGraphExecutionsParams = zod.object({
  graph_id: zod.string(),
});

export const getV1GetGraphExecutionsResponseStatsCostDefault = 0;
export const getV1GetGraphExecutionsResponseStatsDurationDefault = 0;
export const getV1GetGraphExecutionsResponseStatsDurationCpuOnlyDefault = 0;
export const getV1GetGraphExecutionsResponseStatsNodeExecTimeDefault = 0;
export const getV1GetGraphExecutionsResponseStatsNodeExecTimeCpuOnlyDefault = 0;
export const getV1GetGraphExecutionsResponseStatsNodeExecCountDefault = 0;
export const getV1GetGraphExecutionsResponseStatsNodeErrorCountDefault = 0;

export const getV1GetGraphExecutionsResponseItem = zod.object({
  id: zod.string().optional(),
  user_id: zod.string(),
  graph_id: zod.string(),
  graph_version: zod.number(),
  preset_id: zod.string().or(zod.null()).optional(),
  status: zod.enum([
    "INCOMPLETE",
    "QUEUED",
    "RUNNING",
    "COMPLETED",
    "TERMINATED",
    "FAILED",
  ]),
  started_at: zod.string().datetime({}),
  ended_at: zod.string().datetime({}),
  stats: zod
    .object({
      cost: zod.number().optional().describe("Execution cost (cents)"),
      duration: zod
        .number()
        .optional()
        .describe("Seconds from start to end of run"),
      duration_cpu_only: zod
        .number()
        .optional()
        .describe("CPU sec of duration"),
      node_exec_time: zod
        .number()
        .optional()
        .describe("Seconds of total node runtime"),
      node_exec_time_cpu_only: zod
        .number()
        .optional()
        .describe("CPU sec of node_exec_time"),
      node_exec_count: zod
        .number()
        .optional()
        .describe("Number of node executions"),
      node_error_count: zod
        .number()
        .optional()
        .describe("Number of node errors"),
      error: zod
        .string()
        .or(zod.null())
        .optional()
        .describe("Error message if any"),
    })
    .or(zod.null()),
});
export const getV1GetGraphExecutionsResponse = zod.array(
  getV1GetGraphExecutionsResponseItem,
);

/**
 * @summary Get execution details
 */
export const getV1GetExecutionDetailsParams = zod.object({
  graph_id: zod.string(),
  graph_exec_id: zod.string(),
});

export const getV1GetExecutionDetailsResponseStatsCostDefault = 0;
export const getV1GetExecutionDetailsResponseStatsDurationDefault = 0;
export const getV1GetExecutionDetailsResponseStatsDurationCpuOnlyDefault = 0;
export const getV1GetExecutionDetailsResponseStatsNodeExecTimeDefault = 0;
export const getV1GetExecutionDetailsResponseStatsNodeExecTimeCpuOnlyDefault = 0;
export const getV1GetExecutionDetailsResponseStatsNodeExecCountDefault = 0;
export const getV1GetExecutionDetailsResponseStatsNodeErrorCountDefault = 0;
export const getV1GetExecutionDetailsResponseStatsCostDefaultOne = 0;
export const getV1GetExecutionDetailsResponseStatsDurationDefaultOne = 0;
export const getV1GetExecutionDetailsResponseStatsDurationCpuOnlyDefaultOne = 0;
export const getV1GetExecutionDetailsResponseStatsNodeExecTimeDefaultOne = 0;
export const getV1GetExecutionDetailsResponseStatsNodeExecTimeCpuOnlyDefaultOne = 0;
export const getV1GetExecutionDetailsResponseStatsNodeExecCountDefaultOne = 0;
export const getV1GetExecutionDetailsResponseStatsNodeErrorCountDefaultOne = 0;

export const getV1GetExecutionDetailsResponse = zod
  .object({
    id: zod.string().optional(),
    user_id: zod.string(),
    graph_id: zod.string(),
    graph_version: zod.number(),
    preset_id: zod.string().or(zod.null()).optional(),
    status: zod.enum([
      "INCOMPLETE",
      "QUEUED",
      "RUNNING",
      "COMPLETED",
      "TERMINATED",
      "FAILED",
    ]),
    started_at: zod.string().datetime({}),
    ended_at: zod.string().datetime({}),
    stats: zod
      .object({
        cost: zod.number().optional().describe("Execution cost (cents)"),
        duration: zod
          .number()
          .optional()
          .describe("Seconds from start to end of run"),
        duration_cpu_only: zod
          .number()
          .optional()
          .describe("CPU sec of duration"),
        node_exec_time: zod
          .number()
          .optional()
          .describe("Seconds of total node runtime"),
        node_exec_time_cpu_only: zod
          .number()
          .optional()
          .describe("CPU sec of node_exec_time"),
        node_exec_count: zod
          .number()
          .optional()
          .describe("Number of node executions"),
        node_error_count: zod
          .number()
          .optional()
          .describe("Number of node errors"),
        error: zod
          .string()
          .or(zod.null())
          .optional()
          .describe("Error message if any"),
      })
      .or(zod.null()),
    inputs: zod.record(zod.string(), zod.any()),
    outputs: zod.record(zod.string(), zod.array(zod.any())),
  })
  .or(
    zod.object({
      id: zod.string().optional(),
      user_id: zod.string(),
      graph_id: zod.string(),
      graph_version: zod.number(),
      preset_id: zod.string().or(zod.null()).optional(),
      status: zod.enum([
        "INCOMPLETE",
        "QUEUED",
        "RUNNING",
        "COMPLETED",
        "TERMINATED",
        "FAILED",
      ]),
      started_at: zod.string().datetime({}),
      ended_at: zod.string().datetime({}),
      stats: zod
        .object({
          cost: zod.number().optional().describe("Execution cost (cents)"),
          duration: zod
            .number()
            .optional()
            .describe("Seconds from start to end of run"),
          duration_cpu_only: zod
            .number()
            .optional()
            .describe("CPU sec of duration"),
          node_exec_time: zod
            .number()
            .optional()
            .describe("Seconds of total node runtime"),
          node_exec_time_cpu_only: zod
            .number()
            .optional()
            .describe("CPU sec of node_exec_time"),
          node_exec_count: zod
            .number()
            .optional()
            .describe("Number of node executions"),
          node_error_count: zod
            .number()
            .optional()
            .describe("Number of node errors"),
          error: zod
            .string()
            .or(zod.null())
            .optional()
            .describe("Error message if any"),
        })
        .or(zod.null()),
      inputs: zod.record(zod.string(), zod.any()),
      outputs: zod.record(zod.string(), zod.array(zod.any())),
      node_executions: zod.array(
        zod.object({
          user_id: zod.string(),
          graph_id: zod.string(),
          graph_version: zod.number(),
          graph_exec_id: zod.string(),
          node_exec_id: zod.string(),
          node_id: zod.string(),
          block_id: zod.string(),
          status: zod.enum([
            "INCOMPLETE",
            "QUEUED",
            "RUNNING",
            "COMPLETED",
            "TERMINATED",
            "FAILED",
          ]),
          input_data: zod.record(zod.string(), zod.any()),
          output_data: zod.record(zod.string(), zod.array(zod.any())),
          add_time: zod.string().datetime({}),
          queue_time: zod.string().datetime({}).or(zod.null()),
          start_time: zod.string().datetime({}).or(zod.null()),
          end_time: zod.string().datetime({}).or(zod.null()),
        }),
      ),
    }),
  );

/**
 * @summary Delete graph execution
 */
export const deleteV1DeleteGraphExecutionParams = zod.object({
  graph_exec_id: zod.string(),
});
