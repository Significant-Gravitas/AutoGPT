/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * AutoGPT Agent Server
 * This server is used to execute agents that are created by the AutoGPT system.
 * OpenAPI spec version: 0.1
 */
import { z as zod } from "zod";

/**
 * Get the profile details for the authenticated user.
 * @summary Get user profile
 */
export const getV2GetUserProfileResponse = zod.object({
  name: zod.string(),
  username: zod.string(),
  description: zod.string(),
  links: zod.array(zod.string()),
  avatar_url: zod.string().or(zod.null()).optional(),
});

/**
 * Update the store profile for the authenticated user.

Args:
    profile (Profile): The updated profile details
    user_id (str): ID of the authenticated user

Returns:
    CreatorDetails: The updated profile

Raises:
    HTTPException: If there is an error updating the profile
 * @summary Update user profile
 */
export const postV2UpdateUserProfileBodyIsFeaturedDefault = false;

export const postV2UpdateUserProfileBody = zod.object({
  name: zod.string(),
  username: zod.string(),
  description: zod.string(),
  links: zod.array(zod.string()),
  avatar_url: zod.string(),
  is_featured: zod.boolean().optional(),
});

export const postV2UpdateUserProfileResponse = zod.object({
  name: zod.string(),
  username: zod.string(),
  description: zod.string(),
  links: zod.array(zod.string()),
  avatar_url: zod.string(),
  agent_rating: zod.number(),
  agent_runs: zod.number(),
  top_categories: zod.array(zod.string()),
});

/**
 * Get a paginated list of agents from the store with optional filtering and sorting.

Args:
    featured (bool, optional): Filter to only show featured agents. Defaults to False.
    creator (str | None, optional): Filter agents by creator username. Defaults to None.
    sorted_by (str | None, optional): Sort agents by "runs" or "rating". Defaults to None.
    search_query (str | None, optional): Search agents by name, subheading and description. Defaults to None.
    category (str | None, optional): Filter agents by category. Defaults to None.
    page (int, optional): Page number for pagination. Defaults to 1.
    page_size (int, optional): Number of agents per page. Defaults to 20.

Returns:
    StoreAgentsResponse: Paginated list of agents matching the filters

Raises:
    HTTPException: If page or page_size are less than 1

Used for:
- Home Page Featured Agents
- Home Page Top Agents
- Search Results
- Agent Details - Other Agents By Creator
- Agent Details - Similar Agents
- Creator Details - Agents By Creator
 * @summary List store agents
 */
export const getV2ListStoreAgentsQueryFeaturedDefault = false;
export const getV2ListStoreAgentsQueryPageDefault = 1;
export const getV2ListStoreAgentsQueryPageSizeDefault = 20;

export const getV2ListStoreAgentsQueryParams = zod.object({
  featured: zod.boolean().optional(),
  creator: zod.string().or(zod.null()).optional(),
  sorted_by: zod.string().or(zod.null()).optional(),
  search_query: zod.string().or(zod.null()).optional(),
  category: zod.string().or(zod.null()).optional(),
  page: zod.number().default(getV2ListStoreAgentsQueryPageDefault),
  page_size: zod.number().default(getV2ListStoreAgentsQueryPageSizeDefault),
});

export const getV2ListStoreAgentsResponse = zod.object({
  agents: zod.array(
    zod.object({
      slug: zod.string(),
      agent_name: zod.string(),
      agent_image: zod.string(),
      creator: zod.string(),
      creator_avatar: zod.string(),
      sub_heading: zod.string(),
      description: zod.string(),
      runs: zod.number(),
      rating: zod.number(),
    }),
  ),
  pagination: zod.object({
    total_items: zod.number().describe("Total number of items."),
    total_pages: zod.number().describe("Total number of pages."),
    current_page: zod.number().describe("Current_page page number."),
    page_size: zod.number().describe("Number of items per page."),
  }),
});

/**
 * This is only used on the AgentDetails Page

It returns the store listing agents details.
 * @summary Get specific agent
 */
export const getV2GetSpecificAgentParams = zod.object({
  username: zod.string(),
  agent_name: zod.string(),
});

export const getV2GetSpecificAgentResponseHasApprovedVersionDefault = false;

export const getV2GetSpecificAgentResponse = zod.object({
  store_listing_version_id: zod.string(),
  slug: zod.string(),
  agent_name: zod.string(),
  agent_video: zod.string(),
  agent_image: zod.array(zod.string()),
  creator: zod.string(),
  creator_avatar: zod.string(),
  sub_heading: zod.string(),
  description: zod.string(),
  categories: zod.array(zod.string()),
  runs: zod.number(),
  rating: zod.number(),
  versions: zod.array(zod.string()),
  last_updated: zod.string().datetime({}),
  active_version_id: zod.string().or(zod.null()).optional(),
  has_approved_version: zod.boolean().optional(),
});

/**
 * Get Agent Graph from Store Listing Version ID.
 * @summary Get agent graph
 */
export const getV2GetAgentGraphParams = zod.object({
  store_listing_version_id: zod.string(),
});

export const getV2GetAgentGraphResponse = zod.any();

/**
 * Get Store Agent Details from Store Listing Version ID.
 * @summary Get agent by version
 */
export const getV2GetAgentByVersionParams = zod.object({
  store_listing_version_id: zod.string(),
});

export const getV2GetAgentByVersionResponseHasApprovedVersionDefault = false;

export const getV2GetAgentByVersionResponse = zod.object({
  store_listing_version_id: zod.string(),
  slug: zod.string(),
  agent_name: zod.string(),
  agent_video: zod.string(),
  agent_image: zod.array(zod.string()),
  creator: zod.string(),
  creator_avatar: zod.string(),
  sub_heading: zod.string(),
  description: zod.string(),
  categories: zod.array(zod.string()),
  runs: zod.number(),
  rating: zod.number(),
  versions: zod.array(zod.string()),
  last_updated: zod.string().datetime({}),
  active_version_id: zod.string().or(zod.null()).optional(),
  has_approved_version: zod.boolean().optional(),
});

/**
 * Create a review for a store agent.

Args:
    username: Creator's username
    agent_name: Name/slug of the agent
    review: Review details including score and optional comments
    user_id: ID of authenticated user creating the review

Returns:
    The created review
 * @summary Create agent review
 */
export const postV2CreateAgentReviewParams = zod.object({
  username: zod.string(),
  agent_name: zod.string(),
});

export const postV2CreateAgentReviewBody = zod.object({
  store_listing_version_id: zod.string(),
  score: zod.number(),
  comments: zod.string().or(zod.null()).optional(),
});

export const postV2CreateAgentReviewResponse = zod.object({
  score: zod.number(),
  comments: zod.string().or(zod.null()).optional(),
});

/**
 * This is needed for:
- Home Page Featured Creators
- Search Results Page

---

To support this functionality we need:
- featured: bool - to limit the list to just featured agents
- search_query: str - vector search based on the creators profile description.
- sorted_by: [agent_rating, agent_runs] -
 * @summary List store creators
 */
export const getV2ListStoreCreatorsQueryFeaturedDefault = false;
export const getV2ListStoreCreatorsQueryPageDefault = 1;
export const getV2ListStoreCreatorsQueryPageSizeDefault = 20;

export const getV2ListStoreCreatorsQueryParams = zod.object({
  featured: zod.boolean().optional(),
  search_query: zod.string().or(zod.null()).optional(),
  sorted_by: zod.string().or(zod.null()).optional(),
  page: zod.number().default(getV2ListStoreCreatorsQueryPageDefault),
  page_size: zod.number().default(getV2ListStoreCreatorsQueryPageSizeDefault),
});

export const getV2ListStoreCreatorsResponse = zod.object({
  creators: zod.array(
    zod.object({
      name: zod.string(),
      username: zod.string(),
      description: zod.string(),
      avatar_url: zod.string(),
      num_agents: zod.number(),
      agent_rating: zod.number(),
      agent_runs: zod.number(),
      is_featured: zod.boolean(),
    }),
  ),
  pagination: zod.object({
    total_items: zod.number().describe("Total number of items."),
    total_pages: zod.number().describe("Total number of pages."),
    current_page: zod.number().describe("Current_page page number."),
    page_size: zod.number().describe("Number of items per page."),
  }),
});

/**
 * Get the details of a creator
- Creator Details Page
 * @summary Get creator details
 */
export const getV2GetCreatorDetailsParams = zod.object({
  username: zod.string(),
});

export const getV2GetCreatorDetailsResponse = zod.object({
  name: zod.string(),
  username: zod.string(),
  description: zod.string(),
  links: zod.array(zod.string()),
  avatar_url: zod.string(),
  agent_rating: zod.number(),
  agent_runs: zod.number(),
  top_categories: zod.array(zod.string()),
});

/**
 * @summary Get my agents
 */
export const getV2GetMyAgentsResponse = zod.object({
  agents: zod.array(
    zod.object({
      agent_id: zod.string(),
      agent_version: zod.number(),
      agent_name: zod.string(),
      agent_image: zod.string().or(zod.null()).optional(),
      description: zod.string(),
      last_edited: zod.string().datetime({}),
    }),
  ),
  pagination: zod.object({
    total_items: zod.number().describe("Total number of items."),
    total_pages: zod.number().describe("Total number of pages."),
    current_page: zod.number().describe("Current_page page number."),
    page_size: zod.number().describe("Number of items per page."),
  }),
});

/**
 * Delete a store listing submission.

Args:
    user_id (str): ID of the authenticated user
    submission_id (str): ID of the submission to be deleted

Returns:
    bool: True if the submission was successfully deleted, False otherwise
 * @summary Delete store submission
 */
export const deleteV2DeleteStoreSubmissionParams = zod.object({
  submission_id: zod.string(),
});

export const deleteV2DeleteStoreSubmissionResponse = zod.boolean();

/**
 * Get a paginated list of store submissions for the authenticated user.

Args:
    user_id (str): ID of the authenticated user
    page (int, optional): Page number for pagination. Defaults to 1.
    page_size (int, optional): Number of submissions per page. Defaults to 20.

Returns:
    StoreListingsResponse: Paginated list of store submissions

Raises:
    HTTPException: If page or page_size are less than 1
 * @summary List my submissions
 */
export const getV2ListMySubmissionsQueryPageDefault = 1;
export const getV2ListMySubmissionsQueryPageSizeDefault = 20;

export const getV2ListMySubmissionsQueryParams = zod.object({
  page: zod.number().default(getV2ListMySubmissionsQueryPageDefault),
  page_size: zod.number().default(getV2ListMySubmissionsQueryPageSizeDefault),
});

export const getV2ListMySubmissionsResponse = zod.object({
  submissions: zod.array(
    zod.object({
      agent_id: zod.string(),
      agent_version: zod.number(),
      name: zod.string(),
      sub_heading: zod.string(),
      slug: zod.string(),
      description: zod.string(),
      image_urls: zod.array(zod.string()),
      date_submitted: zod.string().datetime({}),
      status: zod.enum(["DRAFT", "PENDING", "APPROVED", "REJECTED"]),
      runs: zod.number(),
      rating: zod.number(),
      store_listing_version_id: zod.string().or(zod.null()).optional(),
      version: zod.number().or(zod.null()).optional(),
      reviewer_id: zod.string().or(zod.null()).optional(),
      review_comments: zod.string().or(zod.null()).optional(),
      internal_comments: zod.string().or(zod.null()).optional(),
      reviewed_at: zod.string().datetime({}).or(zod.null()).optional(),
      changes_summary: zod.string().or(zod.null()).optional(),
    }),
  ),
  pagination: zod.object({
    total_items: zod.number().describe("Total number of items."),
    total_pages: zod.number().describe("Total number of pages."),
    current_page: zod.number().describe("Current_page page number."),
    page_size: zod.number().describe("Number of items per page."),
  }),
});

/**
 * Create a new store listing submission.

Args:
    submission_request (StoreSubmissionRequest): The submission details
    user_id (str): ID of the authenticated user submitting the listing

Returns:
    StoreSubmission: The created store submission

Raises:
    HTTPException: If there is an error creating the submission
 * @summary Create store submission
 */
export const postV2CreateStoreSubmissionBodyImageUrlsDefault = [];
export const postV2CreateStoreSubmissionBodyDescriptionDefault = "";
export const postV2CreateStoreSubmissionBodyCategoriesDefault = [];

export const postV2CreateStoreSubmissionBody = zod.object({
  agent_id: zod.string(),
  agent_version: zod.number(),
  slug: zod.string(),
  name: zod.string(),
  sub_heading: zod.string(),
  video_url: zod.string().or(zod.null()).optional(),
  image_urls: zod
    .array(zod.string())
    .default(postV2CreateStoreSubmissionBodyImageUrlsDefault),
  description: zod.string().optional(),
  categories: zod
    .array(zod.string())
    .default(postV2CreateStoreSubmissionBodyCategoriesDefault),
  changes_summary: zod.string().or(zod.null()).optional(),
});

export const postV2CreateStoreSubmissionResponse = zod.object({
  agent_id: zod.string(),
  agent_version: zod.number(),
  name: zod.string(),
  sub_heading: zod.string(),
  slug: zod.string(),
  description: zod.string(),
  image_urls: zod.array(zod.string()),
  date_submitted: zod.string().datetime({}),
  status: zod.enum(["DRAFT", "PENDING", "APPROVED", "REJECTED"]),
  runs: zod.number(),
  rating: zod.number(),
  store_listing_version_id: zod.string().or(zod.null()).optional(),
  version: zod.number().or(zod.null()).optional(),
  reviewer_id: zod.string().or(zod.null()).optional(),
  review_comments: zod.string().or(zod.null()).optional(),
  internal_comments: zod.string().or(zod.null()).optional(),
  reviewed_at: zod.string().datetime({}).or(zod.null()).optional(),
  changes_summary: zod.string().or(zod.null()).optional(),
});

/**
 * Upload media (images/videos) for a store listing submission.

Args:
    file (UploadFile): The media file to upload
    user_id (str): ID of the authenticated user uploading the media

Returns:
    str: URL of the uploaded media file

Raises:
    HTTPException: If there is an error uploading the media
 * @summary Upload submission media
 */
export const postV2UploadSubmissionMediaBody = zod.object({
  file: zod.instanceof(File),
});

export const postV2UploadSubmissionMediaResponse = zod.any();

/**
 * Generate an image for a store listing submission.

Args:
    agent_id (str): ID of the agent to generate an image for
    user_id (str): ID of the authenticated user

Returns:
    JSONResponse: JSON containing the URL of the generated image
 * @summary Generate submission image
 */
export const postV2GenerateSubmissionImageQueryParams = zod.object({
  agent_id: zod.string(),
});

export const postV2GenerateSubmissionImageResponse = zod.any();

/**
 * Download the agent file by streaming its content.

Args:
    store_listing_version_id (str): The ID of the agent to download

Returns:
    StreamingResponse: A streaming response containing the agent's graph data.

Raises:
    HTTPException: If the agent is not found or an unexpected error occurs.
 * @summary Download agent file
 */
export const getV2DownloadAgentFileParams = zod.object({
  store_listing_version_id: zod
    .string()
    .describe("The ID of the agent to download"),
});

export const getV2DownloadAgentFileResponse = zod.any();
