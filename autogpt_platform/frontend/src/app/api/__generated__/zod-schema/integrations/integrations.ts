/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * AutoGPT Agent Server
 * This server is used to execute agents that are created by the AutoGPT system.
 * OpenAPI spec version: 0.1
 */
import { z as zod } from "zod";

/**
 * @summary Login
 */
export const getV1LoginParams = zod.object({
  provider: zod.enum([
    "aiml_api",
    "anthropic",
    "apollo",
    "compass",
    "discord",
    "d_id",
    "e2b",
    "exa",
    "fal",
    "generic_webhook",
    "github",
    "google",
    "google_maps",
    "groq",
    "http",
    "hubspot",
    "ideogram",
    "jina",
    "linear",
    "llama_api",
    "medium",
    "mem0",
    "notion",
    "nvidia",
    "ollama",
    "openai",
    "openweathermap",
    "open_router",
    "pinecone",
    "reddit",
    "replicate",
    "revid",
    "screenshotone",
    "slant3d",
    "smartlead",
    "smtp",
    "twitter",
    "todoist",
    "unreal_speech",
    "zerobounce",
  ]),
});

export const getV1LoginQueryScopesDefault = "";

export const getV1LoginQueryParams = zod.object({
  scopes: zod.string().optional(),
});

export const getV1LoginResponse = zod.object({
  login_url: zod.string(),
  state_token: zod.string(),
});

/**
 * @summary Callback
 */
export const postV1CallbackParams = zod.object({
  provider: zod.enum([
    "aiml_api",
    "anthropic",
    "apollo",
    "compass",
    "discord",
    "d_id",
    "e2b",
    "exa",
    "fal",
    "generic_webhook",
    "github",
    "google",
    "google_maps",
    "groq",
    "http",
    "hubspot",
    "ideogram",
    "jina",
    "linear",
    "llama_api",
    "medium",
    "mem0",
    "notion",
    "nvidia",
    "ollama",
    "openai",
    "openweathermap",
    "open_router",
    "pinecone",
    "reddit",
    "replicate",
    "revid",
    "screenshotone",
    "slant3d",
    "smartlead",
    "smtp",
    "twitter",
    "todoist",
    "unreal_speech",
    "zerobounce",
  ]),
});

export const postV1CallbackBody = zod.object({
  code: zod.string(),
  state_token: zod.string(),
});

export const postV1CallbackResponse = zod.object({
  id: zod.string(),
  provider: zod.string(),
  type: zod.enum(["api_key", "oauth2", "user_password", "host_scoped"]),
  title: zod.string().or(zod.null()),
  scopes: zod.array(zod.string()).or(zod.null()),
  username: zod.string().or(zod.null()),
  host: zod
    .string()
    .or(zod.null())
    .optional()
    .describe("Host pattern for host-scoped credentials"),
});

/**
 * @summary List Credentials
 */
export const getV1ListCredentialsResponseItem = zod.object({
  id: zod.string(),
  provider: zod.string(),
  type: zod.enum(["api_key", "oauth2", "user_password", "host_scoped"]),
  title: zod.string().or(zod.null()),
  scopes: zod.array(zod.string()).or(zod.null()),
  username: zod.string().or(zod.null()),
  host: zod
    .string()
    .or(zod.null())
    .optional()
    .describe("Host pattern for host-scoped credentials"),
});
export const getV1ListCredentialsResponse = zod.array(
  getV1ListCredentialsResponseItem,
);

/**
 * @summary List Credentials By Provider
 */
export const getV1ListCredentialsByProviderParams = zod.object({
  provider: zod.enum([
    "aiml_api",
    "anthropic",
    "apollo",
    "compass",
    "discord",
    "d_id",
    "e2b",
    "exa",
    "fal",
    "generic_webhook",
    "github",
    "google",
    "google_maps",
    "groq",
    "http",
    "hubspot",
    "ideogram",
    "jina",
    "linear",
    "llama_api",
    "medium",
    "mem0",
    "notion",
    "nvidia",
    "ollama",
    "openai",
    "openweathermap",
    "open_router",
    "pinecone",
    "reddit",
    "replicate",
    "revid",
    "screenshotone",
    "slant3d",
    "smartlead",
    "smtp",
    "twitter",
    "todoist",
    "unreal_speech",
    "zerobounce",
  ]),
});

export const getV1ListCredentialsByProviderResponseItem = zod.object({
  id: zod.string(),
  provider: zod.string(),
  type: zod.enum(["api_key", "oauth2", "user_password", "host_scoped"]),
  title: zod.string().or(zod.null()),
  scopes: zod.array(zod.string()).or(zod.null()),
  username: zod.string().or(zod.null()),
  host: zod
    .string()
    .or(zod.null())
    .optional()
    .describe("Host pattern for host-scoped credentials"),
});
export const getV1ListCredentialsByProviderResponse = zod.array(
  getV1ListCredentialsByProviderResponseItem,
);

/**
 * @summary Create Credentials
 */
export const postV1CreateCredentialsParams = zod.object({
  provider: zod.enum([
    "aiml_api",
    "anthropic",
    "apollo",
    "compass",
    "discord",
    "d_id",
    "e2b",
    "exa",
    "fal",
    "generic_webhook",
    "github",
    "google",
    "google_maps",
    "groq",
    "http",
    "hubspot",
    "ideogram",
    "jina",
    "linear",
    "llama_api",
    "medium",
    "mem0",
    "notion",
    "nvidia",
    "ollama",
    "openai",
    "openweathermap",
    "open_router",
    "pinecone",
    "reddit",
    "replicate",
    "revid",
    "screenshotone",
    "slant3d",
    "smartlead",
    "smtp",
    "twitter",
    "todoist",
    "unreal_speech",
    "zerobounce",
  ]),
});

export const postV1CreateCredentialsBodyTypeDefault = "oauth2";
export const postV1CreateCredentialsBodyTypeDefaultOne = "api_key";
export const postV1CreateCredentialsBodyTypeDefaultTwo = "user_password";
export const postV1CreateCredentialsBodyTypeDefaultThree = "host_scoped";

export const postV1CreateCredentialsBody = zod
  .object({
    id: zod.string().optional(),
    provider: zod.string(),
    title: zod.string().or(zod.null()).optional(),
    type: zod.string().default(postV1CreateCredentialsBodyTypeDefault),
    username: zod.string().or(zod.null()).optional(),
    access_token: zod.string(),
    access_token_expires_at: zod.number().or(zod.null()).optional(),
    refresh_token: zod.string().or(zod.null()).optional(),
    refresh_token_expires_at: zod.number().or(zod.null()).optional(),
    scopes: zod.array(zod.string()),
    metadata: zod.record(zod.string(), zod.any()).optional(),
  })
  .or(
    zod.object({
      id: zod.string().optional(),
      provider: zod.string(),
      title: zod.string().or(zod.null()).optional(),
      type: zod.string().default(postV1CreateCredentialsBodyTypeDefaultOne),
      api_key: zod.string(),
      expires_at: zod
        .number()
        .or(zod.null())
        .optional()
        .describe(
          "Unix timestamp (seconds) indicating when the API key expires (if at all)",
        ),
    }),
  )
  .or(
    zod.object({
      id: zod.string().optional(),
      provider: zod.string(),
      title: zod.string().or(zod.null()).optional(),
      type: zod.string().default(postV1CreateCredentialsBodyTypeDefaultTwo),
      username: zod.string(),
      password: zod.string(),
    }),
  )
  .or(
    zod.object({
      id: zod.string().optional(),
      provider: zod.string(),
      title: zod.string().or(zod.null()).optional(),
      type: zod.string().default(postV1CreateCredentialsBodyTypeDefaultThree),
      host: zod
        .string()
        .describe("The host/URI pattern to match against request URLs"),
      headers: zod
        .record(zod.string(), zod.string())
        .optional()
        .describe("Key-value header map to add to matching requests"),
    }),
  );

/**
 * @summary Get Credential
 */
export const getV1GetCredentialParams = zod.object({
  provider: zod.enum([
    "aiml_api",
    "anthropic",
    "apollo",
    "compass",
    "discord",
    "d_id",
    "e2b",
    "exa",
    "fal",
    "generic_webhook",
    "github",
    "google",
    "google_maps",
    "groq",
    "http",
    "hubspot",
    "ideogram",
    "jina",
    "linear",
    "llama_api",
    "medium",
    "mem0",
    "notion",
    "nvidia",
    "ollama",
    "openai",
    "openweathermap",
    "open_router",
    "pinecone",
    "reddit",
    "replicate",
    "revid",
    "screenshotone",
    "slant3d",
    "smartlead",
    "smtp",
    "twitter",
    "todoist",
    "unreal_speech",
    "zerobounce",
  ]),
  cred_id: zod.string(),
});

export const getV1GetCredentialResponseTypeDefault = "oauth2";
export const getV1GetCredentialResponseTypeDefaultOne = "api_key";
export const getV1GetCredentialResponseTypeDefaultTwo = "user_password";
export const getV1GetCredentialResponseTypeDefaultThree = "host_scoped";

export const getV1GetCredentialResponse = zod
  .object({
    id: zod.string().optional(),
    provider: zod.string(),
    title: zod.string().or(zod.null()).optional(),
    type: zod.string().default(getV1GetCredentialResponseTypeDefault),
    username: zod.string().or(zod.null()).optional(),
    access_token: zod.string(),
    access_token_expires_at: zod.number().or(zod.null()).optional(),
    refresh_token: zod.string().or(zod.null()).optional(),
    refresh_token_expires_at: zod.number().or(zod.null()).optional(),
    scopes: zod.array(zod.string()),
    metadata: zod.record(zod.string(), zod.any()).optional(),
  })
  .or(
    zod.object({
      id: zod.string().optional(),
      provider: zod.string(),
      title: zod.string().or(zod.null()).optional(),
      type: zod.string().default(getV1GetCredentialResponseTypeDefaultOne),
      api_key: zod.string(),
      expires_at: zod
        .number()
        .or(zod.null())
        .optional()
        .describe(
          "Unix timestamp (seconds) indicating when the API key expires (if at all)",
        ),
    }),
  )
  .or(
    zod.object({
      id: zod.string().optional(),
      provider: zod.string(),
      title: zod.string().or(zod.null()).optional(),
      type: zod.string().default(getV1GetCredentialResponseTypeDefaultTwo),
      username: zod.string(),
      password: zod.string(),
    }),
  )
  .or(
    zod.object({
      id: zod.string().optional(),
      provider: zod.string(),
      title: zod.string().or(zod.null()).optional(),
      type: zod.string().default(getV1GetCredentialResponseTypeDefaultThree),
      host: zod
        .string()
        .describe("The host/URI pattern to match against request URLs"),
      headers: zod
        .record(zod.string(), zod.string())
        .optional()
        .describe("Key-value header map to add to matching requests"),
    }),
  );

/**
 * @summary Delete Credentials
 */
export const deleteV1DeleteCredentialsParams = zod.object({
  provider: zod.enum([
    "aiml_api",
    "anthropic",
    "apollo",
    "compass",
    "discord",
    "d_id",
    "e2b",
    "exa",
    "fal",
    "generic_webhook",
    "github",
    "google",
    "google_maps",
    "groq",
    "http",
    "hubspot",
    "ideogram",
    "jina",
    "linear",
    "llama_api",
    "medium",
    "mem0",
    "notion",
    "nvidia",
    "ollama",
    "openai",
    "openweathermap",
    "open_router",
    "pinecone",
    "reddit",
    "replicate",
    "revid",
    "screenshotone",
    "slant3d",
    "smartlead",
    "smtp",
    "twitter",
    "todoist",
    "unreal_speech",
    "zerobounce",
  ]),
  cred_id: zod.string(),
});

export const deleteV1DeleteCredentialsQueryForceDefault = false;

export const deleteV1DeleteCredentialsQueryParams = zod.object({
  force: zod.boolean().optional(),
});

export const deleteV1DeleteCredentialsResponseDeletedDefault = true;
export const deleteV1DeleteCredentialsResponseDeletedDefaultOne = false;
export const deleteV1DeleteCredentialsResponseNeedConfirmationDefault = true;

export const deleteV1DeleteCredentialsResponse = zod
  .object({
    deleted: zod
      .boolean()
      .default(deleteV1DeleteCredentialsResponseDeletedDefault),
    revoked: zod
      .boolean()
      .or(zod.null())
      .describe(
        "Indicates whether the credentials were also revoked by their provider. `None`/`null` if not applicable, e.g. when deleting non-revocable credentials such as API keys.",
      ),
  })
  .or(
    zod.object({
      deleted: zod.boolean().optional(),
      need_confirmation: zod
        .boolean()
        .default(deleteV1DeleteCredentialsResponseNeedConfirmationDefault),
      message: zod.string(),
    }),
  );

/**
 * @summary Webhook Ingress Generic
 */
export const postV1WebhookIngressGenericParams = zod.object({
  provider: zod.enum([
    "aiml_api",
    "anthropic",
    "apollo",
    "compass",
    "discord",
    "d_id",
    "e2b",
    "exa",
    "fal",
    "generic_webhook",
    "github",
    "google",
    "google_maps",
    "groq",
    "http",
    "hubspot",
    "ideogram",
    "jina",
    "linear",
    "llama_api",
    "medium",
    "mem0",
    "notion",
    "nvidia",
    "ollama",
    "openai",
    "openweathermap",
    "open_router",
    "pinecone",
    "reddit",
    "replicate",
    "revid",
    "screenshotone",
    "slant3d",
    "smartlead",
    "smtp",
    "twitter",
    "todoist",
    "unreal_speech",
    "zerobounce",
  ]),
  webhook_id: zod.string(),
});

export const postV1WebhookIngressGenericResponse = zod.any();

/**
 * @summary Webhook Ping
 */
export const postV1WebhookPingParams = zod.object({
  webhook_id: zod.string(),
});

export const postV1WebhookPingResponse = zod.any();
