/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * AutoGPT Agent Server
 * This server is used to execute agents that are created by the AutoGPT system.
 * OpenAPI spec version: 0.1
 */
import { z as zod } from "zod";

/**
 * Get all agents in the user's library (both created and saved).

Args:
    user_id: ID of the authenticated user.
    search_term: Optional search term to filter agents by name/description.
    filter_by: List of filters to apply (favorites, created by user).
    sort_by: List of sorting criteria (created date, updated date).
    page: Page number to retrieve.
    page_size: Number of agents per page.

Returns:
    A LibraryAgentResponse containing agents and pagination metadata.

Raises:
    HTTPException: If a server/database error occurs.
 * @summary List Library Agents
 */
export const getV2ListLibraryAgentsQueryPageDefault = 1;
export const getV2ListLibraryAgentsQueryPageSizeDefault = 15;

export const getV2ListLibraryAgentsQueryParams = zod.object({
  search_term: zod
    .string()
    .or(zod.null())
    .optional()
    .describe("Search term to filter agents"),
  sort_by: zod
    .enum(["createdAt", "updatedAt"])
    .optional()
    .describe("Criteria to sort results by"),
  page: zod
    .number()
    .min(1)
    .default(getV2ListLibraryAgentsQueryPageDefault)
    .describe("Page number to retrieve (must be >= 1)"),
  page_size: zod
    .number()
    .min(1)
    .default(getV2ListLibraryAgentsQueryPageSizeDefault)
    .describe("Number of agents per page (must be >= 1)"),
});

export const getV2ListLibraryAgentsResponse = zod
  .object({
    agents: zod.array(
      zod
        .object({
          id: zod.string(),
          graph_id: zod.string(),
          graph_version: zod.number(),
          image_url: zod.string().or(zod.null()),
          creator_name: zod.string(),
          creator_image_url: zod.string(),
          status: zod.enum(["COMPLETED", "HEALTHY", "WAITING", "ERROR"]),
          updated_at: zod.string().datetime({}),
          name: zod.string(),
          description: zod.string(),
          input_schema: zod.record(zod.string(), zod.any()),
          credentials_input_schema: zod
            .record(zod.string(), zod.any())
            .describe("Input schema for credentials required by the agent"),
          has_external_trigger: zod
            .boolean()
            .describe(
              "Whether the agent has an external trigger (e.g. webhook) node",
            ),
          trigger_setup_info: zod
            .object({
              provider: zod.enum([
                "aiml_api",
                "anthropic",
                "apollo",
                "compass",
                "discord",
                "d_id",
                "e2b",
                "exa",
                "fal",
                "generic_webhook",
                "github",
                "google",
                "google_maps",
                "groq",
                "http",
                "hubspot",
                "ideogram",
                "jina",
                "linear",
                "llama_api",
                "medium",
                "mem0",
                "notion",
                "nvidia",
                "ollama",
                "openai",
                "openweathermap",
                "open_router",
                "pinecone",
                "reddit",
                "replicate",
                "revid",
                "screenshotone",
                "slant3d",
                "smartlead",
                "smtp",
                "twitter",
                "todoist",
                "unreal_speech",
                "zerobounce",
              ]),
              config_schema: zod
                .record(zod.string(), zod.any())
                .describe("Input schema for the trigger block"),
              credentials_input_name: zod.string().or(zod.null()),
            })
            .or(zod.null())
            .optional(),
          new_output: zod.boolean(),
          can_access_graph: zod.boolean(),
          is_latest_version: zod.boolean(),
        })
        .describe(
          "Represents an agent in the library, including metadata for display and\nuser interaction within the system.",
        ),
    ),
    pagination: zod.object({
      total_items: zod.number().describe("Total number of items."),
      total_pages: zod.number().describe("Total number of pages."),
      current_page: zod.number().describe("Current_page page number."),
      page_size: zod.number().describe("Number of items per page."),
    }),
  })
  .describe(
    "Response schema for a list of library agents and pagination info.",
  );

/**
 * Add an agent from the marketplace to the user's library.

Args:
    store_listing_version_id: ID of the store listing version to add.
    user_id: ID of the authenticated user.

Returns:
    library_model.LibraryAgent: Agent added to the library

Raises:
    HTTPException(404): If the listing version is not found.
    HTTPException(500): If a server/database error occurs.
 * @summary Add Marketplace Agent
 */
export const postV2AddMarketplaceAgentBody = zod.object({
  store_listing_version_id: zod.string(),
});

/**
 * @summary Get Library Agent
 */
export const getV2GetLibraryAgentParams = zod.object({
  library_agent_id: zod.string(),
});

export const getV2GetLibraryAgentResponse = zod
  .object({
    id: zod.string(),
    graph_id: zod.string(),
    graph_version: zod.number(),
    image_url: zod.string().or(zod.null()),
    creator_name: zod.string(),
    creator_image_url: zod.string(),
    status: zod.enum(["COMPLETED", "HEALTHY", "WAITING", "ERROR"]),
    updated_at: zod.string().datetime({}),
    name: zod.string(),
    description: zod.string(),
    input_schema: zod.record(zod.string(), zod.any()),
    credentials_input_schema: zod
      .record(zod.string(), zod.any())
      .describe("Input schema for credentials required by the agent"),
    has_external_trigger: zod
      .boolean()
      .describe(
        "Whether the agent has an external trigger (e.g. webhook) node",
      ),
    trigger_setup_info: zod
      .object({
        provider: zod.enum([
          "aiml_api",
          "anthropic",
          "apollo",
          "compass",
          "discord",
          "d_id",
          "e2b",
          "exa",
          "fal",
          "generic_webhook",
          "github",
          "google",
          "google_maps",
          "groq",
          "http",
          "hubspot",
          "ideogram",
          "jina",
          "linear",
          "llama_api",
          "medium",
          "mem0",
          "notion",
          "nvidia",
          "ollama",
          "openai",
          "openweathermap",
          "open_router",
          "pinecone",
          "reddit",
          "replicate",
          "revid",
          "screenshotone",
          "slant3d",
          "smartlead",
          "smtp",
          "twitter",
          "todoist",
          "unreal_speech",
          "zerobounce",
        ]),
        config_schema: zod
          .record(zod.string(), zod.any())
          .describe("Input schema for the trigger block"),
        credentials_input_name: zod.string().or(zod.null()),
      })
      .or(zod.null())
      .optional(),
    new_output: zod.boolean(),
    can_access_graph: zod.boolean(),
    is_latest_version: zod.boolean(),
  })
  .describe(
    "Represents an agent in the library, including metadata for display and\nuser interaction within the system.",
  );

/**
 * Update the library agent with the given fields.

Args:
    library_agent_id: ID of the library agent to update.
    payload: Fields to update (auto_update_version, is_favorite, etc.).
    user_id: ID of the authenticated user.

Raises:
    HTTPException(500): If a server/database error occurs.
 * @summary Update Library Agent
 */
export const patchV2UpdateLibraryAgentParams = zod.object({
  library_agent_id: zod.string(),
});

export const patchV2UpdateLibraryAgentBody = zod
  .object({
    auto_update_version: zod
      .boolean()
      .or(zod.null())
      .optional()
      .describe("Auto-update the agent version"),
    is_favorite: zod
      .boolean()
      .or(zod.null())
      .optional()
      .describe("Mark the agent as a favorite"),
    is_archived: zod
      .boolean()
      .or(zod.null())
      .optional()
      .describe("Archive the agent"),
  })
  .describe(
    "Schema for updating a library agent via PUT.\n\nIncludes flags for auto-updating version, marking as favorite,\narchiving, or deleting.",
  );

export const patchV2UpdateLibraryAgentResponse = zod
  .object({
    id: zod.string(),
    graph_id: zod.string(),
    graph_version: zod.number(),
    image_url: zod.string().or(zod.null()),
    creator_name: zod.string(),
    creator_image_url: zod.string(),
    status: zod.enum(["COMPLETED", "HEALTHY", "WAITING", "ERROR"]),
    updated_at: zod.string().datetime({}),
    name: zod.string(),
    description: zod.string(),
    input_schema: zod.record(zod.string(), zod.any()),
    credentials_input_schema: zod
      .record(zod.string(), zod.any())
      .describe("Input schema for credentials required by the agent"),
    has_external_trigger: zod
      .boolean()
      .describe(
        "Whether the agent has an external trigger (e.g. webhook) node",
      ),
    trigger_setup_info: zod
      .object({
        provider: zod.enum([
          "aiml_api",
          "anthropic",
          "apollo",
          "compass",
          "discord",
          "d_id",
          "e2b",
          "exa",
          "fal",
          "generic_webhook",
          "github",
          "google",
          "google_maps",
          "groq",
          "http",
          "hubspot",
          "ideogram",
          "jina",
          "linear",
          "llama_api",
          "medium",
          "mem0",
          "notion",
          "nvidia",
          "ollama",
          "openai",
          "openweathermap",
          "open_router",
          "pinecone",
          "reddit",
          "replicate",
          "revid",
          "screenshotone",
          "slant3d",
          "smartlead",
          "smtp",
          "twitter",
          "todoist",
          "unreal_speech",
          "zerobounce",
        ]),
        config_schema: zod
          .record(zod.string(), zod.any())
          .describe("Input schema for the trigger block"),
        credentials_input_name: zod.string().or(zod.null()),
      })
      .or(zod.null())
      .optional(),
    new_output: zod.boolean(),
    can_access_graph: zod.boolean(),
    is_latest_version: zod.boolean(),
  })
  .describe(
    "Represents an agent in the library, including metadata for display and\nuser interaction within the system.",
  );

/**
 * Soft-delete the specified library agent.

Args:
    library_agent_id: ID of the library agent to delete.
    user_id: ID of the authenticated user.

Returns:
    204 No Content if successful.

Raises:
    HTTPException(404): If the agent does not exist.
    HTTPException(500): If a server/database error occurs.
 * @summary Delete Library Agent
 */
export const deleteV2DeleteLibraryAgentParams = zod.object({
  library_agent_id: zod.string(),
});

export const deleteV2DeleteLibraryAgentResponse = zod.any();

/**
 * @summary Get Library Agent By Graph Id
 */
export const getV2GetLibraryAgentByGraphIdParams = zod.object({
  graph_id: zod.string(),
});

export const getV2GetLibraryAgentByGraphIdQueryParams = zod.object({
  version: zod.number().or(zod.null()).optional(),
});

export const getV2GetLibraryAgentByGraphIdResponse = zod
  .object({
    id: zod.string(),
    graph_id: zod.string(),
    graph_version: zod.number(),
    image_url: zod.string().or(zod.null()),
    creator_name: zod.string(),
    creator_image_url: zod.string(),
    status: zod.enum(["COMPLETED", "HEALTHY", "WAITING", "ERROR"]),
    updated_at: zod.string().datetime({}),
    name: zod.string(),
    description: zod.string(),
    input_schema: zod.record(zod.string(), zod.any()),
    credentials_input_schema: zod
      .record(zod.string(), zod.any())
      .describe("Input schema for credentials required by the agent"),
    has_external_trigger: zod
      .boolean()
      .describe(
        "Whether the agent has an external trigger (e.g. webhook) node",
      ),
    trigger_setup_info: zod
      .object({
        provider: zod.enum([
          "aiml_api",
          "anthropic",
          "apollo",
          "compass",
          "discord",
          "d_id",
          "e2b",
          "exa",
          "fal",
          "generic_webhook",
          "github",
          "google",
          "google_maps",
          "groq",
          "http",
          "hubspot",
          "ideogram",
          "jina",
          "linear",
          "llama_api",
          "medium",
          "mem0",
          "notion",
          "nvidia",
          "ollama",
          "openai",
          "openweathermap",
          "open_router",
          "pinecone",
          "reddit",
          "replicate",
          "revid",
          "screenshotone",
          "slant3d",
          "smartlead",
          "smtp",
          "twitter",
          "todoist",
          "unreal_speech",
          "zerobounce",
        ]),
        config_schema: zod
          .record(zod.string(), zod.any())
          .describe("Input schema for the trigger block"),
        credentials_input_name: zod.string().or(zod.null()),
      })
      .or(zod.null())
      .optional(),
    new_output: zod.boolean(),
    can_access_graph: zod.boolean(),
    is_latest_version: zod.boolean(),
  })
  .describe(
    "Represents an agent in the library, including metadata for display and\nuser interaction within the system.",
  );

/**
 * Get Library Agent from Store Listing Version ID.
 * @summary Get Agent By Store ID
 */
export const getV2GetAgentByStoreIdParams = zod.object({
  store_listing_version_id: zod.string(),
});

export const getV2GetAgentByStoreIdResponse = zod
  .object({
    id: zod.string(),
    graph_id: zod.string(),
    graph_version: zod.number(),
    image_url: zod.string().or(zod.null()),
    creator_name: zod.string(),
    creator_image_url: zod.string(),
    status: zod.enum(["COMPLETED", "HEALTHY", "WAITING", "ERROR"]),
    updated_at: zod.string().datetime({}),
    name: zod.string(),
    description: zod.string(),
    input_schema: zod.record(zod.string(), zod.any()),
    credentials_input_schema: zod
      .record(zod.string(), zod.any())
      .describe("Input schema for credentials required by the agent"),
    has_external_trigger: zod
      .boolean()
      .describe(
        "Whether the agent has an external trigger (e.g. webhook) node",
      ),
    trigger_setup_info: zod
      .object({
        provider: zod.enum([
          "aiml_api",
          "anthropic",
          "apollo",
          "compass",
          "discord",
          "d_id",
          "e2b",
          "exa",
          "fal",
          "generic_webhook",
          "github",
          "google",
          "google_maps",
          "groq",
          "http",
          "hubspot",
          "ideogram",
          "jina",
          "linear",
          "llama_api",
          "medium",
          "mem0",
          "notion",
          "nvidia",
          "ollama",
          "openai",
          "openweathermap",
          "open_router",
          "pinecone",
          "reddit",
          "replicate",
          "revid",
          "screenshotone",
          "slant3d",
          "smartlead",
          "smtp",
          "twitter",
          "todoist",
          "unreal_speech",
          "zerobounce",
        ]),
        config_schema: zod
          .record(zod.string(), zod.any())
          .describe("Input schema for the trigger block"),
        credentials_input_name: zod.string().or(zod.null()),
      })
      .or(zod.null())
      .optional(),
    new_output: zod.boolean(),
    can_access_graph: zod.boolean(),
    is_latest_version: zod.boolean(),
  })
  .describe(
    "Represents an agent in the library, including metadata for display and\nuser interaction within the system.",
  )
  .or(zod.null());

/**
 * @summary Fork Library Agent
 */
export const postV2ForkLibraryAgentParams = zod.object({
  library_agent_id: zod.string(),
});

export const postV2ForkLibraryAgentResponse = zod
  .object({
    id: zod.string(),
    graph_id: zod.string(),
    graph_version: zod.number(),
    image_url: zod.string().or(zod.null()),
    creator_name: zod.string(),
    creator_image_url: zod.string(),
    status: zod.enum(["COMPLETED", "HEALTHY", "WAITING", "ERROR"]),
    updated_at: zod.string().datetime({}),
    name: zod.string(),
    description: zod.string(),
    input_schema: zod.record(zod.string(), zod.any()),
    credentials_input_schema: zod
      .record(zod.string(), zod.any())
      .describe("Input schema for credentials required by the agent"),
    has_external_trigger: zod
      .boolean()
      .describe(
        "Whether the agent has an external trigger (e.g. webhook) node",
      ),
    trigger_setup_info: zod
      .object({
        provider: zod.enum([
          "aiml_api",
          "anthropic",
          "apollo",
          "compass",
          "discord",
          "d_id",
          "e2b",
          "exa",
          "fal",
          "generic_webhook",
          "github",
          "google",
          "google_maps",
          "groq",
          "http",
          "hubspot",
          "ideogram",
          "jina",
          "linear",
          "llama_api",
          "medium",
          "mem0",
          "notion",
          "nvidia",
          "ollama",
          "openai",
          "openweathermap",
          "open_router",
          "pinecone",
          "reddit",
          "replicate",
          "revid",
          "screenshotone",
          "slant3d",
          "smartlead",
          "smtp",
          "twitter",
          "todoist",
          "unreal_speech",
          "zerobounce",
        ]),
        config_schema: zod
          .record(zod.string(), zod.any())
          .describe("Input schema for the trigger block"),
        credentials_input_name: zod.string().or(zod.null()),
      })
      .or(zod.null())
      .optional(),
    new_output: zod.boolean(),
    can_access_graph: zod.boolean(),
    is_latest_version: zod.boolean(),
  })
  .describe(
    "Represents an agent in the library, including metadata for display and\nuser interaction within the system.",
  );

/**
 * Sets up a webhook-triggered `LibraryAgentPreset` for a `LibraryAgent`.
Returns the correspondingly created `LibraryAgentPreset` with `webhook_id` set.
 * @summary Setup Trigger
 */
export const postV2SetupTriggerParams = zod.object({
  library_agent_id: zod.string().describe("ID of the library agent"),
});

export const postV2SetupTriggerBodyDescriptionDefault = "";

export const postV2SetupTriggerBody = zod.object({
  name: zod.string(),
  description: zod.string().optional(),
  trigger_config: zod.record(zod.string(), zod.any()),
  agent_credentials: zod
    .record(
      zod.string(),
      zod.object({
        id: zod.string(),
        title: zod.string().or(zod.null()).optional(),
        provider: zod.enum([
          "aiml_api",
          "anthropic",
          "apollo",
          "compass",
          "discord",
          "d_id",
          "e2b",
          "exa",
          "fal",
          "generic_webhook",
          "github",
          "google",
          "google_maps",
          "groq",
          "http",
          "hubspot",
          "ideogram",
          "jina",
          "linear",
          "llama_api",
          "medium",
          "mem0",
          "notion",
          "nvidia",
          "ollama",
          "openai",
          "openweathermap",
          "open_router",
          "pinecone",
          "reddit",
          "replicate",
          "revid",
          "screenshotone",
          "slant3d",
          "smartlead",
          "smtp",
          "twitter",
          "todoist",
          "unreal_speech",
          "zerobounce",
        ]),
        type: zod.enum(["api_key", "oauth2", "user_password", "host_scoped"]),
      }),
    )
    .optional(),
});

export const postV2SetupTriggerResponseIsActiveDefault = true;

export const postV2SetupTriggerResponse = zod
  .object({
    graph_id: zod.string(),
    graph_version: zod.number(),
    inputs: zod.record(zod.string(), zod.any()),
    credentials: zod.record(
      zod.string(),
      zod.object({
        id: zod.string(),
        title: zod.string().or(zod.null()).optional(),
        provider: zod.enum([
          "aiml_api",
          "anthropic",
          "apollo",
          "compass",
          "discord",
          "d_id",
          "e2b",
          "exa",
          "fal",
          "generic_webhook",
          "github",
          "google",
          "google_maps",
          "groq",
          "http",
          "hubspot",
          "ideogram",
          "jina",
          "linear",
          "llama_api",
          "medium",
          "mem0",
          "notion",
          "nvidia",
          "ollama",
          "openai",
          "openweathermap",
          "open_router",
          "pinecone",
          "reddit",
          "replicate",
          "revid",
          "screenshotone",
          "slant3d",
          "smartlead",
          "smtp",
          "twitter",
          "todoist",
          "unreal_speech",
          "zerobounce",
        ]),
        type: zod.enum(["api_key", "oauth2", "user_password", "host_scoped"]),
      }),
    ),
    name: zod.string(),
    description: zod.string(),
    is_active: zod.boolean().default(postV2SetupTriggerResponseIsActiveDefault),
    webhook_id: zod.string().or(zod.null()).optional(),
    id: zod.string(),
    user_id: zod.string(),
    updated_at: zod.string().datetime({}),
  })
  .describe("Represents a preset configuration for a library agent.");
