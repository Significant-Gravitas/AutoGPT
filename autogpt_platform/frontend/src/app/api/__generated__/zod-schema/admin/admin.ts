/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * AutoGPT Agent Server
 * This server is used to execute agents that are created by the AutoGPT system.
 * OpenAPI spec version: 0.1
 */
import { z as zod } from "zod";

/**
 * Get store listings with their version history for admins.

This provides a consolidated view of listings with their versions,
allowing for an expandable UI in the admin dashboard.

Args:
    status: Filter by submission status (PENDING, APPROVED, REJECTED)
    search: Search by name, description, or user email
    page: Page number for pagination
    page_size: Number of items per page

Returns:
    StoreListingsWithVersionsResponse with listings and their versions
 * @summary Get Admin Listings History
 */
export const getV2GetAdminListingsHistoryQueryPageDefault = 1;
export const getV2GetAdminListingsHistoryQueryPageSizeDefault = 20;

export const getV2GetAdminListingsHistoryQueryParams = zod.object({
  status: zod
    .enum(["DRAFT", "PENDING", "APPROVED", "REJECTED"])
    .or(zod.null())
    .optional(),
  search: zod.string().or(zod.null()).optional(),
  page: zod.number().default(getV2GetAdminListingsHistoryQueryPageDefault),
  page_size: zod
    .number()
    .default(getV2GetAdminListingsHistoryQueryPageSizeDefault),
});

export const getV2GetAdminListingsHistoryResponseListingsItemHasApprovedVersionDefault = false;
export const getV2GetAdminListingsHistoryResponseListingsItemVersionsDefault =
  [];

export const getV2GetAdminListingsHistoryResponse = zod
  .object({
    listings: zod.array(
      zod
        .object({
          listing_id: zod.string(),
          slug: zod.string(),
          agent_id: zod.string(),
          agent_version: zod.number(),
          active_version_id: zod.string().or(zod.null()).optional(),
          has_approved_version: zod.boolean().optional(),
          creator_email: zod.string().or(zod.null()).optional(),
          latest_version: zod
            .object({
              agent_id: zod.string(),
              agent_version: zod.number(),
              name: zod.string(),
              sub_heading: zod.string(),
              slug: zod.string(),
              description: zod.string(),
              image_urls: zod.array(zod.string()),
              date_submitted: zod.string().datetime({}),
              status: zod.enum(["DRAFT", "PENDING", "APPROVED", "REJECTED"]),
              runs: zod.number(),
              rating: zod.number(),
              store_listing_version_id: zod.string().or(zod.null()).optional(),
              version: zod.number().or(zod.null()).optional(),
              reviewer_id: zod.string().or(zod.null()).optional(),
              review_comments: zod.string().or(zod.null()).optional(),
              internal_comments: zod.string().or(zod.null()).optional(),
              reviewed_at: zod.string().datetime({}).or(zod.null()).optional(),
              changes_summary: zod.string().or(zod.null()).optional(),
            })
            .or(zod.null())
            .optional(),
          versions: zod
            .array(
              zod.object({
                agent_id: zod.string(),
                agent_version: zod.number(),
                name: zod.string(),
                sub_heading: zod.string(),
                slug: zod.string(),
                description: zod.string(),
                image_urls: zod.array(zod.string()),
                date_submitted: zod.string().datetime({}),
                status: zod.enum(["DRAFT", "PENDING", "APPROVED", "REJECTED"]),
                runs: zod.number(),
                rating: zod.number(),
                store_listing_version_id: zod
                  .string()
                  .or(zod.null())
                  .optional(),
                version: zod.number().or(zod.null()).optional(),
                reviewer_id: zod.string().or(zod.null()).optional(),
                review_comments: zod.string().or(zod.null()).optional(),
                internal_comments: zod.string().or(zod.null()).optional(),
                reviewed_at: zod
                  .string()
                  .datetime({})
                  .or(zod.null())
                  .optional(),
                changes_summary: zod.string().or(zod.null()).optional(),
              }),
            )
            .default(
              getV2GetAdminListingsHistoryResponseListingsItemVersionsDefault,
            ),
        })
        .describe("A store listing with its version history"),
    ),
    pagination: zod.object({
      total_items: zod.number().describe("Total number of items."),
      total_pages: zod.number().describe("Total number of pages."),
      current_page: zod.number().describe("Current_page page number."),
      page_size: zod.number().describe("Number of items per page."),
    }),
  })
  .describe("Response model for listings with version history");

/**
 * Review a store listing submission.

Args:
    store_listing_version_id: ID of the submission to review
    request: Review details including approval status and comments
    user: Authenticated admin user performing the review

Returns:
    StoreSubmission with updated review information
 * @summary Review Store Submission
 */
export const postV2ReviewStoreSubmissionParams = zod.object({
  store_listing_version_id: zod.string(),
});

export const postV2ReviewStoreSubmissionBody = zod.object({
  store_listing_version_id: zod.string(),
  is_approved: zod.boolean(),
  comments: zod.string(),
  internal_comments: zod.string().or(zod.null()).optional(),
});

export const postV2ReviewStoreSubmissionResponse = zod.object({
  agent_id: zod.string(),
  agent_version: zod.number(),
  name: zod.string(),
  sub_heading: zod.string(),
  slug: zod.string(),
  description: zod.string(),
  image_urls: zod.array(zod.string()),
  date_submitted: zod.string().datetime({}),
  status: zod.enum(["DRAFT", "PENDING", "APPROVED", "REJECTED"]),
  runs: zod.number(),
  rating: zod.number(),
  store_listing_version_id: zod.string().or(zod.null()).optional(),
  version: zod.number().or(zod.null()).optional(),
  reviewer_id: zod.string().or(zod.null()).optional(),
  review_comments: zod.string().or(zod.null()).optional(),
  internal_comments: zod.string().or(zod.null()).optional(),
  reviewed_at: zod.string().datetime({}).or(zod.null()).optional(),
  changes_summary: zod.string().or(zod.null()).optional(),
});

/**
 * Download the agent file by streaming its content.

Args:
    store_listing_version_id (str): The ID of the agent to download

Returns:
    StreamingResponse: A streaming response containing the agent's graph data.

Raises:
    HTTPException: If the agent is not found or an unexpected error occurs.
 * @summary Admin Download Agent File
 */
export const getV2AdminDownloadAgentFileParams = zod.object({
  store_listing_version_id: zod
    .string()
    .describe("The ID of the agent to download"),
});

export const getV2AdminDownloadAgentFileResponse = zod.any();

/**
 * @summary Add Credits to User
 */
export const postV2AddCreditsToUserBody = zod.object({
  user_id: zod.string(),
  amount: zod.number(),
  comments: zod.string(),
});

export const postV2AddCreditsToUserResponse = zod.object({
  new_balance: zod.number(),
  transaction_key: zod.string(),
});

/**
 * @summary Get All Users History
 */
export const getV2GetAllUsersHistoryQueryPageDefault = 1;
export const getV2GetAllUsersHistoryQueryPageSizeDefault = 20;

export const getV2GetAllUsersHistoryQueryParams = zod.object({
  search: zod.string().or(zod.null()).optional(),
  page: zod.number().default(getV2GetAllUsersHistoryQueryPageDefault),
  page_size: zod.number().default(getV2GetAllUsersHistoryQueryPageSizeDefault),
  transaction_filter: zod
    .enum(["TOP_UP", "USAGE", "GRANT", "REFUND", "CARD_CHECK"])
    .or(zod.null())
    .optional(),
});

export const getV2GetAllUsersHistoryResponseHistoryItemTransactionKeyDefault =
  "";
export const getV2GetAllUsersHistoryResponseHistoryItemTransactionTimeDefault =
  "0001-01-01T00:00:00Z";
export const getV2GetAllUsersHistoryResponseHistoryItemAmountDefault = 0;
export const getV2GetAllUsersHistoryResponseHistoryItemRunningBalanceDefault = 0;
export const getV2GetAllUsersHistoryResponseHistoryItemCurrentBalanceDefault = 0;
export const getV2GetAllUsersHistoryResponseHistoryItemUsageNodeCountDefault = 0;
export const getV2GetAllUsersHistoryResponseHistoryItemUsageStartTimeDefault =
  "9999-12-31T23:59:59.999999Z";

export const getV2GetAllUsersHistoryResponse = zod
  .object({
    history: zod.array(
      zod.object({
        transaction_key: zod.string().optional(),
        transaction_time: zod
          .string()
          .datetime({})
          .default(
            getV2GetAllUsersHistoryResponseHistoryItemTransactionTimeDefault,
          ),
        transaction_type: zod
          .enum(["TOP_UP", "USAGE", "GRANT", "REFUND", "CARD_CHECK"])
          .optional(),
        amount: zod.number().optional(),
        running_balance: zod.number().optional(),
        current_balance: zod.number().optional(),
        description: zod.string().or(zod.null()).optional(),
        usage_graph_id: zod.string().or(zod.null()).optional(),
        usage_execution_id: zod.string().or(zod.null()).optional(),
        usage_node_count: zod.number().optional(),
        usage_start_time: zod
          .string()
          .datetime({})
          .default(
            getV2GetAllUsersHistoryResponseHistoryItemUsageStartTimeDefault,
          ),
        user_id: zod.string(),
        user_email: zod.string().or(zod.null()).optional(),
        reason: zod.string().or(zod.null()).optional(),
        admin_email: zod.string().or(zod.null()).optional(),
        extra_data: zod.string().or(zod.null()).optional(),
      }),
    ),
    pagination: zod.object({
      total_items: zod.number().describe("Total number of items."),
      total_pages: zod.number().describe("Total number of pages."),
      current_page: zod.number().describe("Current_page page number."),
      page_size: zod.number().describe("Number of items per page."),
    }),
  })
  .describe("Response model for listings with version history");
