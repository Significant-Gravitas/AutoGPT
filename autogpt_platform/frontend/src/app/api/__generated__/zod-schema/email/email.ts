/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * AutoGPT Agent Server
 * This server is used to execute agents that are created by the AutoGPT system.
 * OpenAPI spec version: 0.1
 */
import { z as zod } from "zod";

/**
 * @summary One Click Email Unsubscribe
 */
export const postV1OneClickEmailUnsubscribeQueryParams = zod.object({
  token: zod.string(),
});

export const postV1OneClickEmailUnsubscribeResponse = zod.any();

/**
 * @summary Handle Postmark Email Webhooks
 */
export const postV1HandlePostmarkEmailWebhooksBodyRecordTypeDefault =
  "Delivery";
export const postV1HandlePostmarkEmailWebhooksBodyRecordTypeDefaultOne =
  "Bounce";
export const postV1HandlePostmarkEmailWebhooksBodyRecordTypeDefaultTwo =
  "SpamComplaint";
export const postV1HandlePostmarkEmailWebhooksBodyRecordTypeDefaultThree =
  "Open";
export const postV1HandlePostmarkEmailWebhooksBodyRecordTypeDefaultFour =
  "Click";
export const postV1HandlePostmarkEmailWebhooksBodyRecordTypeDefaultFive =
  "SubscriptionChange";

export const postV1HandlePostmarkEmailWebhooksBody = zod
  .object({
    RecordType: zod
      .string()
      .default(postV1HandlePostmarkEmailWebhooksBodyRecordTypeDefault),
    ServerID: zod.number(),
    MessageStream: zod.string(),
    MessageID: zod.string(),
    Recipient: zod.string(),
    Tag: zod.string(),
    DeliveredAt: zod.string(),
    Details: zod.string(),
    Metadata: zod.record(zod.string(), zod.string()),
  })
  .or(
    zod.object({
      RecordType: zod
        .string()
        .default(postV1HandlePostmarkEmailWebhooksBodyRecordTypeDefaultOne),
      ID: zod.number(),
      Type: zod.string(),
      TypeCode: zod
        .literal(1)
        .or(zod.literal(2))
        .or(zod.literal(16))
        .or(zod.literal(32))
        .or(zod.literal(64))
        .or(zod.literal(128))
        .or(zod.literal(256))
        .or(zod.literal(512))
        .or(zod.literal(1024))
        .or(zod.literal(2048))
        .or(zod.literal(4096))
        .or(zod.literal(8192))
        .or(zod.literal(16384))
        .or(zod.literal(100000))
        .or(zod.literal(100001))
        .or(zod.literal(100002))
        .or(zod.literal(100003))
        .or(zod.literal(100006))
        .or(zod.literal(100007))
        .or(zod.literal(100008))
        .or(zod.literal(100009))
        .or(zod.literal(100010)),
      Tag: zod.string(),
      MessageID: zod.string(),
      Details: zod.string(),
      Email: zod.string(),
      From: zod.string(),
      BouncedAt: zod.string(),
      Inactive: zod.boolean(),
      DumpAvailable: zod.boolean(),
      CanActivate: zod.boolean(),
      Subject: zod.string(),
      ServerID: zod.number(),
      MessageStream: zod.string(),
      Content: zod.string(),
      Name: zod.string(),
      Description: zod.string(),
      Metadata: zod.record(zod.string(), zod.string()),
    }),
  )
  .or(
    zod.object({
      RecordType: zod
        .string()
        .default(postV1HandlePostmarkEmailWebhooksBodyRecordTypeDefaultTwo),
      ID: zod.number(),
      Type: zod.string(),
      TypeCode: zod.number(),
      Tag: zod.string(),
      MessageID: zod.string(),
      Details: zod.string(),
      Email: zod.string(),
      From: zod.string(),
      BouncedAt: zod.string(),
      Inactive: zod.boolean(),
      DumpAvailable: zod.boolean(),
      CanActivate: zod.boolean(),
      Subject: zod.string(),
      ServerID: zod.number(),
      MessageStream: zod.string(),
      Content: zod.string(),
      Name: zod.string(),
      Description: zod.string(),
      Metadata: zod.record(zod.string(), zod.string()),
    }),
  )
  .or(
    zod.object({
      RecordType: zod
        .string()
        .default(postV1HandlePostmarkEmailWebhooksBodyRecordTypeDefaultThree),
      MessageStream: zod.string(),
      Metadata: zod.record(zod.string(), zod.string()),
      FirstOpen: zod.boolean(),
      Recipient: zod.string(),
      MessageID: zod.string(),
      ReceivedAt: zod.string(),
      Platform: zod.string(),
      ReadSeconds: zod.number(),
      Tag: zod.string(),
      UserAgent: zod.string(),
      OS: zod.record(zod.string(), zod.string()),
      Client: zod.record(zod.string(), zod.string()),
      Geo: zod.record(zod.string(), zod.string()),
    }),
  )
  .or(
    zod.object({
      RecordType: zod
        .string()
        .default(postV1HandlePostmarkEmailWebhooksBodyRecordTypeDefaultFour),
      MessageStream: zod.string(),
      Metadata: zod.record(zod.string(), zod.string()),
      Recipient: zod.string(),
      MessageID: zod.string(),
      ReceivedAt: zod.string(),
      Platform: zod.string(),
      ClickLocation: zod.string(),
      OriginalLink: zod.string(),
      Tag: zod.string(),
      UserAgent: zod.string(),
      OS: zod.record(zod.string(), zod.string()),
      Client: zod.record(zod.string(), zod.string()),
      Geo: zod.record(zod.string(), zod.string()),
    }),
  )
  .or(
    zod.object({
      RecordType: zod
        .string()
        .default(postV1HandlePostmarkEmailWebhooksBodyRecordTypeDefaultFive),
      MessageID: zod.string(),
      ServerID: zod.number(),
      MessageStream: zod.string(),
      ChangedAt: zod.string(),
      Recipient: zod.string(),
      Origin: zod.string(),
      SuppressSending: zod.boolean(),
      SuppressionReason: zod.string(),
      Tag: zod.string(),
      Metadata: zod.record(zod.string(), zod.string()),
    }),
  );

export const postV1HandlePostmarkEmailWebhooksResponse = zod.any();
