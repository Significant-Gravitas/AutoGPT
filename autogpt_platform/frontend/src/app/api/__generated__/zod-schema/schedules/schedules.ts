/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * AutoGPT Agent Server
 * This server is used to execute agents that are created by the AutoGPT system.
 * OpenAPI spec version: 0.1
 */
import { z as zod } from "zod";

/**
 * @summary Create execution schedule
 */
export const postV1CreateExecutionScheduleParams = zod.object({
  graph_id: zod.string().describe("ID of the graph to schedule"),
});

export const postV1CreateExecutionScheduleBody = zod.object({
  graph_version: zod.number().or(zod.null()).optional(),
  name: zod.string(),
  cron: zod.string(),
  inputs: zod.record(zod.string(), zod.any()),
  credentials: zod
    .record(
      zod.string(),
      zod.object({
        id: zod.string(),
        title: zod.string().or(zod.null()).optional(),
        provider: zod.enum([
          "aiml_api",
          "anthropic",
          "apollo",
          "compass",
          "discord",
          "d_id",
          "e2b",
          "exa",
          "fal",
          "generic_webhook",
          "github",
          "google",
          "google_maps",
          "groq",
          "http",
          "hubspot",
          "ideogram",
          "jina",
          "linear",
          "llama_api",
          "medium",
          "mem0",
          "notion",
          "nvidia",
          "ollama",
          "openai",
          "openweathermap",
          "open_router",
          "pinecone",
          "reddit",
          "replicate",
          "revid",
          "screenshotone",
          "slant3d",
          "smartlead",
          "smtp",
          "twitter",
          "todoist",
          "unreal_speech",
          "zerobounce",
        ]),
        type: zod.enum(["api_key", "oauth2", "user_password", "host_scoped"]),
      }),
    )
    .optional(),
});

export const postV1CreateExecutionScheduleResponse = zod.object({
  user_id: zod.string(),
  graph_id: zod.string(),
  graph_version: zod.number(),
  cron: zod.string(),
  input_data: zod.record(zod.string(), zod.any()),
  input_credentials: zod
    .record(
      zod.string(),
      zod.object({
        id: zod.string(),
        title: zod.string().or(zod.null()).optional(),
        provider: zod.enum([
          "aiml_api",
          "anthropic",
          "apollo",
          "compass",
          "discord",
          "d_id",
          "e2b",
          "exa",
          "fal",
          "generic_webhook",
          "github",
          "google",
          "google_maps",
          "groq",
          "http",
          "hubspot",
          "ideogram",
          "jina",
          "linear",
          "llama_api",
          "medium",
          "mem0",
          "notion",
          "nvidia",
          "ollama",
          "openai",
          "openweathermap",
          "open_router",
          "pinecone",
          "reddit",
          "replicate",
          "revid",
          "screenshotone",
          "slant3d",
          "smartlead",
          "smtp",
          "twitter",
          "todoist",
          "unreal_speech",
          "zerobounce",
        ]),
        type: zod.enum(["api_key", "oauth2", "user_password", "host_scoped"]),
      }),
    )
    .optional(),
  id: zod.string(),
  name: zod.string(),
  next_run_time: zod.string(),
});

/**
 * @summary List execution schedules for a graph
 */
export const getV1ListExecutionSchedulesForAGraphParams = zod.object({
  graph_id: zod.string(),
});

export const getV1ListExecutionSchedulesForAGraphResponseItem = zod.object({
  user_id: zod.string(),
  graph_id: zod.string(),
  graph_version: zod.number(),
  cron: zod.string(),
  input_data: zod.record(zod.string(), zod.any()),
  input_credentials: zod
    .record(
      zod.string(),
      zod.object({
        id: zod.string(),
        title: zod.string().or(zod.null()).optional(),
        provider: zod.enum([
          "aiml_api",
          "anthropic",
          "apollo",
          "compass",
          "discord",
          "d_id",
          "e2b",
          "exa",
          "fal",
          "generic_webhook",
          "github",
          "google",
          "google_maps",
          "groq",
          "http",
          "hubspot",
          "ideogram",
          "jina",
          "linear",
          "llama_api",
          "medium",
          "mem0",
          "notion",
          "nvidia",
          "ollama",
          "openai",
          "openweathermap",
          "open_router",
          "pinecone",
          "reddit",
          "replicate",
          "revid",
          "screenshotone",
          "slant3d",
          "smartlead",
          "smtp",
          "twitter",
          "todoist",
          "unreal_speech",
          "zerobounce",
        ]),
        type: zod.enum(["api_key", "oauth2", "user_password", "host_scoped"]),
      }),
    )
    .optional(),
  id: zod.string(),
  name: zod.string(),
  next_run_time: zod.string(),
});
export const getV1ListExecutionSchedulesForAGraphResponse = zod.array(
  getV1ListExecutionSchedulesForAGraphResponseItem,
);

/**
 * @summary List execution schedules for a user
 */
export const getV1ListExecutionSchedulesForAUserResponseItem = zod.object({
  user_id: zod.string(),
  graph_id: zod.string(),
  graph_version: zod.number(),
  cron: zod.string(),
  input_data: zod.record(zod.string(), zod.any()),
  input_credentials: zod
    .record(
      zod.string(),
      zod.object({
        id: zod.string(),
        title: zod.string().or(zod.null()).optional(),
        provider: zod.enum([
          "aiml_api",
          "anthropic",
          "apollo",
          "compass",
          "discord",
          "d_id",
          "e2b",
          "exa",
          "fal",
          "generic_webhook",
          "github",
          "google",
          "google_maps",
          "groq",
          "http",
          "hubspot",
          "ideogram",
          "jina",
          "linear",
          "llama_api",
          "medium",
          "mem0",
          "notion",
          "nvidia",
          "ollama",
          "openai",
          "openweathermap",
          "open_router",
          "pinecone",
          "reddit",
          "replicate",
          "revid",
          "screenshotone",
          "slant3d",
          "smartlead",
          "smtp",
          "twitter",
          "todoist",
          "unreal_speech",
          "zerobounce",
        ]),
        type: zod.enum(["api_key", "oauth2", "user_password", "host_scoped"]),
      }),
    )
    .optional(),
  id: zod.string(),
  name: zod.string(),
  next_run_time: zod.string(),
});
export const getV1ListExecutionSchedulesForAUserResponse = zod.array(
  getV1ListExecutionSchedulesForAUserResponseItem,
);

/**
 * @summary Delete execution schedule
 */
export const deleteV1DeleteExecutionScheduleParams = zod.object({
  schedule_id: zod.string().describe("ID of the schedule to delete"),
});

export const deleteV1DeleteExecutionScheduleResponse = zod.record(
  zod.string(),
  zod.any(),
);
