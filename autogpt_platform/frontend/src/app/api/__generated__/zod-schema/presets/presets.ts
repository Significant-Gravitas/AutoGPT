/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * AutoGPT Agent Server
 * This server is used to execute agents that are created by the AutoGPT system.
 * OpenAPI spec version: 0.1
 */
import { z as zod } from "zod";

/**
 * Retrieve a paginated list of presets for the current user.
 * @summary List presets
 */
export const getV2ListPresetsQueryPageDefault = 1;
export const getV2ListPresetsQueryPageSizeDefault = 10;

export const getV2ListPresetsQueryParams = zod.object({
  page: zod.number().min(1).default(getV2ListPresetsQueryPageDefault),
  page_size: zod.number().min(1).default(getV2ListPresetsQueryPageSizeDefault),
  graph_id: zod
    .string()
    .or(zod.null())
    .describe("Allows to filter presets by a specific agent graph"),
});

export const getV2ListPresetsResponsePresetsItemIsActiveDefault = true;

export const getV2ListPresetsResponse = zod
  .object({
    presets: zod.array(
      zod
        .object({
          graph_id: zod.string(),
          graph_version: zod.number(),
          inputs: zod.record(zod.string(), zod.any()),
          credentials: zod.record(
            zod.string(),
            zod.object({
              id: zod.string(),
              title: zod.string().or(zod.null()).optional(),
              provider: zod.enum([
                "aiml_api",
                "anthropic",
                "apollo",
                "compass",
                "discord",
                "d_id",
                "e2b",
                "exa",
                "fal",
                "generic_webhook",
                "github",
                "google",
                "google_maps",
                "groq",
                "http",
                "hubspot",
                "ideogram",
                "jina",
                "linear",
                "llama_api",
                "medium",
                "mem0",
                "notion",
                "nvidia",
                "ollama",
                "openai",
                "openweathermap",
                "open_router",
                "pinecone",
                "reddit",
                "replicate",
                "revid",
                "screenshotone",
                "slant3d",
                "smartlead",
                "smtp",
                "twitter",
                "todoist",
                "unreal_speech",
                "zerobounce",
              ]),
              type: zod.enum([
                "api_key",
                "oauth2",
                "user_password",
                "host_scoped",
              ]),
            }),
          ),
          name: zod.string(),
          description: zod.string(),
          is_active: zod
            .boolean()
            .default(getV2ListPresetsResponsePresetsItemIsActiveDefault),
          webhook_id: zod.string().or(zod.null()).optional(),
          id: zod.string(),
          user_id: zod.string(),
          updated_at: zod.string().datetime({}),
        })
        .describe("Represents a preset configuration for a library agent."),
    ),
    pagination: zod.object({
      total_items: zod.number().describe("Total number of items."),
      total_pages: zod.number().describe("Total number of pages."),
      current_page: zod.number().describe("Current_page page number."),
      page_size: zod.number().describe("Number of items per page."),
    }),
  })
  .describe("Response schema for a list of agent presets and pagination info.");

/**
 * Create a new preset for the current user.
 * @summary Create a new preset
 */
export const postV2CreateANewPresetBodyIsActiveDefault = true;
export const postV2CreateANewPresetBodyIsActiveDefaultOne = true;

export const postV2CreateANewPresetBody = zod
  .object({
    graph_id: zod.string(),
    graph_version: zod.number(),
    inputs: zod.record(zod.string(), zod.any()),
    credentials: zod.record(
      zod.string(),
      zod.object({
        id: zod.string(),
        title: zod.string().or(zod.null()).optional(),
        provider: zod.enum([
          "aiml_api",
          "anthropic",
          "apollo",
          "compass",
          "discord",
          "d_id",
          "e2b",
          "exa",
          "fal",
          "generic_webhook",
          "github",
          "google",
          "google_maps",
          "groq",
          "http",
          "hubspot",
          "ideogram",
          "jina",
          "linear",
          "llama_api",
          "medium",
          "mem0",
          "notion",
          "nvidia",
          "ollama",
          "openai",
          "openweathermap",
          "open_router",
          "pinecone",
          "reddit",
          "replicate",
          "revid",
          "screenshotone",
          "slant3d",
          "smartlead",
          "smtp",
          "twitter",
          "todoist",
          "unreal_speech",
          "zerobounce",
        ]),
        type: zod.enum(["api_key", "oauth2", "user_password", "host_scoped"]),
      }),
    ),
    name: zod.string(),
    description: zod.string(),
    is_active: zod.boolean().default(postV2CreateANewPresetBodyIsActiveDefault),
    webhook_id: zod.string().or(zod.null()).optional(),
  })
  .describe(
    "Request model used when creating a new preset for a library agent.",
  )
  .or(
    zod
      .object({
        graph_execution_id: zod.string(),
        name: zod.string(),
        description: zod.string(),
        is_active: zod
          .boolean()
          .default(postV2CreateANewPresetBodyIsActiveDefaultOne),
      })
      .describe(
        "Request model used when creating a new preset for a library agent.",
      ),
  );

export const postV2CreateANewPresetResponseIsActiveDefault = true;

export const postV2CreateANewPresetResponse = zod
  .object({
    graph_id: zod.string(),
    graph_version: zod.number(),
    inputs: zod.record(zod.string(), zod.any()),
    credentials: zod.record(
      zod.string(),
      zod.object({
        id: zod.string(),
        title: zod.string().or(zod.null()).optional(),
        provider: zod.enum([
          "aiml_api",
          "anthropic",
          "apollo",
          "compass",
          "discord",
          "d_id",
          "e2b",
          "exa",
          "fal",
          "generic_webhook",
          "github",
          "google",
          "google_maps",
          "groq",
          "http",
          "hubspot",
          "ideogram",
          "jina",
          "linear",
          "llama_api",
          "medium",
          "mem0",
          "notion",
          "nvidia",
          "ollama",
          "openai",
          "openweathermap",
          "open_router",
          "pinecone",
          "reddit",
          "replicate",
          "revid",
          "screenshotone",
          "slant3d",
          "smartlead",
          "smtp",
          "twitter",
          "todoist",
          "unreal_speech",
          "zerobounce",
        ]),
        type: zod.enum(["api_key", "oauth2", "user_password", "host_scoped"]),
      }),
    ),
    name: zod.string(),
    description: zod.string(),
    is_active: zod
      .boolean()
      .default(postV2CreateANewPresetResponseIsActiveDefault),
    webhook_id: zod.string().or(zod.null()).optional(),
    id: zod.string(),
    user_id: zod.string(),
    updated_at: zod.string().datetime({}),
  })
  .describe("Represents a preset configuration for a library agent.");

/**
 * Retrieve details for a specific preset by its ID.
 * @summary Get a specific preset
 */
export const getV2GetASpecificPresetParams = zod.object({
  preset_id: zod.string(),
});

export const getV2GetASpecificPresetResponseIsActiveDefault = true;

export const getV2GetASpecificPresetResponse = zod
  .object({
    graph_id: zod.string(),
    graph_version: zod.number(),
    inputs: zod.record(zod.string(), zod.any()),
    credentials: zod.record(
      zod.string(),
      zod.object({
        id: zod.string(),
        title: zod.string().or(zod.null()).optional(),
        provider: zod.enum([
          "aiml_api",
          "anthropic",
          "apollo",
          "compass",
          "discord",
          "d_id",
          "e2b",
          "exa",
          "fal",
          "generic_webhook",
          "github",
          "google",
          "google_maps",
          "groq",
          "http",
          "hubspot",
          "ideogram",
          "jina",
          "linear",
          "llama_api",
          "medium",
          "mem0",
          "notion",
          "nvidia",
          "ollama",
          "openai",
          "openweathermap",
          "open_router",
          "pinecone",
          "reddit",
          "replicate",
          "revid",
          "screenshotone",
          "slant3d",
          "smartlead",
          "smtp",
          "twitter",
          "todoist",
          "unreal_speech",
          "zerobounce",
        ]),
        type: zod.enum(["api_key", "oauth2", "user_password", "host_scoped"]),
      }),
    ),
    name: zod.string(),
    description: zod.string(),
    is_active: zod
      .boolean()
      .default(getV2GetASpecificPresetResponseIsActiveDefault),
    webhook_id: zod.string().or(zod.null()).optional(),
    id: zod.string(),
    user_id: zod.string(),
    updated_at: zod.string().datetime({}),
  })
  .describe("Represents a preset configuration for a library agent.");

/**
 * Update an existing preset by its ID.
 * @summary Update an existing preset
 */
export const patchV2UpdateAnExistingPresetParams = zod.object({
  preset_id: zod.string(),
});

export const patchV2UpdateAnExistingPresetBody = zod
  .object({
    inputs: zod.record(zod.string(), zod.any()).or(zod.null()).optional(),
    credentials: zod
      .record(
        zod.string(),
        zod.object({
          id: zod.string(),
          title: zod.string().or(zod.null()).optional(),
          provider: zod.enum([
            "aiml_api",
            "anthropic",
            "apollo",
            "compass",
            "discord",
            "d_id",
            "e2b",
            "exa",
            "fal",
            "generic_webhook",
            "github",
            "google",
            "google_maps",
            "groq",
            "http",
            "hubspot",
            "ideogram",
            "jina",
            "linear",
            "llama_api",
            "medium",
            "mem0",
            "notion",
            "nvidia",
            "ollama",
            "openai",
            "openweathermap",
            "open_router",
            "pinecone",
            "reddit",
            "replicate",
            "revid",
            "screenshotone",
            "slant3d",
            "smartlead",
            "smtp",
            "twitter",
            "todoist",
            "unreal_speech",
            "zerobounce",
          ]),
          type: zod.enum(["api_key", "oauth2", "user_password", "host_scoped"]),
        }),
      )
      .or(zod.null())
      .optional(),
    name: zod.string().or(zod.null()).optional(),
    description: zod.string().or(zod.null()).optional(),
    is_active: zod.boolean().or(zod.null()).optional(),
  })
  .describe("Request model used when updating a preset for a library agent.");

export const patchV2UpdateAnExistingPresetResponseIsActiveDefault = true;

export const patchV2UpdateAnExistingPresetResponse = zod
  .object({
    graph_id: zod.string(),
    graph_version: zod.number(),
    inputs: zod.record(zod.string(), zod.any()),
    credentials: zod.record(
      zod.string(),
      zod.object({
        id: zod.string(),
        title: zod.string().or(zod.null()).optional(),
        provider: zod.enum([
          "aiml_api",
          "anthropic",
          "apollo",
          "compass",
          "discord",
          "d_id",
          "e2b",
          "exa",
          "fal",
          "generic_webhook",
          "github",
          "google",
          "google_maps",
          "groq",
          "http",
          "hubspot",
          "ideogram",
          "jina",
          "linear",
          "llama_api",
          "medium",
          "mem0",
          "notion",
          "nvidia",
          "ollama",
          "openai",
          "openweathermap",
          "open_router",
          "pinecone",
          "reddit",
          "replicate",
          "revid",
          "screenshotone",
          "slant3d",
          "smartlead",
          "smtp",
          "twitter",
          "todoist",
          "unreal_speech",
          "zerobounce",
        ]),
        type: zod.enum(["api_key", "oauth2", "user_password", "host_scoped"]),
      }),
    ),
    name: zod.string(),
    description: zod.string(),
    is_active: zod
      .boolean()
      .default(patchV2UpdateAnExistingPresetResponseIsActiveDefault),
    webhook_id: zod.string().or(zod.null()).optional(),
    id: zod.string(),
    user_id: zod.string(),
    updated_at: zod.string().datetime({}),
  })
  .describe("Represents a preset configuration for a library agent.");

/**
 * Delete an existing preset by its ID.
 * @summary Delete a preset
 */
export const deleteV2DeleteAPresetParams = zod.object({
  preset_id: zod.string(),
});

/**
 * Execute a preset with the given graph and node input for the current user.
 * @summary Execute a preset
 */
export const postV2ExecuteAPresetParams = zod.object({
  preset_id: zod.string(),
});

export const postV2ExecuteAPresetBody = zod.object({
  inputs: zod.record(zod.string(), zod.any()).optional(),
});

export const postV2ExecuteAPresetResponse = zod.record(zod.string(), zod.any());
