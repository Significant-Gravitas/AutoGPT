/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * AutoGPT Agent Server
 * This server is used to execute agents that are created by the AutoGPT system.
 * OpenAPI spec version: 0.1
 */
import { z as zod } from "zod";

/**
 * @summary Get user credits
 */
export const getV1GetUserCreditsResponse = zod.record(
  zod.string(),
  zod.number(),
);

/**
 * @summary Request credit top up
 */
export const postV1RequestCreditTopUpBody = zod.object({
  credit_amount: zod.number(),
});

export const postV1RequestCreditTopUpResponse = zod.any();

/**
 * @summary Fulfill checkout session
 */
export const patchV1FulfillCheckoutSessionResponse = zod.any();

/**
 * @summary Refund credit transaction
 */
export const postV1RefundCreditTransactionParams = zod.object({
  transaction_key: zod.string(),
});

export const postV1RefundCreditTransactionBody = zod.record(
  zod.string(),
  zod.string(),
);

export const postV1RefundCreditTransactionResponse = zod.number();

/**
 * @summary Get auto top up
 */
export const getV1GetAutoTopUpResponse = zod.object({
  amount: zod.number(),
  threshold: zod.number(),
});

/**
 * @summary Configure auto top up
 */
export const postV1ConfigureAutoTopUpBody = zod.object({
  amount: zod.number(),
  threshold: zod.number(),
});

export const postV1ConfigureAutoTopUpResponse = zod.string();

/**
 * @summary Handle Stripe webhooks
 */
export const postV1HandleStripeWebhooksResponse = zod.any();

/**
 * @summary Manage payment methods
 */
export const getV1ManagePaymentMethodsResponse = zod.record(
  zod.string(),
  zod.string(),
);

/**
 * @summary Get credit history
 */
export const getV1GetCreditHistoryQueryTransactionCountLimitDefault = 100;

export const getV1GetCreditHistoryQueryParams = zod.object({
  transaction_time: zod.string().datetime({}).or(zod.null()).optional(),
  transaction_type: zod.string().or(zod.null()).optional(),
  transaction_count_limit: zod
    .number()
    .default(getV1GetCreditHistoryQueryTransactionCountLimitDefault),
});

export const getV1GetCreditHistoryResponseTransactionsItemTransactionKeyDefault =
  "";
export const getV1GetCreditHistoryResponseTransactionsItemTransactionTimeDefault =
  "0001-01-01T00:00:00Z";
export const getV1GetCreditHistoryResponseTransactionsItemAmountDefault = 0;
export const getV1GetCreditHistoryResponseTransactionsItemRunningBalanceDefault = 0;
export const getV1GetCreditHistoryResponseTransactionsItemCurrentBalanceDefault = 0;
export const getV1GetCreditHistoryResponseTransactionsItemUsageNodeCountDefault = 0;
export const getV1GetCreditHistoryResponseTransactionsItemUsageStartTimeDefault =
  "9999-12-31T23:59:59.999999Z";

export const getV1GetCreditHistoryResponse = zod.object({
  transactions: zod.array(
    zod.object({
      transaction_key: zod.string().optional(),
      transaction_time: zod
        .string()
        .datetime({})
        .default(
          getV1GetCreditHistoryResponseTransactionsItemTransactionTimeDefault,
        ),
      transaction_type: zod
        .enum(["TOP_UP", "USAGE", "GRANT", "REFUND", "CARD_CHECK"])
        .optional(),
      amount: zod.number().optional(),
      running_balance: zod.number().optional(),
      current_balance: zod.number().optional(),
      description: zod.string().or(zod.null()).optional(),
      usage_graph_id: zod.string().or(zod.null()).optional(),
      usage_execution_id: zod.string().or(zod.null()).optional(),
      usage_node_count: zod.number().optional(),
      usage_start_time: zod
        .string()
        .datetime({})
        .default(
          getV1GetCreditHistoryResponseTransactionsItemUsageStartTimeDefault,
        ),
      user_id: zod.string(),
      user_email: zod.string().or(zod.null()).optional(),
      reason: zod.string().or(zod.null()).optional(),
      admin_email: zod.string().or(zod.null()).optional(),
      extra_data: zod.string().or(zod.null()).optional(),
    }),
  ),
  next_transaction_time: zod.string().datetime({}).or(zod.null()),
});

/**
 * @summary Get refund requests
 */
export const getV1GetRefundRequestsResponseItem = zod.object({
  id: zod.string(),
  user_id: zod.string(),
  transaction_key: zod.string(),
  amount: zod.number(),
  reason: zod.string(),
  result: zod.string().or(zod.null()).optional(),
  status: zod.string(),
  created_at: zod.string().datetime({}),
  updated_at: zod.string().datetime({}),
});
export const getV1GetRefundRequestsResponse = zod.array(
  getV1GetRefundRequestsResponseItem,
);
