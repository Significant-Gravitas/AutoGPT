/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * AutoGPT Agent Server
 * This server is used to execute agents that are created by the AutoGPT system.
 * OpenAPI spec version: 0.1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { AyrshareSSOResponse } from "../../models/ayrshareSSOResponse";

import type { BodyPostV1Callback } from "../../models/bodyPostV1Callback";

import type { CredentialsMetaResponse } from "../../models/credentialsMetaResponse";

import type { DeleteV1DeleteCredentials200 } from "../../models/deleteV1DeleteCredentials200";

import type { DeleteV1DeleteCredentialsParams } from "../../models/deleteV1DeleteCredentialsParams";

import type { GetV1GetCredential200 } from "../../models/getV1GetCredential200";

import type { GetV1LoginParams } from "../../models/getV1LoginParams";

import type { HTTPValidationError } from "../../models/hTTPValidationError";

import type { LoginResponse } from "../../models/loginResponse";

import type { PostV1CreateCredentials201 } from "../../models/postV1CreateCredentials201";

import type { PostV1CreateCredentialsBody } from "../../models/postV1CreateCredentialsBody";

import type { ProviderConstants } from "../../models/providerConstants";

import type { ProviderEnumResponse } from "../../models/providerEnumResponse";

import type { ProviderNamesResponse } from "../../models/providerNamesResponse";

import { customMutator } from "../../../mutators/custom-mutator";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Login
 */
export type getV1LoginResponse200 = {
  data: LoginResponse;
  status: 200;
};

export type getV1LoginResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type getV1LoginResponseComposite =
  | getV1LoginResponse200
  | getV1LoginResponse422;

export type getV1LoginResponse = getV1LoginResponseComposite & {
  headers: Headers;
};

export const getGetV1LoginUrl = (
  provider: string,
  params?: GetV1LoginParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/integrations/${provider}/login?${stringifiedParams}`
    : `/api/integrations/${provider}/login`;
};

export const getV1Login = async (
  provider: string,
  params?: GetV1LoginParams,
  options?: RequestInit,
): Promise<getV1LoginResponse> => {
  return customMutator<getV1LoginResponse>(getGetV1LoginUrl(provider, params), {
    ...options,
    method: "GET",
  });
};

export const getGetV1LoginQueryKey = (
  provider: string,
  params?: GetV1LoginParams,
) => {
  return [
    `/api/integrations/${provider}/login`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetV1LoginQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1Login>>,
  TError = HTTPValidationError,
>(
  provider: string,
  params?: GetV1LoginParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getV1Login>>, TError, TData>
    >;
    request?: SecondParameter<typeof customMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetV1LoginQueryKey(provider, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1Login>>> = ({
    signal,
  }) => getV1Login(provider, params, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!provider,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1Login>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV1LoginQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1Login>>
>;
export type GetV1LoginQueryError = HTTPValidationError;

export function useGetV1Login<
  TData = Awaited<ReturnType<typeof getV1Login>>,
  TError = HTTPValidationError,
>(
  provider: string,
  params: undefined | GetV1LoginParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getV1Login>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1Login>>,
          TError,
          Awaited<ReturnType<typeof getV1Login>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1Login<
  TData = Awaited<ReturnType<typeof getV1Login>>,
  TError = HTTPValidationError,
>(
  provider: string,
  params?: GetV1LoginParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getV1Login>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1Login>>,
          TError,
          Awaited<ReturnType<typeof getV1Login>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1Login<
  TData = Awaited<ReturnType<typeof getV1Login>>,
  TError = HTTPValidationError,
>(
  provider: string,
  params?: GetV1LoginParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getV1Login>>, TError, TData>
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Login
 */

export function useGetV1Login<
  TData = Awaited<ReturnType<typeof getV1Login>>,
  TError = HTTPValidationError,
>(
  provider: string,
  params?: GetV1LoginParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getV1Login>>, TError, TData>
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV1LoginQueryOptions(provider, params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Login
 */
export const prefetchGetV1LoginQuery = async <
  TData = Awaited<ReturnType<typeof getV1Login>>,
  TError = HTTPValidationError,
>(
  queryClient: QueryClient,
  provider: string,
  params?: GetV1LoginParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getV1Login>>, TError, TData>
    >;
    request?: SecondParameter<typeof customMutator>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetV1LoginQueryOptions(provider, params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Callback
 */
export type postV1CallbackResponse200 = {
  data: CredentialsMetaResponse;
  status: 200;
};

export type postV1CallbackResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type postV1CallbackResponseComposite =
  | postV1CallbackResponse200
  | postV1CallbackResponse422;

export type postV1CallbackResponse = postV1CallbackResponseComposite & {
  headers: Headers;
};

export const getPostV1CallbackUrl = (provider: string) => {
  return `/api/integrations/${provider}/callback`;
};

export const postV1Callback = async (
  provider: string,
  bodyPostV1Callback: BodyPostV1Callback,
  options?: RequestInit,
): Promise<postV1CallbackResponse> => {
  return customMutator<postV1CallbackResponse>(getPostV1CallbackUrl(provider), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(bodyPostV1Callback),
  });
};

export const getPostV1CallbackMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1Callback>>,
    TError,
    { provider: string; data: BodyPostV1Callback },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1Callback>>,
  TError,
  { provider: string; data: BodyPostV1Callback },
  TContext
> => {
  const mutationKey = ["postV1Callback"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1Callback>>,
    { provider: string; data: BodyPostV1Callback }
  > = (props) => {
    const { provider, data } = props ?? {};

    return postV1Callback(provider, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1CallbackMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1Callback>>
>;
export type PostV1CallbackMutationBody = BodyPostV1Callback;
export type PostV1CallbackMutationError = HTTPValidationError;

/**
 * @summary Callback
 */
export const usePostV1Callback = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1Callback>>,
      TError,
      { provider: string; data: BodyPostV1Callback },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postV1Callback>>,
  TError,
  { provider: string; data: BodyPostV1Callback },
  TContext
> => {
  const mutationOptions = getPostV1CallbackMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary List Credentials
 */
export type getV1ListCredentialsResponse200 = {
  data: CredentialsMetaResponse[];
  status: 200;
};

export type getV1ListCredentialsResponseComposite =
  getV1ListCredentialsResponse200;

export type getV1ListCredentialsResponse =
  getV1ListCredentialsResponseComposite & {
    headers: Headers;
  };

export const getGetV1ListCredentialsUrl = () => {
  return `/api/integrations/credentials`;
};

export const getV1ListCredentials = async (
  options?: RequestInit,
): Promise<getV1ListCredentialsResponse> => {
  return customMutator<getV1ListCredentialsResponse>(
    getGetV1ListCredentialsUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV1ListCredentialsQueryKey = () => {
  return [`/api/integrations/credentials`] as const;
};

export const getGetV1ListCredentialsQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1ListCredentials>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getV1ListCredentials>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customMutator>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetV1ListCredentialsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV1ListCredentials>>
  > = ({ signal }) => getV1ListCredentials({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1ListCredentials>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV1ListCredentialsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1ListCredentials>>
>;
export type GetV1ListCredentialsQueryError = unknown;

export function useGetV1ListCredentials<
  TData = Awaited<ReturnType<typeof getV1ListCredentials>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1ListCredentials>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1ListCredentials>>,
          TError,
          Awaited<ReturnType<typeof getV1ListCredentials>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1ListCredentials<
  TData = Awaited<ReturnType<typeof getV1ListCredentials>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1ListCredentials>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1ListCredentials>>,
          TError,
          Awaited<ReturnType<typeof getV1ListCredentials>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1ListCredentials<
  TData = Awaited<ReturnType<typeof getV1ListCredentials>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1ListCredentials>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List Credentials
 */

export function useGetV1ListCredentials<
  TData = Awaited<ReturnType<typeof getV1ListCredentials>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1ListCredentials>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV1ListCredentialsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary List Credentials
 */
export const prefetchGetV1ListCredentialsQuery = async <
  TData = Awaited<ReturnType<typeof getV1ListCredentials>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1ListCredentials>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetV1ListCredentialsQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary List Credentials By Provider
 */
export type getV1ListCredentialsByProviderResponse200 = {
  data: CredentialsMetaResponse[];
  status: 200;
};

export type getV1ListCredentialsByProviderResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type getV1ListCredentialsByProviderResponseComposite =
  | getV1ListCredentialsByProviderResponse200
  | getV1ListCredentialsByProviderResponse422;

export type getV1ListCredentialsByProviderResponse =
  getV1ListCredentialsByProviderResponseComposite & {
    headers: Headers;
  };

export const getGetV1ListCredentialsByProviderUrl = (provider: string) => {
  return `/api/integrations/${provider}/credentials`;
};

export const getV1ListCredentialsByProvider = async (
  provider: string,
  options?: RequestInit,
): Promise<getV1ListCredentialsByProviderResponse> => {
  return customMutator<getV1ListCredentialsByProviderResponse>(
    getGetV1ListCredentialsByProviderUrl(provider),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV1ListCredentialsByProviderQueryKey = (provider: string) => {
  return [`/api/integrations/${provider}/credentials`] as const;
};

export const getGetV1ListCredentialsByProviderQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1ListCredentialsByProvider>>,
  TError = HTTPValidationError,
>(
  provider: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1ListCredentialsByProvider>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetV1ListCredentialsByProviderQueryKey(provider);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV1ListCredentialsByProvider>>
  > = ({ signal }) =>
    getV1ListCredentialsByProvider(provider, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!provider,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1ListCredentialsByProvider>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV1ListCredentialsByProviderQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1ListCredentialsByProvider>>
>;
export type GetV1ListCredentialsByProviderQueryError = HTTPValidationError;

export function useGetV1ListCredentialsByProvider<
  TData = Awaited<ReturnType<typeof getV1ListCredentialsByProvider>>,
  TError = HTTPValidationError,
>(
  provider: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1ListCredentialsByProvider>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1ListCredentialsByProvider>>,
          TError,
          Awaited<ReturnType<typeof getV1ListCredentialsByProvider>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1ListCredentialsByProvider<
  TData = Awaited<ReturnType<typeof getV1ListCredentialsByProvider>>,
  TError = HTTPValidationError,
>(
  provider: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1ListCredentialsByProvider>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1ListCredentialsByProvider>>,
          TError,
          Awaited<ReturnType<typeof getV1ListCredentialsByProvider>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1ListCredentialsByProvider<
  TData = Awaited<ReturnType<typeof getV1ListCredentialsByProvider>>,
  TError = HTTPValidationError,
>(
  provider: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1ListCredentialsByProvider>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List Credentials By Provider
 */

export function useGetV1ListCredentialsByProvider<
  TData = Awaited<ReturnType<typeof getV1ListCredentialsByProvider>>,
  TError = HTTPValidationError,
>(
  provider: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1ListCredentialsByProvider>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV1ListCredentialsByProviderQueryOptions(
    provider,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary List Credentials By Provider
 */
export const prefetchGetV1ListCredentialsByProviderQuery = async <
  TData = Awaited<ReturnType<typeof getV1ListCredentialsByProvider>>,
  TError = HTTPValidationError,
>(
  queryClient: QueryClient,
  provider: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1ListCredentialsByProvider>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetV1ListCredentialsByProviderQueryOptions(
    provider,
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Create Credentials
 */
export type postV1CreateCredentialsResponse201 = {
  data: PostV1CreateCredentials201;
  status: 201;
};

export type postV1CreateCredentialsResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type postV1CreateCredentialsResponseComposite =
  | postV1CreateCredentialsResponse201
  | postV1CreateCredentialsResponse422;

export type postV1CreateCredentialsResponse =
  postV1CreateCredentialsResponseComposite & {
    headers: Headers;
  };

export const getPostV1CreateCredentialsUrl = (provider: string) => {
  return `/api/integrations/${provider}/credentials`;
};

export const postV1CreateCredentials = async (
  provider: string,
  postV1CreateCredentialsBody: PostV1CreateCredentialsBody,
  options?: RequestInit,
): Promise<postV1CreateCredentialsResponse> => {
  return customMutator<postV1CreateCredentialsResponse>(
    getPostV1CreateCredentialsUrl(provider),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(postV1CreateCredentialsBody),
    },
  );
};

export const getPostV1CreateCredentialsMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1CreateCredentials>>,
    TError,
    { provider: string; data: PostV1CreateCredentialsBody },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1CreateCredentials>>,
  TError,
  { provider: string; data: PostV1CreateCredentialsBody },
  TContext
> => {
  const mutationKey = ["postV1CreateCredentials"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1CreateCredentials>>,
    { provider: string; data: PostV1CreateCredentialsBody }
  > = (props) => {
    const { provider, data } = props ?? {};

    return postV1CreateCredentials(provider, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1CreateCredentialsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1CreateCredentials>>
>;
export type PostV1CreateCredentialsMutationBody = PostV1CreateCredentialsBody;
export type PostV1CreateCredentialsMutationError = HTTPValidationError;

/**
 * @summary Create Credentials
 */
export const usePostV1CreateCredentials = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1CreateCredentials>>,
      TError,
      { provider: string; data: PostV1CreateCredentialsBody },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postV1CreateCredentials>>,
  TError,
  { provider: string; data: PostV1CreateCredentialsBody },
  TContext
> => {
  const mutationOptions = getPostV1CreateCredentialsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get Credential
 */
export type getV1GetCredentialResponse200 = {
  data: GetV1GetCredential200;
  status: 200;
};

export type getV1GetCredentialResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type getV1GetCredentialResponseComposite =
  | getV1GetCredentialResponse200
  | getV1GetCredentialResponse422;

export type getV1GetCredentialResponse = getV1GetCredentialResponseComposite & {
  headers: Headers;
};

export const getGetV1GetCredentialUrl = (provider: string, credId: string) => {
  return `/api/integrations/${provider}/credentials/${credId}`;
};

export const getV1GetCredential = async (
  provider: string,
  credId: string,
  options?: RequestInit,
): Promise<getV1GetCredentialResponse> => {
  return customMutator<getV1GetCredentialResponse>(
    getGetV1GetCredentialUrl(provider, credId),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV1GetCredentialQueryKey = (
  provider: string,
  credId: string,
) => {
  return [`/api/integrations/${provider}/credentials/${credId}`] as const;
};

export const getGetV1GetCredentialQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1GetCredential>>,
  TError = HTTPValidationError,
>(
  provider: string,
  credId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetCredential>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetV1GetCredentialQueryKey(provider, credId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV1GetCredential>>
  > = ({ signal }) =>
    getV1GetCredential(provider, credId, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!(provider && credId),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1GetCredential>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV1GetCredentialQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1GetCredential>>
>;
export type GetV1GetCredentialQueryError = HTTPValidationError;

export function useGetV1GetCredential<
  TData = Awaited<ReturnType<typeof getV1GetCredential>>,
  TError = HTTPValidationError,
>(
  provider: string,
  credId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetCredential>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1GetCredential>>,
          TError,
          Awaited<ReturnType<typeof getV1GetCredential>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1GetCredential<
  TData = Awaited<ReturnType<typeof getV1GetCredential>>,
  TError = HTTPValidationError,
>(
  provider: string,
  credId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetCredential>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1GetCredential>>,
          TError,
          Awaited<ReturnType<typeof getV1GetCredential>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1GetCredential<
  TData = Awaited<ReturnType<typeof getV1GetCredential>>,
  TError = HTTPValidationError,
>(
  provider: string,
  credId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetCredential>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Credential
 */

export function useGetV1GetCredential<
  TData = Awaited<ReturnType<typeof getV1GetCredential>>,
  TError = HTTPValidationError,
>(
  provider: string,
  credId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetCredential>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV1GetCredentialQueryOptions(
    provider,
    credId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get Credential
 */
export const prefetchGetV1GetCredentialQuery = async <
  TData = Awaited<ReturnType<typeof getV1GetCredential>>,
  TError = HTTPValidationError,
>(
  queryClient: QueryClient,
  provider: string,
  credId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetCredential>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetV1GetCredentialQueryOptions(
    provider,
    credId,
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Delete Credentials
 */
export type deleteV1DeleteCredentialsResponse200 = {
  data: DeleteV1DeleteCredentials200;
  status: 200;
};

export type deleteV1DeleteCredentialsResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type deleteV1DeleteCredentialsResponseComposite =
  | deleteV1DeleteCredentialsResponse200
  | deleteV1DeleteCredentialsResponse422;

export type deleteV1DeleteCredentialsResponse =
  deleteV1DeleteCredentialsResponseComposite & {
    headers: Headers;
  };

export const getDeleteV1DeleteCredentialsUrl = (
  provider: string,
  credId: string,
  params?: DeleteV1DeleteCredentialsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/integrations/${provider}/credentials/${credId}?${stringifiedParams}`
    : `/api/integrations/${provider}/credentials/${credId}`;
};

export const deleteV1DeleteCredentials = async (
  provider: string,
  credId: string,
  params?: DeleteV1DeleteCredentialsParams,
  options?: RequestInit,
): Promise<deleteV1DeleteCredentialsResponse> => {
  return customMutator<deleteV1DeleteCredentialsResponse>(
    getDeleteV1DeleteCredentialsUrl(provider, credId, params),
    {
      ...options,
      method: "DELETE",
    },
  );
};

export const getDeleteV1DeleteCredentialsMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteV1DeleteCredentials>>,
    TError,
    {
      provider: string;
      credId: string;
      params?: DeleteV1DeleteCredentialsParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteV1DeleteCredentials>>,
  TError,
  {
    provider: string;
    credId: string;
    params?: DeleteV1DeleteCredentialsParams;
  },
  TContext
> => {
  const mutationKey = ["deleteV1DeleteCredentials"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteV1DeleteCredentials>>,
    {
      provider: string;
      credId: string;
      params?: DeleteV1DeleteCredentialsParams;
    }
  > = (props) => {
    const { provider, credId, params } = props ?? {};

    return deleteV1DeleteCredentials(provider, credId, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteV1DeleteCredentialsMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteV1DeleteCredentials>>
>;

export type DeleteV1DeleteCredentialsMutationError = HTTPValidationError;

/**
 * @summary Delete Credentials
 */
export const useDeleteV1DeleteCredentials = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteV1DeleteCredentials>>,
      TError,
      {
        provider: string;
        credId: string;
        params?: DeleteV1DeleteCredentialsParams;
      },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteV1DeleteCredentials>>,
  TError,
  {
    provider: string;
    credId: string;
    params?: DeleteV1DeleteCredentialsParams;
  },
  TContext
> => {
  const mutationOptions = getDeleteV1DeleteCredentialsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Webhook Ingress Generic
 */
export type postV1WebhookIngressGenericResponse200 = {
  data: unknown;
  status: 200;
};

export type postV1WebhookIngressGenericResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type postV1WebhookIngressGenericResponseComposite =
  | postV1WebhookIngressGenericResponse200
  | postV1WebhookIngressGenericResponse422;

export type postV1WebhookIngressGenericResponse =
  postV1WebhookIngressGenericResponseComposite & {
    headers: Headers;
  };

export const getPostV1WebhookIngressGenericUrl = (
  provider: string,
  webhookId: string,
) => {
  return `/api/integrations/${provider}/webhooks/${webhookId}/ingress`;
};

export const postV1WebhookIngressGeneric = async (
  provider: string,
  webhookId: string,
  options?: RequestInit,
): Promise<postV1WebhookIngressGenericResponse> => {
  return customMutator<postV1WebhookIngressGenericResponse>(
    getPostV1WebhookIngressGenericUrl(provider, webhookId),
    {
      ...options,
      method: "POST",
    },
  );
};

export const getPostV1WebhookIngressGenericMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1WebhookIngressGeneric>>,
    TError,
    { provider: string; webhookId: string },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1WebhookIngressGeneric>>,
  TError,
  { provider: string; webhookId: string },
  TContext
> => {
  const mutationKey = ["postV1WebhookIngressGeneric"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1WebhookIngressGeneric>>,
    { provider: string; webhookId: string }
  > = (props) => {
    const { provider, webhookId } = props ?? {};

    return postV1WebhookIngressGeneric(provider, webhookId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1WebhookIngressGenericMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1WebhookIngressGeneric>>
>;

export type PostV1WebhookIngressGenericMutationError = HTTPValidationError;

/**
 * @summary Webhook Ingress Generic
 */
export const usePostV1WebhookIngressGeneric = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1WebhookIngressGeneric>>,
      TError,
      { provider: string; webhookId: string },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postV1WebhookIngressGeneric>>,
  TError,
  { provider: string; webhookId: string },
  TContext
> => {
  const mutationOptions =
    getPostV1WebhookIngressGenericMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Webhook Ping
 */
export type postV1WebhookPingResponse200 = {
  data: unknown;
  status: 200;
};

export type postV1WebhookPingResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type postV1WebhookPingResponseComposite =
  | postV1WebhookPingResponse200
  | postV1WebhookPingResponse422;

export type postV1WebhookPingResponse = postV1WebhookPingResponseComposite & {
  headers: Headers;
};

export const getPostV1WebhookPingUrl = (webhookId: string) => {
  return `/api/integrations/webhooks/${webhookId}/ping`;
};

export const postV1WebhookPing = async (
  webhookId: string,
  options?: RequestInit,
): Promise<postV1WebhookPingResponse> => {
  return customMutator<postV1WebhookPingResponse>(
    getPostV1WebhookPingUrl(webhookId),
    {
      ...options,
      method: "POST",
    },
  );
};

export const getPostV1WebhookPingMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1WebhookPing>>,
    TError,
    { webhookId: string },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1WebhookPing>>,
  TError,
  { webhookId: string },
  TContext
> => {
  const mutationKey = ["postV1WebhookPing"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1WebhookPing>>,
    { webhookId: string }
  > = (props) => {
    const { webhookId } = props ?? {};

    return postV1WebhookPing(webhookId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1WebhookPingMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1WebhookPing>>
>;

export type PostV1WebhookPingMutationError = HTTPValidationError;

/**
 * @summary Webhook Ping
 */
export const usePostV1WebhookPing = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1WebhookPing>>,
      TError,
      { webhookId: string },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postV1WebhookPing>>,
  TError,
  { webhookId: string },
  TContext
> => {
  const mutationOptions = getPostV1WebhookPingMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Generate an SSO URL for Ayrshare social media integration.

Returns:
    dict: Contains the SSO URL for Ayrshare integration
 * @summary Get Ayrshare Sso Url
 */
export type getV1GetAyrshareSsoUrlResponse200 = {
  data: AyrshareSSOResponse;
  status: 200;
};

export type getV1GetAyrshareSsoUrlResponseComposite =
  getV1GetAyrshareSsoUrlResponse200;

export type getV1GetAyrshareSsoUrlResponse =
  getV1GetAyrshareSsoUrlResponseComposite & {
    headers: Headers;
  };

export const getGetV1GetAyrshareSsoUrlUrl = () => {
  return `/api/integrations/ayrshare/sso_url`;
};

export const getV1GetAyrshareSsoUrl = async (
  options?: RequestInit,
): Promise<getV1GetAyrshareSsoUrlResponse> => {
  return customMutator<getV1GetAyrshareSsoUrlResponse>(
    getGetV1GetAyrshareSsoUrlUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV1GetAyrshareSsoUrlQueryKey = () => {
  return [`/api/integrations/ayrshare/sso_url`] as const;
};

export const getGetV1GetAyrshareSsoUrlQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1GetAyrshareSsoUrl>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getV1GetAyrshareSsoUrl>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customMutator>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetV1GetAyrshareSsoUrlQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV1GetAyrshareSsoUrl>>
  > = ({ signal }) => getV1GetAyrshareSsoUrl({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1GetAyrshareSsoUrl>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV1GetAyrshareSsoUrlQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1GetAyrshareSsoUrl>>
>;
export type GetV1GetAyrshareSsoUrlQueryError = unknown;

export function useGetV1GetAyrshareSsoUrl<
  TData = Awaited<ReturnType<typeof getV1GetAyrshareSsoUrl>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetAyrshareSsoUrl>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1GetAyrshareSsoUrl>>,
          TError,
          Awaited<ReturnType<typeof getV1GetAyrshareSsoUrl>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1GetAyrshareSsoUrl<
  TData = Awaited<ReturnType<typeof getV1GetAyrshareSsoUrl>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetAyrshareSsoUrl>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1GetAyrshareSsoUrl>>,
          TError,
          Awaited<ReturnType<typeof getV1GetAyrshareSsoUrl>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1GetAyrshareSsoUrl<
  TData = Awaited<ReturnType<typeof getV1GetAyrshareSsoUrl>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetAyrshareSsoUrl>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Ayrshare Sso Url
 */

export function useGetV1GetAyrshareSsoUrl<
  TData = Awaited<ReturnType<typeof getV1GetAyrshareSsoUrl>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetAyrshareSsoUrl>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV1GetAyrshareSsoUrlQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get Ayrshare Sso Url
 */
export const prefetchGetV1GetAyrshareSsoUrlQuery = async <
  TData = Awaited<ReturnType<typeof getV1GetAyrshareSsoUrl>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetAyrshareSsoUrl>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetV1GetAyrshareSsoUrlQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * Get a list of all available provider names.

Returns both statically defined providers (from ProviderName enum)
and dynamically registered providers (from SDK decorators).

Note: The complete list of provider names is also available as a constant
in the generated TypeScript client via PROVIDER_NAMES.
 * @summary List Providers
 */
export type getV1ListProvidersResponse200 = {
  data: string[];
  status: 200;
};

export type getV1ListProvidersResponseComposite = getV1ListProvidersResponse200;

export type getV1ListProvidersResponse = getV1ListProvidersResponseComposite & {
  headers: Headers;
};

export const getGetV1ListProvidersUrl = () => {
  return `/api/integrations/providers`;
};

export const getV1ListProviders = async (
  options?: RequestInit,
): Promise<getV1ListProvidersResponse> => {
  return customMutator<getV1ListProvidersResponse>(getGetV1ListProvidersUrl(), {
    ...options,
    method: "GET",
  });
};

export const getGetV1ListProvidersQueryKey = () => {
  return [`/api/integrations/providers`] as const;
};

export const getGetV1ListProvidersQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1ListProviders>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getV1ListProviders>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customMutator>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetV1ListProvidersQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV1ListProviders>>
  > = ({ signal }) => getV1ListProviders({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1ListProviders>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV1ListProvidersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1ListProviders>>
>;
export type GetV1ListProvidersQueryError = unknown;

export function useGetV1ListProviders<
  TData = Awaited<ReturnType<typeof getV1ListProviders>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1ListProviders>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1ListProviders>>,
          TError,
          Awaited<ReturnType<typeof getV1ListProviders>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1ListProviders<
  TData = Awaited<ReturnType<typeof getV1ListProviders>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1ListProviders>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1ListProviders>>,
          TError,
          Awaited<ReturnType<typeof getV1ListProviders>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1ListProviders<
  TData = Awaited<ReturnType<typeof getV1ListProviders>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1ListProviders>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List Providers
 */

export function useGetV1ListProviders<
  TData = Awaited<ReturnType<typeof getV1ListProviders>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1ListProviders>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV1ListProvidersQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary List Providers
 */
export const prefetchGetV1ListProvidersQuery = async <
  TData = Awaited<ReturnType<typeof getV1ListProviders>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1ListProviders>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetV1ListProvidersQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * Get all provider names in a structured format.

This endpoint is specifically designed to expose the provider names
in the OpenAPI schema so that code generators like Orval can create
appropriate TypeScript constants.
 * @summary Get Provider Names
 */
export type getV1GetProviderNamesResponse200 = {
  data: ProviderNamesResponse;
  status: 200;
};

export type getV1GetProviderNamesResponseComposite =
  getV1GetProviderNamesResponse200;

export type getV1GetProviderNamesResponse =
  getV1GetProviderNamesResponseComposite & {
    headers: Headers;
  };

export const getGetV1GetProviderNamesUrl = () => {
  return `/api/integrations/providers/names`;
};

export const getV1GetProviderNames = async (
  options?: RequestInit,
): Promise<getV1GetProviderNamesResponse> => {
  return customMutator<getV1GetProviderNamesResponse>(
    getGetV1GetProviderNamesUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV1GetProviderNamesQueryKey = () => {
  return [`/api/integrations/providers/names`] as const;
};

export const getGetV1GetProviderNamesQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1GetProviderNames>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getV1GetProviderNames>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customMutator>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetV1GetProviderNamesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV1GetProviderNames>>
  > = ({ signal }) => getV1GetProviderNames({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1GetProviderNames>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV1GetProviderNamesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1GetProviderNames>>
>;
export type GetV1GetProviderNamesQueryError = unknown;

export function useGetV1GetProviderNames<
  TData = Awaited<ReturnType<typeof getV1GetProviderNames>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetProviderNames>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1GetProviderNames>>,
          TError,
          Awaited<ReturnType<typeof getV1GetProviderNames>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1GetProviderNames<
  TData = Awaited<ReturnType<typeof getV1GetProviderNames>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetProviderNames>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1GetProviderNames>>,
          TError,
          Awaited<ReturnType<typeof getV1GetProviderNames>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1GetProviderNames<
  TData = Awaited<ReturnType<typeof getV1GetProviderNames>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetProviderNames>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Provider Names
 */

export function useGetV1GetProviderNames<
  TData = Awaited<ReturnType<typeof getV1GetProviderNames>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetProviderNames>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV1GetProviderNamesQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get Provider Names
 */
export const prefetchGetV1GetProviderNamesQuery = async <
  TData = Awaited<ReturnType<typeof getV1GetProviderNames>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetProviderNames>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetV1GetProviderNamesQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * Get provider names as constants.

This endpoint returns a model with provider names as constants,
specifically designed for OpenAPI code generation tools to create
TypeScript constants.
 * @summary Get Provider Constants
 */
export type getV1GetProviderConstantsResponse200 = {
  data: ProviderConstants;
  status: 200;
};

export type getV1GetProviderConstantsResponseComposite =
  getV1GetProviderConstantsResponse200;

export type getV1GetProviderConstantsResponse =
  getV1GetProviderConstantsResponseComposite & {
    headers: Headers;
  };

export const getGetV1GetProviderConstantsUrl = () => {
  return `/api/integrations/providers/constants`;
};

export const getV1GetProviderConstants = async (
  options?: RequestInit,
): Promise<getV1GetProviderConstantsResponse> => {
  return customMutator<getV1GetProviderConstantsResponse>(
    getGetV1GetProviderConstantsUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV1GetProviderConstantsQueryKey = () => {
  return [`/api/integrations/providers/constants`] as const;
};

export const getGetV1GetProviderConstantsQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1GetProviderConstants>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getV1GetProviderConstants>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customMutator>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetV1GetProviderConstantsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV1GetProviderConstants>>
  > = ({ signal }) => getV1GetProviderConstants({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1GetProviderConstants>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV1GetProviderConstantsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1GetProviderConstants>>
>;
export type GetV1GetProviderConstantsQueryError = unknown;

export function useGetV1GetProviderConstants<
  TData = Awaited<ReturnType<typeof getV1GetProviderConstants>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetProviderConstants>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1GetProviderConstants>>,
          TError,
          Awaited<ReturnType<typeof getV1GetProviderConstants>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1GetProviderConstants<
  TData = Awaited<ReturnType<typeof getV1GetProviderConstants>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetProviderConstants>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1GetProviderConstants>>,
          TError,
          Awaited<ReturnType<typeof getV1GetProviderConstants>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1GetProviderConstants<
  TData = Awaited<ReturnType<typeof getV1GetProviderConstants>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetProviderConstants>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Provider Constants
 */

export function useGetV1GetProviderConstants<
  TData = Awaited<ReturnType<typeof getV1GetProviderConstants>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetProviderConstants>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV1GetProviderConstantsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get Provider Constants
 */
export const prefetchGetV1GetProviderConstantsQuery = async <
  TData = Awaited<ReturnType<typeof getV1GetProviderConstants>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetProviderConstants>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetV1GetProviderConstantsQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * Example endpoint that uses the CompleteProviderNames enum.

This endpoint exists to ensure that the CompleteProviderNames enum is included
in the OpenAPI schema, which will cause Orval to generate it as a
TypeScript enum/constant.
 * @summary Get Provider Enum Example
 */
export type getV1GetProviderEnumExampleResponse200 = {
  data: ProviderEnumResponse;
  status: 200;
};

export type getV1GetProviderEnumExampleResponseComposite =
  getV1GetProviderEnumExampleResponse200;

export type getV1GetProviderEnumExampleResponse =
  getV1GetProviderEnumExampleResponseComposite & {
    headers: Headers;
  };

export const getGetV1GetProviderEnumExampleUrl = () => {
  return `/api/integrations/providers/enum-example`;
};

export const getV1GetProviderEnumExample = async (
  options?: RequestInit,
): Promise<getV1GetProviderEnumExampleResponse> => {
  return customMutator<getV1GetProviderEnumExampleResponse>(
    getGetV1GetProviderEnumExampleUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV1GetProviderEnumExampleQueryKey = () => {
  return [`/api/integrations/providers/enum-example`] as const;
};

export const getGetV1GetProviderEnumExampleQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1GetProviderEnumExample>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getV1GetProviderEnumExample>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customMutator>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetV1GetProviderEnumExampleQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV1GetProviderEnumExample>>
  > = ({ signal }) =>
    getV1GetProviderEnumExample({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1GetProviderEnumExample>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV1GetProviderEnumExampleQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1GetProviderEnumExample>>
>;
export type GetV1GetProviderEnumExampleQueryError = unknown;

export function useGetV1GetProviderEnumExample<
  TData = Awaited<ReturnType<typeof getV1GetProviderEnumExample>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetProviderEnumExample>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1GetProviderEnumExample>>,
          TError,
          Awaited<ReturnType<typeof getV1GetProviderEnumExample>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1GetProviderEnumExample<
  TData = Awaited<ReturnType<typeof getV1GetProviderEnumExample>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetProviderEnumExample>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1GetProviderEnumExample>>,
          TError,
          Awaited<ReturnType<typeof getV1GetProviderEnumExample>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1GetProviderEnumExample<
  TData = Awaited<ReturnType<typeof getV1GetProviderEnumExample>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetProviderEnumExample>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Provider Enum Example
 */

export function useGetV1GetProviderEnumExample<
  TData = Awaited<ReturnType<typeof getV1GetProviderEnumExample>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetProviderEnumExample>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV1GetProviderEnumExampleQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get Provider Enum Example
 */
export const prefetchGetV1GetProviderEnumExampleQuery = async <
  TData = Awaited<ReturnType<typeof getV1GetProviderEnumExample>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetProviderEnumExample>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetV1GetProviderEnumExampleQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};
