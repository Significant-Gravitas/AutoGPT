/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * AutoGPT Agent Server
 * This server is used to execute agents that are created by the AutoGPT system.
 * OpenAPI spec version: 0.1
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";

import type { APIKeyCredentials } from "../../models/aPIKeyCredentials";

import type { CredentialsMetaResponse } from "../../models/credentialsMetaResponse";

import type { DeleteV1DeleteCredentials200 } from "../../models/deleteV1DeleteCredentials200";

import type { GetV1GetCredential200 } from "../../models/getV1GetCredential200";

import type { HTTPValidationError } from "../../models/hTTPValidationError";

import type { HostScopedCredentialsOutput } from "../../models/hostScopedCredentialsOutput";

import type { LoginResponse } from "../../models/loginResponse";

import type { OAuth2Credentials } from "../../models/oAuth2Credentials";

import type { PostV1CreateCredentials201 } from "../../models/postV1CreateCredentials201";

import type { UserPasswordCredentials } from "../../models/userPasswordCredentials";

export const getGetV1LoginResponseMock = (
  overrideResponse: Partial<LoginResponse> = {},
): LoginResponse => ({
  login_url: faker.string.alpha({ length: { min: 10, max: 20 } }),
  state_token: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getGetV1LoginResponseMock200 = (
  overrideResponse: Partial<LoginResponse> = {},
): LoginResponse => ({
  login_url: faker.string.alpha({ length: { min: 10, max: 20 } }),
  state_token: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getGetV1LoginResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostV1CallbackResponseMock = (
  overrideResponse: Partial<CredentialsMetaResponse> = {},
): CredentialsMetaResponse => ({
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  provider: faker.string.alpha({ length: { min: 10, max: 20 } }),
  type: faker.helpers.arrayElement([
    "api_key",
    "oauth2",
    "user_password",
    "host_scoped",
  ] as const),
  title: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  scopes: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
    null,
  ]),
  username: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  host: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostV1CallbackResponseMock200 = (
  overrideResponse: Partial<CredentialsMetaResponse> = {},
): CredentialsMetaResponse => ({
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  provider: faker.string.alpha({ length: { min: 10, max: 20 } }),
  type: faker.helpers.arrayElement([
    "api_key",
    "oauth2",
    "user_password",
    "host_scoped",
  ] as const),
  title: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  scopes: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
    null,
  ]),
  username: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  host: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostV1CallbackResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV1ListCredentialsResponseMock =
  (): CredentialsMetaResponse[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      provider: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.helpers.arrayElement([
        "api_key",
        "oauth2",
        "user_password",
        "host_scoped",
      ] as const),
      title: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      scopes: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
        null,
      ]),
      username: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      host: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
    }));

export const getGetV1ListCredentialsResponseMock200 =
  (): CredentialsMetaResponse[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      provider: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.helpers.arrayElement([
        "api_key",
        "oauth2",
        "user_password",
        "host_scoped",
      ] as const),
      title: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      scopes: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
        null,
      ]),
      username: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      host: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
    }));

export const getGetV1ListCredentialsByProviderResponseMock =
  (): CredentialsMetaResponse[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      provider: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.helpers.arrayElement([
        "api_key",
        "oauth2",
        "user_password",
        "host_scoped",
      ] as const),
      title: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      scopes: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
        null,
      ]),
      username: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      host: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
    }));

export const getGetV1ListCredentialsByProviderResponseMock200 =
  (): CredentialsMetaResponse[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      provider: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.helpers.arrayElement([
        "api_key",
        "oauth2",
        "user_password",
        "host_scoped",
      ] as const),
      title: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      scopes: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
        null,
      ]),
      username: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      host: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
    }));

export const getGetV1ListCredentialsByProviderResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostV1CreateCredentialsResponseOAuth2CredentialsMock = (
  overrideResponse: Partial<OAuth2Credentials> = {},
): OAuth2Credentials => ({
  ...{
    id: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    provider: faker.string.alpha({ length: { min: 10, max: 20 } }),
    title: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    type: faker.helpers.arrayElement(["oauth2", undefined]),
    username: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    access_token: faker.internet.password(),
    access_token_expires_at: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        null,
      ]),
      undefined,
    ]),
    refresh_token: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.internet.password(), null]),
      undefined,
    ]),
    refresh_token_expires_at: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        null,
      ]),
      undefined,
    ]),
    scopes: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
    metadata: faker.helpers.arrayElement([{}, undefined]),
  },
  ...overrideResponse,
});

export const getPostV1CreateCredentialsResponseAPIKeyCredentialsMock = (
  overrideResponse: Partial<APIKeyCredentials> = {},
): APIKeyCredentials => ({
  ...{
    id: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    provider: faker.string.alpha({ length: { min: 10, max: 20 } }),
    title: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    type: faker.helpers.arrayElement(["api_key", undefined]),
    api_key: faker.internet.password(),
    expires_at: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        null,
      ]),
      undefined,
    ]),
  },
  ...overrideResponse,
});

export const getPostV1CreateCredentialsResponseUserPasswordCredentialsMock = (
  overrideResponse: Partial<UserPasswordCredentials> = {},
): UserPasswordCredentials => ({
  ...{
    id: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    provider: faker.string.alpha({ length: { min: 10, max: 20 } }),
    title: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    type: faker.helpers.arrayElement(["user_password", undefined]),
    username: faker.internet.password(),
    password: faker.internet.password(),
  },
  ...overrideResponse,
});

export const getPostV1CreateCredentialsResponseHostScopedCredentialsOutputMock =
  (
    overrideResponse: Partial<HostScopedCredentialsOutput> = {},
  ): HostScopedCredentialsOutput => ({
    ...{
      id: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      provider: faker.string.alpha({ length: { min: 10, max: 20 } }),
      title: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
      type: faker.helpers.arrayElement(["host_scoped", undefined]),
      host: faker.string.alpha({ length: { min: 10, max: 20 } }),
      headers: faker.helpers.arrayElement([
        {
          [faker.string.alphanumeric(5)]: faker.string.alpha({
            length: { min: 10, max: 20 },
          }),
        },
        undefined,
      ]),
    },
    ...overrideResponse,
  });

export const getPostV1CreateCredentialsResponseMock =
  (): PostV1CreateCredentials201 =>
    faker.helpers.arrayElement([
      { ...getPostV1CreateCredentialsResponseOAuth2CredentialsMock() },
      { ...getPostV1CreateCredentialsResponseAPIKeyCredentialsMock() },
      { ...getPostV1CreateCredentialsResponseUserPasswordCredentialsMock() },
      {
        ...getPostV1CreateCredentialsResponseHostScopedCredentialsOutputMock(),
      },
    ]);

export const getPostV1CreateCredentialsResponseMock201 =
  (): PostV1CreateCredentials201 =>
    faker.helpers.arrayElement([
      { ...getPostV1CreateCredentialsResponseOAuth2CredentialsMock() },
      { ...getPostV1CreateCredentialsResponseAPIKeyCredentialsMock() },
      { ...getPostV1CreateCredentialsResponseUserPasswordCredentialsMock() },
      {
        ...getPostV1CreateCredentialsResponseHostScopedCredentialsOutputMock(),
      },
    ]);

export const getPostV1CreateCredentialsResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV1GetCredentialResponseOAuth2CredentialsMock = (
  overrideResponse: Partial<OAuth2Credentials> = {},
): OAuth2Credentials => ({
  ...{
    id: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    provider: faker.string.alpha({ length: { min: 10, max: 20 } }),
    title: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    type: faker.helpers.arrayElement(["oauth2", undefined]),
    username: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    access_token: faker.internet.password(),
    access_token_expires_at: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        null,
      ]),
      undefined,
    ]),
    refresh_token: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.internet.password(), null]),
      undefined,
    ]),
    refresh_token_expires_at: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        null,
      ]),
      undefined,
    ]),
    scopes: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
    metadata: faker.helpers.arrayElement([{}, undefined]),
  },
  ...overrideResponse,
});

export const getGetV1GetCredentialResponseAPIKeyCredentialsMock = (
  overrideResponse: Partial<APIKeyCredentials> = {},
): APIKeyCredentials => ({
  ...{
    id: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    provider: faker.string.alpha({ length: { min: 10, max: 20 } }),
    title: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    type: faker.helpers.arrayElement(["api_key", undefined]),
    api_key: faker.internet.password(),
    expires_at: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        null,
      ]),
      undefined,
    ]),
  },
  ...overrideResponse,
});

export const getGetV1GetCredentialResponseUserPasswordCredentialsMock = (
  overrideResponse: Partial<UserPasswordCredentials> = {},
): UserPasswordCredentials => ({
  ...{
    id: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    provider: faker.string.alpha({ length: { min: 10, max: 20 } }),
    title: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    type: faker.helpers.arrayElement(["user_password", undefined]),
    username: faker.internet.password(),
    password: faker.internet.password(),
  },
  ...overrideResponse,
});

export const getGetV1GetCredentialResponseHostScopedCredentialsOutputMock = (
  overrideResponse: Partial<HostScopedCredentialsOutput> = {},
): HostScopedCredentialsOutput => ({
  ...{
    id: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    provider: faker.string.alpha({ length: { min: 10, max: 20 } }),
    title: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    type: faker.helpers.arrayElement(["host_scoped", undefined]),
    host: faker.string.alpha({ length: { min: 10, max: 20 } }),
    headers: faker.helpers.arrayElement([
      {
        [faker.string.alphanumeric(5)]: faker.string.alpha({
          length: { min: 10, max: 20 },
        }),
      },
      undefined,
    ]),
  },
  ...overrideResponse,
});

export const getGetV1GetCredentialResponseMock = (): GetV1GetCredential200 =>
  faker.helpers.arrayElement([
    { ...getGetV1GetCredentialResponseOAuth2CredentialsMock() },
    { ...getGetV1GetCredentialResponseAPIKeyCredentialsMock() },
    { ...getGetV1GetCredentialResponseUserPasswordCredentialsMock() },
    { ...getGetV1GetCredentialResponseHostScopedCredentialsOutputMock() },
  ]);

export const getGetV1GetCredentialResponseMock200 = (): GetV1GetCredential200 =>
  faker.helpers.arrayElement([
    { ...getGetV1GetCredentialResponseOAuth2CredentialsMock() },
    { ...getGetV1GetCredentialResponseAPIKeyCredentialsMock() },
    { ...getGetV1GetCredentialResponseUserPasswordCredentialsMock() },
    { ...getGetV1GetCredentialResponseHostScopedCredentialsOutputMock() },
  ]);

export const getGetV1GetCredentialResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getDeleteV1DeleteCredentialsResponseMock =
  (): DeleteV1DeleteCredentials200 =>
    faker.helpers.arrayElement([
      {
        deleted: faker.helpers.arrayElement([true, undefined]),
        revoked: faker.helpers.arrayElement([faker.datatype.boolean(), null]),
      },
      {
        deleted: faker.helpers.arrayElement([false, undefined]),
        need_confirmation: faker.helpers.arrayElement([true, undefined]),
        message: faker.string.alpha({ length: { min: 10, max: 20 } }),
      },
    ]);

export const getDeleteV1DeleteCredentialsResponseMock200 =
  (): DeleteV1DeleteCredentials200 =>
    faker.helpers.arrayElement([
      {
        deleted: faker.helpers.arrayElement([true, undefined]),
        revoked: faker.helpers.arrayElement([faker.datatype.boolean(), null]),
      },
      {
        deleted: faker.helpers.arrayElement([false, undefined]),
        need_confirmation: faker.helpers.arrayElement([true, undefined]),
        message: faker.string.alpha({ length: { min: 10, max: 20 } }),
      },
    ]);

export const getDeleteV1DeleteCredentialsResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostV1WebhookIngressGenericResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostV1WebhookPingResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV1LoginMockHandler = (
  overrideResponse?:
    | LoginResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<LoginResponse> | LoginResponse),
) => {
  return http.get("*/api/integrations/:provider/login", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1LoginResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1LoginMockHandler200 = (
  overrideResponse?:
    | LoginResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<LoginResponse> | LoginResponse),
) => {
  return http.get("*/api/integrations/:provider/login", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1LoginResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1LoginMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.get("*/api/integrations/:provider/login", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1LoginResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV1CallbackMockHandler = (
  overrideResponse?:
    | CredentialsMetaResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<CredentialsMetaResponse> | CredentialsMetaResponse),
) => {
  return http.post("*/api/integrations/:provider/callback", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV1CallbackResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV1CallbackMockHandler200 = (
  overrideResponse?:
    | CredentialsMetaResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<CredentialsMetaResponse> | CredentialsMetaResponse),
) => {
  return http.post("*/api/integrations/:provider/callback", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV1CallbackResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV1CallbackMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.post("*/api/integrations/:provider/callback", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV1CallbackResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1ListCredentialsMockHandler = (
  overrideResponse?:
    | CredentialsMetaResponse[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<CredentialsMetaResponse[]> | CredentialsMetaResponse[]),
) => {
  return http.get("*/api/integrations/credentials", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1ListCredentialsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1ListCredentialsMockHandler200 = (
  overrideResponse?:
    | CredentialsMetaResponse[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<CredentialsMetaResponse[]> | CredentialsMetaResponse[]),
) => {
  return http.get("*/api/integrations/credentials", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1ListCredentialsResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1ListCredentialsByProviderMockHandler = (
  overrideResponse?:
    | CredentialsMetaResponse[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<CredentialsMetaResponse[]> | CredentialsMetaResponse[]),
) => {
  return http.get("*/api/integrations/:provider/credentials", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1ListCredentialsByProviderResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1ListCredentialsByProviderMockHandler200 = (
  overrideResponse?:
    | CredentialsMetaResponse[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<CredentialsMetaResponse[]> | CredentialsMetaResponse[]),
) => {
  return http.get("*/api/integrations/:provider/credentials", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1ListCredentialsByProviderResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1ListCredentialsByProviderMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.get("*/api/integrations/:provider/credentials", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1ListCredentialsByProviderResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV1CreateCredentialsMockHandler = (
  overrideResponse?:
    | PostV1CreateCredentials201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<PostV1CreateCredentials201> | PostV1CreateCredentials201),
) => {
  return http.post("*/api/integrations/:provider/credentials", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV1CreateCredentialsResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV1CreateCredentialsMockHandler201 = (
  overrideResponse?:
    | PostV1CreateCredentials201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<PostV1CreateCredentials201> | PostV1CreateCredentials201),
) => {
  return http.post("*/api/integrations/:provider/credentials", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV1CreateCredentialsResponseMock201(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV1CreateCredentialsMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.post("*/api/integrations/:provider/credentials", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV1CreateCredentialsResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1GetCredentialMockHandler = (
  overrideResponse?:
    | GetV1GetCredential200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetV1GetCredential200> | GetV1GetCredential200),
) => {
  return http.get(
    "*/api/integrations/:provider/credentials/:credId",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetV1GetCredentialResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getGetV1GetCredentialMockHandler200 = (
  overrideResponse?:
    | GetV1GetCredential200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetV1GetCredential200> | GetV1GetCredential200),
) => {
  return http.get(
    "*/api/integrations/:provider/credentials/:credId",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetV1GetCredentialResponseMock200(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getGetV1GetCredentialMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.get(
    "*/api/integrations/:provider/credentials/:credId",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetV1GetCredentialResponseMock422(),
        ),
        { status: 422, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getDeleteV1DeleteCredentialsMockHandler = (
  overrideResponse?:
    | DeleteV1DeleteCredentials200
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) =>
        | Promise<DeleteV1DeleteCredentials200>
        | DeleteV1DeleteCredentials200),
) => {
  return http.delete(
    "*/api/integrations/:provider/credentials/:credId",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getDeleteV1DeleteCredentialsResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getDeleteV1DeleteCredentialsMockHandler200 = (
  overrideResponse?:
    | DeleteV1DeleteCredentials200
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) =>
        | Promise<DeleteV1DeleteCredentials200>
        | DeleteV1DeleteCredentials200),
) => {
  return http.delete(
    "*/api/integrations/:provider/credentials/:credId",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getDeleteV1DeleteCredentialsResponseMock200(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getDeleteV1DeleteCredentialsMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.delete(
    "*/api/integrations/:provider/credentials/:credId",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getDeleteV1DeleteCredentialsResponseMock422(),
        ),
        { status: 422, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getPostV1WebhookIngressGenericMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post(
    "*/api/integrations/:provider/webhooks/:webhookId/ingress",
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 200 });
    },
  );
};

export const getPostV1WebhookIngressGenericMockHandler200 = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post(
    "*/api/integrations/:provider/webhooks/:webhookId/ingress",
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 200 });
    },
  );
};

export const getPostV1WebhookIngressGenericMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.post(
    "*/api/integrations/:provider/webhooks/:webhookId/ingress",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getPostV1WebhookIngressGenericResponseMock422(),
        ),
        { status: 422, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getPostV1WebhookPingMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post(
    "*/api/integrations/webhooks/:webhookId/ping",
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 200 });
    },
  );
};

export const getPostV1WebhookPingMockHandler200 = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post(
    "*/api/integrations/webhooks/:webhookId/ping",
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 200 });
    },
  );
};

export const getPostV1WebhookPingMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.post(
    "*/api/integrations/webhooks/:webhookId/ping",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getPostV1WebhookPingResponseMock422(),
        ),
        { status: 422, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};
export const getIntegrationsMock = () => [
  getGetV1LoginMockHandler(),
  getPostV1CallbackMockHandler(),
  getGetV1ListCredentialsMockHandler(),
  getGetV1ListCredentialsByProviderMockHandler(),
  getPostV1CreateCredentialsMockHandler(),
  getGetV1GetCredentialMockHandler(),
  getDeleteV1DeleteCredentialsMockHandler(),
  getPostV1WebhookIngressGenericMockHandler(),
  getPostV1WebhookPingMockHandler(),
];
