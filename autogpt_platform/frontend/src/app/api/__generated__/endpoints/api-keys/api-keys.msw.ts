/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * AutoGPT Agent Server
 * This server is used to execute agents that are created by the AutoGPT system.
 * OpenAPI spec version: 0.1
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";

import { APIKeyPermission } from "../../models/aPIKeyPermission";

import { APIKeyStatus } from "../../models/aPIKeyStatus";

import type { APIKeyWithoutHash } from "../../models/aPIKeyWithoutHash";

import type { CreateAPIKeyResponse } from "../../models/createAPIKeyResponse";

import type { GetV1ListUserApiKeys200 } from "../../models/getV1ListUserApiKeys200";

import type { HTTPValidationError } from "../../models/hTTPValidationError";

export const getGetV1ListUserApiKeysResponseMock =
  (): GetV1ListUserApiKeys200 =>
    faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        id: faker.string.alpha({ length: { min: 10, max: 20 } }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        prefix: faker.string.alpha({ length: { min: 10, max: 20 } }),
        postfix: faker.string.alpha({ length: { min: 10, max: 20 } }),
        status: faker.helpers.arrayElement(Object.values(APIKeyStatus)),
        permissions: faker.helpers.arrayElements(
          Object.values(APIKeyPermission),
        ),
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        last_used_at: faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split(".")[0]}Z`,
          null,
        ]),
        revoked_at: faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split(".")[0]}Z`,
          null,
        ]),
        description: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      })),
      {
        [faker.string.alphanumeric(5)]: faker.string.alpha({
          length: { min: 10, max: 20 },
        }),
      },
    ]);

export const getGetV1ListUserApiKeysResponseMock200 =
  (): GetV1ListUserApiKeys200 =>
    faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        id: faker.string.alpha({ length: { min: 10, max: 20 } }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        prefix: faker.string.alpha({ length: { min: 10, max: 20 } }),
        postfix: faker.string.alpha({ length: { min: 10, max: 20 } }),
        status: faker.helpers.arrayElement(Object.values(APIKeyStatus)),
        permissions: faker.helpers.arrayElements(
          Object.values(APIKeyPermission),
        ),
        created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        last_used_at: faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split(".")[0]}Z`,
          null,
        ]),
        revoked_at: faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split(".")[0]}Z`,
          null,
        ]),
        description: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      })),
      {
        [faker.string.alphanumeric(5)]: faker.string.alpha({
          length: { min: 10, max: 20 },
        }),
      },
    ]);

export const getPostV1CreateNewApiKeyResponseMock = (
  overrideResponse: Partial<CreateAPIKeyResponse> = {},
): CreateAPIKeyResponse => ({
  api_key: {
    id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    prefix: faker.string.alpha({ length: { min: 10, max: 20 } }),
    postfix: faker.string.alpha({ length: { min: 10, max: 20 } }),
    status: faker.helpers.arrayElement(Object.values(APIKeyStatus)),
    permissions: faker.helpers.arrayElements(Object.values(APIKeyPermission)),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    last_used_at: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      null,
    ]),
    revoked_at: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      null,
    ]),
    description: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  },
  plain_text_key: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getPostV1CreateNewApiKeyResponseMock200 = (
  overrideResponse: Partial<CreateAPIKeyResponse> = {},
): CreateAPIKeyResponse => ({
  api_key: {
    id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    prefix: faker.string.alpha({ length: { min: 10, max: 20 } }),
    postfix: faker.string.alpha({ length: { min: 10, max: 20 } }),
    status: faker.helpers.arrayElement(Object.values(APIKeyStatus)),
    permissions: faker.helpers.arrayElements(Object.values(APIKeyPermission)),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    last_used_at: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      null,
    ]),
    revoked_at: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      null,
    ]),
    description: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  },
  plain_text_key: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getPostV1CreateNewApiKeyResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV1GetSpecificApiKeyResponseMock = (
  overrideResponse: Partial<APIKeyWithoutHash> = {},
): APIKeyWithoutHash => ({
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  prefix: faker.string.alpha({ length: { min: 10, max: 20 } }),
  postfix: faker.string.alpha({ length: { min: 10, max: 20 } }),
  status: faker.helpers.arrayElement(Object.values(APIKeyStatus)),
  permissions: faker.helpers.arrayElements(Object.values(APIKeyPermission)),
  created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  last_used_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    null,
  ]),
  revoked_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    null,
  ]),
  description: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getGetV1GetSpecificApiKeyResponseMock200 = (
  overrideResponse: Partial<APIKeyWithoutHash> = {},
): APIKeyWithoutHash => ({
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  prefix: faker.string.alpha({ length: { min: 10, max: 20 } }),
  postfix: faker.string.alpha({ length: { min: 10, max: 20 } }),
  status: faker.helpers.arrayElement(Object.values(APIKeyStatus)),
  permissions: faker.helpers.arrayElements(Object.values(APIKeyPermission)),
  created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  last_used_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    null,
  ]),
  revoked_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    null,
  ]),
  description: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getGetV1GetSpecificApiKeyResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getDeleteV1RevokeApiKeyResponseMock = (
  overrideResponse: Partial<APIKeyWithoutHash> = {},
): APIKeyWithoutHash => ({
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  prefix: faker.string.alpha({ length: { min: 10, max: 20 } }),
  postfix: faker.string.alpha({ length: { min: 10, max: 20 } }),
  status: faker.helpers.arrayElement(Object.values(APIKeyStatus)),
  permissions: faker.helpers.arrayElements(Object.values(APIKeyPermission)),
  created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  last_used_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    null,
  ]),
  revoked_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    null,
  ]),
  description: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getDeleteV1RevokeApiKeyResponseMock200 = (
  overrideResponse: Partial<APIKeyWithoutHash> = {},
): APIKeyWithoutHash => ({
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  prefix: faker.string.alpha({ length: { min: 10, max: 20 } }),
  postfix: faker.string.alpha({ length: { min: 10, max: 20 } }),
  status: faker.helpers.arrayElement(Object.values(APIKeyStatus)),
  permissions: faker.helpers.arrayElements(Object.values(APIKeyPermission)),
  created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  last_used_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    null,
  ]),
  revoked_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    null,
  ]),
  description: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getDeleteV1RevokeApiKeyResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostV1SuspendApiKeyResponseMock = (
  overrideResponse: Partial<APIKeyWithoutHash> = {},
): APIKeyWithoutHash => ({
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  prefix: faker.string.alpha({ length: { min: 10, max: 20 } }),
  postfix: faker.string.alpha({ length: { min: 10, max: 20 } }),
  status: faker.helpers.arrayElement(Object.values(APIKeyStatus)),
  permissions: faker.helpers.arrayElements(Object.values(APIKeyPermission)),
  created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  last_used_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    null,
  ]),
  revoked_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    null,
  ]),
  description: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getPostV1SuspendApiKeyResponseMock200 = (
  overrideResponse: Partial<APIKeyWithoutHash> = {},
): APIKeyWithoutHash => ({
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  prefix: faker.string.alpha({ length: { min: 10, max: 20 } }),
  postfix: faker.string.alpha({ length: { min: 10, max: 20 } }),
  status: faker.helpers.arrayElement(Object.values(APIKeyStatus)),
  permissions: faker.helpers.arrayElements(Object.values(APIKeyPermission)),
  created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  last_used_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    null,
  ]),
  revoked_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    null,
  ]),
  description: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getPostV1SuspendApiKeyResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPutV1UpdateKeyPermissionsResponseMock = (
  overrideResponse: Partial<APIKeyWithoutHash> = {},
): APIKeyWithoutHash => ({
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  prefix: faker.string.alpha({ length: { min: 10, max: 20 } }),
  postfix: faker.string.alpha({ length: { min: 10, max: 20 } }),
  status: faker.helpers.arrayElement(Object.values(APIKeyStatus)),
  permissions: faker.helpers.arrayElements(Object.values(APIKeyPermission)),
  created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  last_used_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    null,
  ]),
  revoked_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    null,
  ]),
  description: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getPutV1UpdateKeyPermissionsResponseMock200 = (
  overrideResponse: Partial<APIKeyWithoutHash> = {},
): APIKeyWithoutHash => ({
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  prefix: faker.string.alpha({ length: { min: 10, max: 20 } }),
  postfix: faker.string.alpha({ length: { min: 10, max: 20 } }),
  status: faker.helpers.arrayElement(Object.values(APIKeyStatus)),
  permissions: faker.helpers.arrayElements(Object.values(APIKeyPermission)),
  created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  last_used_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    null,
  ]),
  revoked_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    null,
  ]),
  description: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getPutV1UpdateKeyPermissionsResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV1ListUserApiKeysMockHandler = (
  overrideResponse?:
    | GetV1ListUserApiKeys200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetV1ListUserApiKeys200> | GetV1ListUserApiKeys200),
) => {
  return http.get("*/api/api-keys", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1ListUserApiKeysResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1ListUserApiKeysMockHandler200 = (
  overrideResponse?:
    | GetV1ListUserApiKeys200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetV1ListUserApiKeys200> | GetV1ListUserApiKeys200),
) => {
  return http.get("*/api/api-keys", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1ListUserApiKeysResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV1CreateNewApiKeyMockHandler = (
  overrideResponse?:
    | CreateAPIKeyResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<CreateAPIKeyResponse> | CreateAPIKeyResponse),
) => {
  return http.post("*/api/api-keys", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV1CreateNewApiKeyResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV1CreateNewApiKeyMockHandler200 = (
  overrideResponse?:
    | CreateAPIKeyResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<CreateAPIKeyResponse> | CreateAPIKeyResponse),
) => {
  return http.post("*/api/api-keys", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV1CreateNewApiKeyResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV1CreateNewApiKeyMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.post("*/api/api-keys", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV1CreateNewApiKeyResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1GetSpecificApiKeyMockHandler = (
  overrideResponse?:
    | APIKeyWithoutHash
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<APIKeyWithoutHash> | APIKeyWithoutHash),
) => {
  return http.get("*/api/api-keys/:keyId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1GetSpecificApiKeyResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1GetSpecificApiKeyMockHandler200 = (
  overrideResponse?:
    | APIKeyWithoutHash
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<APIKeyWithoutHash> | APIKeyWithoutHash),
) => {
  return http.get("*/api/api-keys/:keyId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1GetSpecificApiKeyResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1GetSpecificApiKeyMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.get("*/api/api-keys/:keyId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1GetSpecificApiKeyResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getDeleteV1RevokeApiKeyMockHandler = (
  overrideResponse?:
    | APIKeyWithoutHash
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<APIKeyWithoutHash> | APIKeyWithoutHash),
) => {
  return http.delete("*/api/api-keys/:keyId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getDeleteV1RevokeApiKeyResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getDeleteV1RevokeApiKeyMockHandler200 = (
  overrideResponse?:
    | APIKeyWithoutHash
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<APIKeyWithoutHash> | APIKeyWithoutHash),
) => {
  return http.delete("*/api/api-keys/:keyId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getDeleteV1RevokeApiKeyResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getDeleteV1RevokeApiKeyMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.delete("*/api/api-keys/:keyId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getDeleteV1RevokeApiKeyResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV1SuspendApiKeyMockHandler = (
  overrideResponse?:
    | APIKeyWithoutHash
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<APIKeyWithoutHash> | APIKeyWithoutHash),
) => {
  return http.post("*/api/api-keys/:keyId/suspend", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV1SuspendApiKeyResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV1SuspendApiKeyMockHandler200 = (
  overrideResponse?:
    | APIKeyWithoutHash
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<APIKeyWithoutHash> | APIKeyWithoutHash),
) => {
  return http.post("*/api/api-keys/:keyId/suspend", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV1SuspendApiKeyResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV1SuspendApiKeyMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.post("*/api/api-keys/:keyId/suspend", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV1SuspendApiKeyResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPutV1UpdateKeyPermissionsMockHandler = (
  overrideResponse?:
    | APIKeyWithoutHash
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<APIKeyWithoutHash> | APIKeyWithoutHash),
) => {
  return http.put("*/api/api-keys/:keyId/permissions", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPutV1UpdateKeyPermissionsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPutV1UpdateKeyPermissionsMockHandler200 = (
  overrideResponse?:
    | APIKeyWithoutHash
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<APIKeyWithoutHash> | APIKeyWithoutHash),
) => {
  return http.put("*/api/api-keys/:keyId/permissions", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPutV1UpdateKeyPermissionsResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPutV1UpdateKeyPermissionsMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.put("*/api/api-keys/:keyId/permissions", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPutV1UpdateKeyPermissionsResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getApiKeysMock = () => [
  getGetV1ListUserApiKeysMockHandler(),
  getPostV1CreateNewApiKeyMockHandler(),
  getGetV1GetSpecificApiKeyMockHandler(),
  getDeleteV1RevokeApiKeyMockHandler(),
  getPostV1SuspendApiKeyMockHandler(),
  getPutV1UpdateKeyPermissionsMockHandler(),
];
