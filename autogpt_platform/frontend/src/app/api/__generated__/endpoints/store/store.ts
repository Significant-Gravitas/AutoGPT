/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * AutoGPT Agent Server
 * This server is used to execute agents that are created by the AutoGPT system.
 * OpenAPI spec version: 0.1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { BodyPostV2UploadSubmissionMedia } from "../../models/bodyPostV2UploadSubmissionMedia";

import type { CreatorDetails } from "../../models/creatorDetails";

import type { CreatorsResponse } from "../../models/creatorsResponse";

import type { GetV2ListMySubmissionsParams } from "../../models/getV2ListMySubmissionsParams";

import type { GetV2ListStoreAgentsParams } from "../../models/getV2ListStoreAgentsParams";

import type { GetV2ListStoreCreatorsParams } from "../../models/getV2ListStoreCreatorsParams";

import type { HTTPValidationError } from "../../models/hTTPValidationError";

import type { MyAgentsResponse } from "../../models/myAgentsResponse";

import type { PostV2GenerateSubmissionImageParams } from "../../models/postV2GenerateSubmissionImageParams";

import type { Profile } from "../../models/profile";

import type { ProfileDetails } from "../../models/profileDetails";

import type { StoreAgentDetails } from "../../models/storeAgentDetails";

import type { StoreAgentsResponse } from "../../models/storeAgentsResponse";

import type { StoreReview } from "../../models/storeReview";

import type { StoreReviewCreate } from "../../models/storeReviewCreate";

import type { StoreSubmission } from "../../models/storeSubmission";

import type { StoreSubmissionRequest } from "../../models/storeSubmissionRequest";

import type { StoreSubmissionsResponse } from "../../models/storeSubmissionsResponse";

import { customMutator } from "../../../mutators/custom-mutator";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Get the profile details for the authenticated user.
 * @summary Get user profile
 */
export type getV2GetUserProfileResponse200 = {
  data: ProfileDetails;
  status: 200;
};

export type getV2GetUserProfileResponseComposite =
  getV2GetUserProfileResponse200;

export type getV2GetUserProfileResponse =
  getV2GetUserProfileResponseComposite & {
    headers: Headers;
  };

export const getGetV2GetUserProfileUrl = () => {
  return `/api/store/profile`;
};

export const getV2GetUserProfile = async (
  options?: RequestInit,
): Promise<getV2GetUserProfileResponse> => {
  return customMutator<getV2GetUserProfileResponse>(
    getGetV2GetUserProfileUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV2GetUserProfileQueryKey = () => {
  return [`/api/store/profile`] as const;
};

export const getGetV2GetUserProfileQueryOptions = <
  TData = Awaited<ReturnType<typeof getV2GetUserProfile>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getV2GetUserProfile>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customMutator>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetV2GetUserProfileQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV2GetUserProfile>>
  > = ({ signal }) => getV2GetUserProfile({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV2GetUserProfile>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV2GetUserProfileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV2GetUserProfile>>
>;
export type GetV2GetUserProfileQueryError = unknown;

export function useGetV2GetUserProfile<
  TData = Awaited<ReturnType<typeof getV2GetUserProfile>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetUserProfile>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2GetUserProfile>>,
          TError,
          Awaited<ReturnType<typeof getV2GetUserProfile>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2GetUserProfile<
  TData = Awaited<ReturnType<typeof getV2GetUserProfile>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetUserProfile>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2GetUserProfile>>,
          TError,
          Awaited<ReturnType<typeof getV2GetUserProfile>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2GetUserProfile<
  TData = Awaited<ReturnType<typeof getV2GetUserProfile>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetUserProfile>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get user profile
 */

export function useGetV2GetUserProfile<
  TData = Awaited<ReturnType<typeof getV2GetUserProfile>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetUserProfile>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV2GetUserProfileQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update the store profile for the authenticated user.

Args:
    profile (Profile): The updated profile details
    user_id (str): ID of the authenticated user

Returns:
    CreatorDetails: The updated profile

Raises:
    HTTPException: If there is an error updating the profile
 * @summary Update user profile
 */
export type postV2UpdateUserProfileResponse200 = {
  data: CreatorDetails;
  status: 200;
};

export type postV2UpdateUserProfileResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type postV2UpdateUserProfileResponseComposite =
  | postV2UpdateUserProfileResponse200
  | postV2UpdateUserProfileResponse422;

export type postV2UpdateUserProfileResponse =
  postV2UpdateUserProfileResponseComposite & {
    headers: Headers;
  };

export const getPostV2UpdateUserProfileUrl = () => {
  return `/api/store/profile`;
};

export const postV2UpdateUserProfile = async (
  profile: Profile,
  options?: RequestInit,
): Promise<postV2UpdateUserProfileResponse> => {
  return customMutator<postV2UpdateUserProfileResponse>(
    getPostV2UpdateUserProfileUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(profile),
    },
  );
};

export const getPostV2UpdateUserProfileMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV2UpdateUserProfile>>,
    TError,
    { data: Profile },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV2UpdateUserProfile>>,
  TError,
  { data: Profile },
  TContext
> => {
  const mutationKey = ["postV2UpdateUserProfile"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV2UpdateUserProfile>>,
    { data: Profile }
  > = (props) => {
    const { data } = props ?? {};

    return postV2UpdateUserProfile(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV2UpdateUserProfileMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV2UpdateUserProfile>>
>;
export type PostV2UpdateUserProfileMutationBody = Profile;
export type PostV2UpdateUserProfileMutationError = HTTPValidationError;

/**
 * @summary Update user profile
 */
export const usePostV2UpdateUserProfile = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV2UpdateUserProfile>>,
      TError,
      { data: Profile },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postV2UpdateUserProfile>>,
  TError,
  { data: Profile },
  TContext
> => {
  const mutationOptions = getPostV2UpdateUserProfileMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Get a paginated list of agents from the store with optional filtering and sorting.

Args:
    featured (bool, optional): Filter to only show featured agents. Defaults to False.
    creator (str | None, optional): Filter agents by creator username. Defaults to None.
    sorted_by (str | None, optional): Sort agents by "runs" or "rating". Defaults to None.
    search_query (str | None, optional): Search agents by name, subheading and description. Defaults to None.
    category (str | None, optional): Filter agents by category. Defaults to None.
    page (int, optional): Page number for pagination. Defaults to 1.
    page_size (int, optional): Number of agents per page. Defaults to 20.

Returns:
    StoreAgentsResponse: Paginated list of agents matching the filters

Raises:
    HTTPException: If page or page_size are less than 1

Used for:
- Home Page Featured Agents
- Home Page Top Agents
- Search Results
- Agent Details - Other Agents By Creator
- Agent Details - Similar Agents
- Creator Details - Agents By Creator
 * @summary List store agents
 */
export type getV2ListStoreAgentsResponse200 = {
  data: StoreAgentsResponse;
  status: 200;
};

export type getV2ListStoreAgentsResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type getV2ListStoreAgentsResponseComposite =
  | getV2ListStoreAgentsResponse200
  | getV2ListStoreAgentsResponse422;

export type getV2ListStoreAgentsResponse =
  getV2ListStoreAgentsResponseComposite & {
    headers: Headers;
  };

export const getGetV2ListStoreAgentsUrl = (
  params?: GetV2ListStoreAgentsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/store/agents?${stringifiedParams}`
    : `/api/store/agents`;
};

export const getV2ListStoreAgents = async (
  params?: GetV2ListStoreAgentsParams,
  options?: RequestInit,
): Promise<getV2ListStoreAgentsResponse> => {
  return customMutator<getV2ListStoreAgentsResponse>(
    getGetV2ListStoreAgentsUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV2ListStoreAgentsQueryKey = (
  params?: GetV2ListStoreAgentsParams,
) => {
  return [`/api/store/agents`, ...(params ? [params] : [])] as const;
};

export const getGetV2ListStoreAgentsQueryOptions = <
  TData = Awaited<ReturnType<typeof getV2ListStoreAgents>>,
  TError = HTTPValidationError,
>(
  params?: GetV2ListStoreAgentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2ListStoreAgents>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetV2ListStoreAgentsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV2ListStoreAgents>>
  > = ({ signal }) =>
    getV2ListStoreAgents(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV2ListStoreAgents>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV2ListStoreAgentsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV2ListStoreAgents>>
>;
export type GetV2ListStoreAgentsQueryError = HTTPValidationError;

export function useGetV2ListStoreAgents<
  TData = Awaited<ReturnType<typeof getV2ListStoreAgents>>,
  TError = HTTPValidationError,
>(
  params: undefined | GetV2ListStoreAgentsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2ListStoreAgents>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2ListStoreAgents>>,
          TError,
          Awaited<ReturnType<typeof getV2ListStoreAgents>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2ListStoreAgents<
  TData = Awaited<ReturnType<typeof getV2ListStoreAgents>>,
  TError = HTTPValidationError,
>(
  params?: GetV2ListStoreAgentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2ListStoreAgents>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2ListStoreAgents>>,
          TError,
          Awaited<ReturnType<typeof getV2ListStoreAgents>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2ListStoreAgents<
  TData = Awaited<ReturnType<typeof getV2ListStoreAgents>>,
  TError = HTTPValidationError,
>(
  params?: GetV2ListStoreAgentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2ListStoreAgents>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List store agents
 */

export function useGetV2ListStoreAgents<
  TData = Awaited<ReturnType<typeof getV2ListStoreAgents>>,
  TError = HTTPValidationError,
>(
  params?: GetV2ListStoreAgentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2ListStoreAgents>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV2ListStoreAgentsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * This is only used on the AgentDetails Page

It returns the store listing agents details.
 * @summary Get specific agent
 */
export type getV2GetSpecificAgentResponse200 = {
  data: StoreAgentDetails;
  status: 200;
};

export type getV2GetSpecificAgentResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type getV2GetSpecificAgentResponseComposite =
  | getV2GetSpecificAgentResponse200
  | getV2GetSpecificAgentResponse422;

export type getV2GetSpecificAgentResponse =
  getV2GetSpecificAgentResponseComposite & {
    headers: Headers;
  };

export const getGetV2GetSpecificAgentUrl = (
  username: string,
  agentName: string,
) => {
  return `/api/store/agents/${username}/${agentName}`;
};

export const getV2GetSpecificAgent = async (
  username: string,
  agentName: string,
  options?: RequestInit,
): Promise<getV2GetSpecificAgentResponse> => {
  return customMutator<getV2GetSpecificAgentResponse>(
    getGetV2GetSpecificAgentUrl(username, agentName),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV2GetSpecificAgentQueryKey = (
  username: string,
  agentName: string,
) => {
  return [`/api/store/agents/${username}/${agentName}`] as const;
};

export const getGetV2GetSpecificAgentQueryOptions = <
  TData = Awaited<ReturnType<typeof getV2GetSpecificAgent>>,
  TError = HTTPValidationError,
>(
  username: string,
  agentName: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetSpecificAgent>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetV2GetSpecificAgentQueryKey(username, agentName);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV2GetSpecificAgent>>
  > = ({ signal }) =>
    getV2GetSpecificAgent(username, agentName, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!(username && agentName),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getV2GetSpecificAgent>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV2GetSpecificAgentQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV2GetSpecificAgent>>
>;
export type GetV2GetSpecificAgentQueryError = HTTPValidationError;

export function useGetV2GetSpecificAgent<
  TData = Awaited<ReturnType<typeof getV2GetSpecificAgent>>,
  TError = HTTPValidationError,
>(
  username: string,
  agentName: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetSpecificAgent>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2GetSpecificAgent>>,
          TError,
          Awaited<ReturnType<typeof getV2GetSpecificAgent>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2GetSpecificAgent<
  TData = Awaited<ReturnType<typeof getV2GetSpecificAgent>>,
  TError = HTTPValidationError,
>(
  username: string,
  agentName: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetSpecificAgent>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2GetSpecificAgent>>,
          TError,
          Awaited<ReturnType<typeof getV2GetSpecificAgent>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2GetSpecificAgent<
  TData = Awaited<ReturnType<typeof getV2GetSpecificAgent>>,
  TError = HTTPValidationError,
>(
  username: string,
  agentName: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetSpecificAgent>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get specific agent
 */

export function useGetV2GetSpecificAgent<
  TData = Awaited<ReturnType<typeof getV2GetSpecificAgent>>,
  TError = HTTPValidationError,
>(
  username: string,
  agentName: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetSpecificAgent>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV2GetSpecificAgentQueryOptions(
    username,
    agentName,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get Agent Graph from Store Listing Version ID.
 * @summary Get agent graph
 */
export type getV2GetAgentGraphResponse200 = {
  data: unknown;
  status: 200;
};

export type getV2GetAgentGraphResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type getV2GetAgentGraphResponseComposite =
  | getV2GetAgentGraphResponse200
  | getV2GetAgentGraphResponse422;

export type getV2GetAgentGraphResponse = getV2GetAgentGraphResponseComposite & {
  headers: Headers;
};

export const getGetV2GetAgentGraphUrl = (storeListingVersionId: string) => {
  return `/api/store/graph/${storeListingVersionId}`;
};

export const getV2GetAgentGraph = async (
  storeListingVersionId: string,
  options?: RequestInit,
): Promise<getV2GetAgentGraphResponse> => {
  return customMutator<getV2GetAgentGraphResponse>(
    getGetV2GetAgentGraphUrl(storeListingVersionId),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV2GetAgentGraphQueryKey = (
  storeListingVersionId: string,
) => {
  return [`/api/store/graph/${storeListingVersionId}`] as const;
};

export const getGetV2GetAgentGraphQueryOptions = <
  TData = Awaited<ReturnType<typeof getV2GetAgentGraph>>,
  TError = HTTPValidationError,
>(
  storeListingVersionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetAgentGraph>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetV2GetAgentGraphQueryKey(storeListingVersionId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV2GetAgentGraph>>
  > = ({ signal }) =>
    getV2GetAgentGraph(storeListingVersionId, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!storeListingVersionId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getV2GetAgentGraph>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV2GetAgentGraphQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV2GetAgentGraph>>
>;
export type GetV2GetAgentGraphQueryError = HTTPValidationError;

export function useGetV2GetAgentGraph<
  TData = Awaited<ReturnType<typeof getV2GetAgentGraph>>,
  TError = HTTPValidationError,
>(
  storeListingVersionId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetAgentGraph>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2GetAgentGraph>>,
          TError,
          Awaited<ReturnType<typeof getV2GetAgentGraph>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2GetAgentGraph<
  TData = Awaited<ReturnType<typeof getV2GetAgentGraph>>,
  TError = HTTPValidationError,
>(
  storeListingVersionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetAgentGraph>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2GetAgentGraph>>,
          TError,
          Awaited<ReturnType<typeof getV2GetAgentGraph>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2GetAgentGraph<
  TData = Awaited<ReturnType<typeof getV2GetAgentGraph>>,
  TError = HTTPValidationError,
>(
  storeListingVersionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetAgentGraph>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get agent graph
 */

export function useGetV2GetAgentGraph<
  TData = Awaited<ReturnType<typeof getV2GetAgentGraph>>,
  TError = HTTPValidationError,
>(
  storeListingVersionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetAgentGraph>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV2GetAgentGraphQueryOptions(
    storeListingVersionId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get Store Agent Details from Store Listing Version ID.
 * @summary Get agent by version
 */
export type getV2GetAgentByVersionResponse200 = {
  data: StoreAgentDetails;
  status: 200;
};

export type getV2GetAgentByVersionResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type getV2GetAgentByVersionResponseComposite =
  | getV2GetAgentByVersionResponse200
  | getV2GetAgentByVersionResponse422;

export type getV2GetAgentByVersionResponse =
  getV2GetAgentByVersionResponseComposite & {
    headers: Headers;
  };

export const getGetV2GetAgentByVersionUrl = (storeListingVersionId: string) => {
  return `/api/store/agents/${storeListingVersionId}`;
};

export const getV2GetAgentByVersion = async (
  storeListingVersionId: string,
  options?: RequestInit,
): Promise<getV2GetAgentByVersionResponse> => {
  return customMutator<getV2GetAgentByVersionResponse>(
    getGetV2GetAgentByVersionUrl(storeListingVersionId),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV2GetAgentByVersionQueryKey = (
  storeListingVersionId: string,
) => {
  return [`/api/store/agents/${storeListingVersionId}`] as const;
};

export const getGetV2GetAgentByVersionQueryOptions = <
  TData = Awaited<ReturnType<typeof getV2GetAgentByVersion>>,
  TError = HTTPValidationError,
>(
  storeListingVersionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetAgentByVersion>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetV2GetAgentByVersionQueryKey(storeListingVersionId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV2GetAgentByVersion>>
  > = ({ signal }) =>
    getV2GetAgentByVersion(storeListingVersionId, {
      signal,
      ...requestOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!storeListingVersionId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getV2GetAgentByVersion>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV2GetAgentByVersionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV2GetAgentByVersion>>
>;
export type GetV2GetAgentByVersionQueryError = HTTPValidationError;

export function useGetV2GetAgentByVersion<
  TData = Awaited<ReturnType<typeof getV2GetAgentByVersion>>,
  TError = HTTPValidationError,
>(
  storeListingVersionId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetAgentByVersion>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2GetAgentByVersion>>,
          TError,
          Awaited<ReturnType<typeof getV2GetAgentByVersion>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2GetAgentByVersion<
  TData = Awaited<ReturnType<typeof getV2GetAgentByVersion>>,
  TError = HTTPValidationError,
>(
  storeListingVersionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetAgentByVersion>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2GetAgentByVersion>>,
          TError,
          Awaited<ReturnType<typeof getV2GetAgentByVersion>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2GetAgentByVersion<
  TData = Awaited<ReturnType<typeof getV2GetAgentByVersion>>,
  TError = HTTPValidationError,
>(
  storeListingVersionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetAgentByVersion>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get agent by version
 */

export function useGetV2GetAgentByVersion<
  TData = Awaited<ReturnType<typeof getV2GetAgentByVersion>>,
  TError = HTTPValidationError,
>(
  storeListingVersionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetAgentByVersion>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV2GetAgentByVersionQueryOptions(
    storeListingVersionId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a review for a store agent.

Args:
    username: Creator's username
    agent_name: Name/slug of the agent
    review: Review details including score and optional comments
    user_id: ID of authenticated user creating the review

Returns:
    The created review
 * @summary Create agent review
 */
export type postV2CreateAgentReviewResponse200 = {
  data: StoreReview;
  status: 200;
};

export type postV2CreateAgentReviewResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type postV2CreateAgentReviewResponseComposite =
  | postV2CreateAgentReviewResponse200
  | postV2CreateAgentReviewResponse422;

export type postV2CreateAgentReviewResponse =
  postV2CreateAgentReviewResponseComposite & {
    headers: Headers;
  };

export const getPostV2CreateAgentReviewUrl = (
  username: string,
  agentName: string,
) => {
  return `/api/store/agents/${username}/${agentName}/review`;
};

export const postV2CreateAgentReview = async (
  username: string,
  agentName: string,
  storeReviewCreate: StoreReviewCreate,
  options?: RequestInit,
): Promise<postV2CreateAgentReviewResponse> => {
  return customMutator<postV2CreateAgentReviewResponse>(
    getPostV2CreateAgentReviewUrl(username, agentName),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(storeReviewCreate),
    },
  );
};

export const getPostV2CreateAgentReviewMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV2CreateAgentReview>>,
    TError,
    { username: string; agentName: string; data: StoreReviewCreate },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV2CreateAgentReview>>,
  TError,
  { username: string; agentName: string; data: StoreReviewCreate },
  TContext
> => {
  const mutationKey = ["postV2CreateAgentReview"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV2CreateAgentReview>>,
    { username: string; agentName: string; data: StoreReviewCreate }
  > = (props) => {
    const { username, agentName, data } = props ?? {};

    return postV2CreateAgentReview(username, agentName, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV2CreateAgentReviewMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV2CreateAgentReview>>
>;
export type PostV2CreateAgentReviewMutationBody = StoreReviewCreate;
export type PostV2CreateAgentReviewMutationError = HTTPValidationError;

/**
 * @summary Create agent review
 */
export const usePostV2CreateAgentReview = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV2CreateAgentReview>>,
      TError,
      { username: string; agentName: string; data: StoreReviewCreate },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postV2CreateAgentReview>>,
  TError,
  { username: string; agentName: string; data: StoreReviewCreate },
  TContext
> => {
  const mutationOptions = getPostV2CreateAgentReviewMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * This is needed for:
- Home Page Featured Creators
- Search Results Page

---

To support this functionality we need:
- featured: bool - to limit the list to just featured agents
- search_query: str - vector search based on the creators profile description.
- sorted_by: [agent_rating, agent_runs] -
 * @summary List store creators
 */
export type getV2ListStoreCreatorsResponse200 = {
  data: CreatorsResponse;
  status: 200;
};

export type getV2ListStoreCreatorsResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type getV2ListStoreCreatorsResponseComposite =
  | getV2ListStoreCreatorsResponse200
  | getV2ListStoreCreatorsResponse422;

export type getV2ListStoreCreatorsResponse =
  getV2ListStoreCreatorsResponseComposite & {
    headers: Headers;
  };

export const getGetV2ListStoreCreatorsUrl = (
  params?: GetV2ListStoreCreatorsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/store/creators?${stringifiedParams}`
    : `/api/store/creators`;
};

export const getV2ListStoreCreators = async (
  params?: GetV2ListStoreCreatorsParams,
  options?: RequestInit,
): Promise<getV2ListStoreCreatorsResponse> => {
  return customMutator<getV2ListStoreCreatorsResponse>(
    getGetV2ListStoreCreatorsUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV2ListStoreCreatorsQueryKey = (
  params?: GetV2ListStoreCreatorsParams,
) => {
  return [`/api/store/creators`, ...(params ? [params] : [])] as const;
};

export const getGetV2ListStoreCreatorsQueryOptions = <
  TData = Awaited<ReturnType<typeof getV2ListStoreCreators>>,
  TError = HTTPValidationError,
>(
  params?: GetV2ListStoreCreatorsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2ListStoreCreators>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetV2ListStoreCreatorsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV2ListStoreCreators>>
  > = ({ signal }) =>
    getV2ListStoreCreators(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV2ListStoreCreators>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV2ListStoreCreatorsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV2ListStoreCreators>>
>;
export type GetV2ListStoreCreatorsQueryError = HTTPValidationError;

export function useGetV2ListStoreCreators<
  TData = Awaited<ReturnType<typeof getV2ListStoreCreators>>,
  TError = HTTPValidationError,
>(
  params: undefined | GetV2ListStoreCreatorsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2ListStoreCreators>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2ListStoreCreators>>,
          TError,
          Awaited<ReturnType<typeof getV2ListStoreCreators>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2ListStoreCreators<
  TData = Awaited<ReturnType<typeof getV2ListStoreCreators>>,
  TError = HTTPValidationError,
>(
  params?: GetV2ListStoreCreatorsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2ListStoreCreators>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2ListStoreCreators>>,
          TError,
          Awaited<ReturnType<typeof getV2ListStoreCreators>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2ListStoreCreators<
  TData = Awaited<ReturnType<typeof getV2ListStoreCreators>>,
  TError = HTTPValidationError,
>(
  params?: GetV2ListStoreCreatorsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2ListStoreCreators>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List store creators
 */

export function useGetV2ListStoreCreators<
  TData = Awaited<ReturnType<typeof getV2ListStoreCreators>>,
  TError = HTTPValidationError,
>(
  params?: GetV2ListStoreCreatorsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2ListStoreCreators>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV2ListStoreCreatorsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get the details of a creator
- Creator Details Page
 * @summary Get creator details
 */
export type getV2GetCreatorDetailsResponse200 = {
  data: CreatorDetails;
  status: 200;
};

export type getV2GetCreatorDetailsResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type getV2GetCreatorDetailsResponseComposite =
  | getV2GetCreatorDetailsResponse200
  | getV2GetCreatorDetailsResponse422;

export type getV2GetCreatorDetailsResponse =
  getV2GetCreatorDetailsResponseComposite & {
    headers: Headers;
  };

export const getGetV2GetCreatorDetailsUrl = (username: string) => {
  return `/api/store/creator/${username}`;
};

export const getV2GetCreatorDetails = async (
  username: string,
  options?: RequestInit,
): Promise<getV2GetCreatorDetailsResponse> => {
  return customMutator<getV2GetCreatorDetailsResponse>(
    getGetV2GetCreatorDetailsUrl(username),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV2GetCreatorDetailsQueryKey = (username: string) => {
  return [`/api/store/creator/${username}`] as const;
};

export const getGetV2GetCreatorDetailsQueryOptions = <
  TData = Awaited<ReturnType<typeof getV2GetCreatorDetails>>,
  TError = HTTPValidationError,
>(
  username: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetCreatorDetails>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetV2GetCreatorDetailsQueryKey(username);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV2GetCreatorDetails>>
  > = ({ signal }) =>
    getV2GetCreatorDetails(username, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!username,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getV2GetCreatorDetails>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV2GetCreatorDetailsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV2GetCreatorDetails>>
>;
export type GetV2GetCreatorDetailsQueryError = HTTPValidationError;

export function useGetV2GetCreatorDetails<
  TData = Awaited<ReturnType<typeof getV2GetCreatorDetails>>,
  TError = HTTPValidationError,
>(
  username: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetCreatorDetails>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2GetCreatorDetails>>,
          TError,
          Awaited<ReturnType<typeof getV2GetCreatorDetails>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2GetCreatorDetails<
  TData = Awaited<ReturnType<typeof getV2GetCreatorDetails>>,
  TError = HTTPValidationError,
>(
  username: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetCreatorDetails>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2GetCreatorDetails>>,
          TError,
          Awaited<ReturnType<typeof getV2GetCreatorDetails>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2GetCreatorDetails<
  TData = Awaited<ReturnType<typeof getV2GetCreatorDetails>>,
  TError = HTTPValidationError,
>(
  username: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetCreatorDetails>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get creator details
 */

export function useGetV2GetCreatorDetails<
  TData = Awaited<ReturnType<typeof getV2GetCreatorDetails>>,
  TError = HTTPValidationError,
>(
  username: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetCreatorDetails>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV2GetCreatorDetailsQueryOptions(username, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get my agents
 */
export type getV2GetMyAgentsResponse200 = {
  data: MyAgentsResponse;
  status: 200;
};

export type getV2GetMyAgentsResponseComposite = getV2GetMyAgentsResponse200;

export type getV2GetMyAgentsResponse = getV2GetMyAgentsResponseComposite & {
  headers: Headers;
};

export const getGetV2GetMyAgentsUrl = () => {
  return `/api/store/myagents`;
};

export const getV2GetMyAgents = async (
  options?: RequestInit,
): Promise<getV2GetMyAgentsResponse> => {
  return customMutator<getV2GetMyAgentsResponse>(getGetV2GetMyAgentsUrl(), {
    ...options,
    method: "GET",
  });
};

export const getGetV2GetMyAgentsQueryKey = () => {
  return [`/api/store/myagents`] as const;
};

export const getGetV2GetMyAgentsQueryOptions = <
  TData = Awaited<ReturnType<typeof getV2GetMyAgents>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getV2GetMyAgents>>, TError, TData>
  >;
  request?: SecondParameter<typeof customMutator>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetV2GetMyAgentsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV2GetMyAgents>>
  > = ({ signal }) => getV2GetMyAgents({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV2GetMyAgents>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV2GetMyAgentsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV2GetMyAgents>>
>;
export type GetV2GetMyAgentsQueryError = unknown;

export function useGetV2GetMyAgents<
  TData = Awaited<ReturnType<typeof getV2GetMyAgents>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetMyAgents>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2GetMyAgents>>,
          TError,
          Awaited<ReturnType<typeof getV2GetMyAgents>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2GetMyAgents<
  TData = Awaited<ReturnType<typeof getV2GetMyAgents>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetMyAgents>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2GetMyAgents>>,
          TError,
          Awaited<ReturnType<typeof getV2GetMyAgents>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2GetMyAgents<
  TData = Awaited<ReturnType<typeof getV2GetMyAgents>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetMyAgents>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get my agents
 */

export function useGetV2GetMyAgents<
  TData = Awaited<ReturnType<typeof getV2GetMyAgents>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetMyAgents>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV2GetMyAgentsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Delete a store listing submission.

Args:
    user_id (str): ID of the authenticated user
    submission_id (str): ID of the submission to be deleted

Returns:
    bool: True if the submission was successfully deleted, False otherwise
 * @summary Delete store submission
 */
export type deleteV2DeleteStoreSubmissionResponse200 = {
  data: boolean;
  status: 200;
};

export type deleteV2DeleteStoreSubmissionResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type deleteV2DeleteStoreSubmissionResponseComposite =
  | deleteV2DeleteStoreSubmissionResponse200
  | deleteV2DeleteStoreSubmissionResponse422;

export type deleteV2DeleteStoreSubmissionResponse =
  deleteV2DeleteStoreSubmissionResponseComposite & {
    headers: Headers;
  };

export const getDeleteV2DeleteStoreSubmissionUrl = (submissionId: string) => {
  return `/api/store/submissions/${submissionId}`;
};

export const deleteV2DeleteStoreSubmission = async (
  submissionId: string,
  options?: RequestInit,
): Promise<deleteV2DeleteStoreSubmissionResponse> => {
  return customMutator<deleteV2DeleteStoreSubmissionResponse>(
    getDeleteV2DeleteStoreSubmissionUrl(submissionId),
    {
      ...options,
      method: "DELETE",
    },
  );
};

export const getDeleteV2DeleteStoreSubmissionMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteV2DeleteStoreSubmission>>,
    TError,
    { submissionId: string },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteV2DeleteStoreSubmission>>,
  TError,
  { submissionId: string },
  TContext
> => {
  const mutationKey = ["deleteV2DeleteStoreSubmission"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteV2DeleteStoreSubmission>>,
    { submissionId: string }
  > = (props) => {
    const { submissionId } = props ?? {};

    return deleteV2DeleteStoreSubmission(submissionId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteV2DeleteStoreSubmissionMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteV2DeleteStoreSubmission>>
>;

export type DeleteV2DeleteStoreSubmissionMutationError = HTTPValidationError;

/**
 * @summary Delete store submission
 */
export const useDeleteV2DeleteStoreSubmission = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteV2DeleteStoreSubmission>>,
      TError,
      { submissionId: string },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteV2DeleteStoreSubmission>>,
  TError,
  { submissionId: string },
  TContext
> => {
  const mutationOptions =
    getDeleteV2DeleteStoreSubmissionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Get a paginated list of store submissions for the authenticated user.

Args:
    user_id (str): ID of the authenticated user
    page (int, optional): Page number for pagination. Defaults to 1.
    page_size (int, optional): Number of submissions per page. Defaults to 20.

Returns:
    StoreListingsResponse: Paginated list of store submissions

Raises:
    HTTPException: If page or page_size are less than 1
 * @summary List my submissions
 */
export type getV2ListMySubmissionsResponse200 = {
  data: StoreSubmissionsResponse;
  status: 200;
};

export type getV2ListMySubmissionsResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type getV2ListMySubmissionsResponseComposite =
  | getV2ListMySubmissionsResponse200
  | getV2ListMySubmissionsResponse422;

export type getV2ListMySubmissionsResponse =
  getV2ListMySubmissionsResponseComposite & {
    headers: Headers;
  };

export const getGetV2ListMySubmissionsUrl = (
  params?: GetV2ListMySubmissionsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/store/submissions?${stringifiedParams}`
    : `/api/store/submissions`;
};

export const getV2ListMySubmissions = async (
  params?: GetV2ListMySubmissionsParams,
  options?: RequestInit,
): Promise<getV2ListMySubmissionsResponse> => {
  return customMutator<getV2ListMySubmissionsResponse>(
    getGetV2ListMySubmissionsUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV2ListMySubmissionsQueryKey = (
  params?: GetV2ListMySubmissionsParams,
) => {
  return [`/api/store/submissions`, ...(params ? [params] : [])] as const;
};

export const getGetV2ListMySubmissionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getV2ListMySubmissions>>,
  TError = HTTPValidationError,
>(
  params?: GetV2ListMySubmissionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2ListMySubmissions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetV2ListMySubmissionsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV2ListMySubmissions>>
  > = ({ signal }) =>
    getV2ListMySubmissions(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV2ListMySubmissions>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV2ListMySubmissionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV2ListMySubmissions>>
>;
export type GetV2ListMySubmissionsQueryError = HTTPValidationError;

export function useGetV2ListMySubmissions<
  TData = Awaited<ReturnType<typeof getV2ListMySubmissions>>,
  TError = HTTPValidationError,
>(
  params: undefined | GetV2ListMySubmissionsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2ListMySubmissions>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2ListMySubmissions>>,
          TError,
          Awaited<ReturnType<typeof getV2ListMySubmissions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2ListMySubmissions<
  TData = Awaited<ReturnType<typeof getV2ListMySubmissions>>,
  TError = HTTPValidationError,
>(
  params?: GetV2ListMySubmissionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2ListMySubmissions>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2ListMySubmissions>>,
          TError,
          Awaited<ReturnType<typeof getV2ListMySubmissions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2ListMySubmissions<
  TData = Awaited<ReturnType<typeof getV2ListMySubmissions>>,
  TError = HTTPValidationError,
>(
  params?: GetV2ListMySubmissionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2ListMySubmissions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List my submissions
 */

export function useGetV2ListMySubmissions<
  TData = Awaited<ReturnType<typeof getV2ListMySubmissions>>,
  TError = HTTPValidationError,
>(
  params?: GetV2ListMySubmissionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2ListMySubmissions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV2ListMySubmissionsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a new store listing submission.

Args:
    submission_request (StoreSubmissionRequest): The submission details
    user_id (str): ID of the authenticated user submitting the listing

Returns:
    StoreSubmission: The created store submission

Raises:
    HTTPException: If there is an error creating the submission
 * @summary Create store submission
 */
export type postV2CreateStoreSubmissionResponse200 = {
  data: StoreSubmission;
  status: 200;
};

export type postV2CreateStoreSubmissionResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type postV2CreateStoreSubmissionResponseComposite =
  | postV2CreateStoreSubmissionResponse200
  | postV2CreateStoreSubmissionResponse422;

export type postV2CreateStoreSubmissionResponse =
  postV2CreateStoreSubmissionResponseComposite & {
    headers: Headers;
  };

export const getPostV2CreateStoreSubmissionUrl = () => {
  return `/api/store/submissions`;
};

export const postV2CreateStoreSubmission = async (
  storeSubmissionRequest: StoreSubmissionRequest,
  options?: RequestInit,
): Promise<postV2CreateStoreSubmissionResponse> => {
  return customMutator<postV2CreateStoreSubmissionResponse>(
    getPostV2CreateStoreSubmissionUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(storeSubmissionRequest),
    },
  );
};

export const getPostV2CreateStoreSubmissionMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV2CreateStoreSubmission>>,
    TError,
    { data: StoreSubmissionRequest },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV2CreateStoreSubmission>>,
  TError,
  { data: StoreSubmissionRequest },
  TContext
> => {
  const mutationKey = ["postV2CreateStoreSubmission"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV2CreateStoreSubmission>>,
    { data: StoreSubmissionRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postV2CreateStoreSubmission(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV2CreateStoreSubmissionMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV2CreateStoreSubmission>>
>;
export type PostV2CreateStoreSubmissionMutationBody = StoreSubmissionRequest;
export type PostV2CreateStoreSubmissionMutationError = HTTPValidationError;

/**
 * @summary Create store submission
 */
export const usePostV2CreateStoreSubmission = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV2CreateStoreSubmission>>,
      TError,
      { data: StoreSubmissionRequest },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postV2CreateStoreSubmission>>,
  TError,
  { data: StoreSubmissionRequest },
  TContext
> => {
  const mutationOptions =
    getPostV2CreateStoreSubmissionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Upload media (images/videos) for a store listing submission.

Args:
    file (UploadFile): The media file to upload
    user_id (str): ID of the authenticated user uploading the media

Returns:
    str: URL of the uploaded media file

Raises:
    HTTPException: If there is an error uploading the media
 * @summary Upload submission media
 */
export type postV2UploadSubmissionMediaResponse200 = {
  data: unknown;
  status: 200;
};

export type postV2UploadSubmissionMediaResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type postV2UploadSubmissionMediaResponseComposite =
  | postV2UploadSubmissionMediaResponse200
  | postV2UploadSubmissionMediaResponse422;

export type postV2UploadSubmissionMediaResponse =
  postV2UploadSubmissionMediaResponseComposite & {
    headers: Headers;
  };

export const getPostV2UploadSubmissionMediaUrl = () => {
  return `/api/store/submissions/media`;
};

export const postV2UploadSubmissionMedia = async (
  bodyPostV2UploadSubmissionMedia: BodyPostV2UploadSubmissionMedia,
  options?: RequestInit,
): Promise<postV2UploadSubmissionMediaResponse> => {
  const formData = new FormData();
  formData.append(`file`, bodyPostV2UploadSubmissionMedia.file);

  return customMutator<postV2UploadSubmissionMediaResponse>(
    getPostV2UploadSubmissionMediaUrl(),
    {
      ...options,
      method: "POST",
      body: formData,
    },
  );
};

export const getPostV2UploadSubmissionMediaMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV2UploadSubmissionMedia>>,
    TError,
    { data: BodyPostV2UploadSubmissionMedia },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV2UploadSubmissionMedia>>,
  TError,
  { data: BodyPostV2UploadSubmissionMedia },
  TContext
> => {
  const mutationKey = ["postV2UploadSubmissionMedia"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV2UploadSubmissionMedia>>,
    { data: BodyPostV2UploadSubmissionMedia }
  > = (props) => {
    const { data } = props ?? {};

    return postV2UploadSubmissionMedia(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV2UploadSubmissionMediaMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV2UploadSubmissionMedia>>
>;
export type PostV2UploadSubmissionMediaMutationBody =
  BodyPostV2UploadSubmissionMedia;
export type PostV2UploadSubmissionMediaMutationError = HTTPValidationError;

/**
 * @summary Upload submission media
 */
export const usePostV2UploadSubmissionMedia = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV2UploadSubmissionMedia>>,
      TError,
      { data: BodyPostV2UploadSubmissionMedia },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postV2UploadSubmissionMedia>>,
  TError,
  { data: BodyPostV2UploadSubmissionMedia },
  TContext
> => {
  const mutationOptions =
    getPostV2UploadSubmissionMediaMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Generate an image for a store listing submission.

Args:
    agent_id (str): ID of the agent to generate an image for
    user_id (str): ID of the authenticated user

Returns:
    JSONResponse: JSON containing the URL of the generated image
 * @summary Generate submission image
 */
export type postV2GenerateSubmissionImageResponse200 = {
  data: unknown;
  status: 200;
};

export type postV2GenerateSubmissionImageResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type postV2GenerateSubmissionImageResponseComposite =
  | postV2GenerateSubmissionImageResponse200
  | postV2GenerateSubmissionImageResponse422;

export type postV2GenerateSubmissionImageResponse =
  postV2GenerateSubmissionImageResponseComposite & {
    headers: Headers;
  };

export const getPostV2GenerateSubmissionImageUrl = (
  params: PostV2GenerateSubmissionImageParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/store/submissions/generate_image?${stringifiedParams}`
    : `/api/store/submissions/generate_image`;
};

export const postV2GenerateSubmissionImage = async (
  params: PostV2GenerateSubmissionImageParams,
  options?: RequestInit,
): Promise<postV2GenerateSubmissionImageResponse> => {
  return customMutator<postV2GenerateSubmissionImageResponse>(
    getPostV2GenerateSubmissionImageUrl(params),
    {
      ...options,
      method: "POST",
    },
  );
};

export const getPostV2GenerateSubmissionImageMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV2GenerateSubmissionImage>>,
    TError,
    { params: PostV2GenerateSubmissionImageParams },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV2GenerateSubmissionImage>>,
  TError,
  { params: PostV2GenerateSubmissionImageParams },
  TContext
> => {
  const mutationKey = ["postV2GenerateSubmissionImage"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV2GenerateSubmissionImage>>,
    { params: PostV2GenerateSubmissionImageParams }
  > = (props) => {
    const { params } = props ?? {};

    return postV2GenerateSubmissionImage(params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV2GenerateSubmissionImageMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV2GenerateSubmissionImage>>
>;

export type PostV2GenerateSubmissionImageMutationError = HTTPValidationError;

/**
 * @summary Generate submission image
 */
export const usePostV2GenerateSubmissionImage = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV2GenerateSubmissionImage>>,
      TError,
      { params: PostV2GenerateSubmissionImageParams },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postV2GenerateSubmissionImage>>,
  TError,
  { params: PostV2GenerateSubmissionImageParams },
  TContext
> => {
  const mutationOptions =
    getPostV2GenerateSubmissionImageMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Download the agent file by streaming its content.

Args:
    store_listing_version_id (str): The ID of the agent to download

Returns:
    StreamingResponse: A streaming response containing the agent's graph data.

Raises:
    HTTPException: If the agent is not found or an unexpected error occurs.
 * @summary Download agent file
 */
export type getV2DownloadAgentFileResponse200 = {
  data: unknown;
  status: 200;
};

export type getV2DownloadAgentFileResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type getV2DownloadAgentFileResponseComposite =
  | getV2DownloadAgentFileResponse200
  | getV2DownloadAgentFileResponse422;

export type getV2DownloadAgentFileResponse =
  getV2DownloadAgentFileResponseComposite & {
    headers: Headers;
  };

export const getGetV2DownloadAgentFileUrl = (storeListingVersionId: string) => {
  return `/api/store/download/agents/${storeListingVersionId}`;
};

export const getV2DownloadAgentFile = async (
  storeListingVersionId: string,
  options?: RequestInit,
): Promise<getV2DownloadAgentFileResponse> => {
  return customMutator<getV2DownloadAgentFileResponse>(
    getGetV2DownloadAgentFileUrl(storeListingVersionId),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV2DownloadAgentFileQueryKey = (
  storeListingVersionId: string,
) => {
  return [`/api/store/download/agents/${storeListingVersionId}`] as const;
};

export const getGetV2DownloadAgentFileQueryOptions = <
  TData = Awaited<ReturnType<typeof getV2DownloadAgentFile>>,
  TError = HTTPValidationError,
>(
  storeListingVersionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2DownloadAgentFile>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetV2DownloadAgentFileQueryKey(storeListingVersionId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV2DownloadAgentFile>>
  > = ({ signal }) =>
    getV2DownloadAgentFile(storeListingVersionId, {
      signal,
      ...requestOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!storeListingVersionId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getV2DownloadAgentFile>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV2DownloadAgentFileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV2DownloadAgentFile>>
>;
export type GetV2DownloadAgentFileQueryError = HTTPValidationError;

export function useGetV2DownloadAgentFile<
  TData = Awaited<ReturnType<typeof getV2DownloadAgentFile>>,
  TError = HTTPValidationError,
>(
  storeListingVersionId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2DownloadAgentFile>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2DownloadAgentFile>>,
          TError,
          Awaited<ReturnType<typeof getV2DownloadAgentFile>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2DownloadAgentFile<
  TData = Awaited<ReturnType<typeof getV2DownloadAgentFile>>,
  TError = HTTPValidationError,
>(
  storeListingVersionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2DownloadAgentFile>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2DownloadAgentFile>>,
          TError,
          Awaited<ReturnType<typeof getV2DownloadAgentFile>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2DownloadAgentFile<
  TData = Awaited<ReturnType<typeof getV2DownloadAgentFile>>,
  TError = HTTPValidationError,
>(
  storeListingVersionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2DownloadAgentFile>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Download agent file
 */

export function useGetV2DownloadAgentFile<
  TData = Awaited<ReturnType<typeof getV2DownloadAgentFile>>,
  TError = HTTPValidationError,
>(
  storeListingVersionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2DownloadAgentFile>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV2DownloadAgentFileQueryOptions(
    storeListingVersionId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
