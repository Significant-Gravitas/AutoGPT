/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * AutoGPT Agent Server
 * This server is used to execute agents that are created by the AutoGPT system.
 * OpenAPI spec version: 0.1
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";

import type { CreatorDetails } from "../../models/creatorDetails";

import type { CreatorsResponse } from "../../models/creatorsResponse";

import type { HTTPValidationError } from "../../models/hTTPValidationError";

import type { MyAgentsResponse } from "../../models/myAgentsResponse";

import type { ProfileDetails } from "../../models/profileDetails";

import type { StoreAgentDetails } from "../../models/storeAgentDetails";

import type { StoreAgentsResponse } from "../../models/storeAgentsResponse";

import type { StoreReview } from "../../models/storeReview";

import type { StoreSubmission } from "../../models/storeSubmission";

import type { StoreSubmissionsResponse } from "../../models/storeSubmissionsResponse";

import { SubmissionStatus } from "../../models/submissionStatus";

export const getGetV2GetUserProfileResponseMock = (
  overrideResponse: Partial<ProfileDetails> = {},
): ProfileDetails => ({
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  username: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  links: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
  avatar_url: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV2GetUserProfileResponseMock200 = (
  overrideResponse: Partial<ProfileDetails> = {},
): ProfileDetails => ({
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  username: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  links: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
  avatar_url: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostV2UpdateUserProfileResponseMock = (
  overrideResponse: Partial<CreatorDetails> = {},
): CreatorDetails => ({
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  username: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  links: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
  avatar_url: faker.string.alpha({ length: { min: 10, max: 20 } }),
  agent_rating: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  agent_runs: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  top_categories: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
  ...overrideResponse,
});

export const getPostV2UpdateUserProfileResponseMock200 = (
  overrideResponse: Partial<CreatorDetails> = {},
): CreatorDetails => ({
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  username: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  links: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
  avatar_url: faker.string.alpha({ length: { min: 10, max: 20 } }),
  agent_rating: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  agent_runs: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  top_categories: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
  ...overrideResponse,
});

export const getPostV2UpdateUserProfileResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV2ListStoreAgentsResponseMock = (
  overrideResponse: Partial<StoreAgentsResponse> = {},
): StoreAgentsResponse => ({
  agents: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    slug: faker.string.alpha({ length: { min: 10, max: 20 } }),
    agent_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    agent_image: faker.string.alpha({ length: { min: 10, max: 20 } }),
    creator: faker.string.alpha({ length: { min: 10, max: 20 } }),
    creator_avatar: faker.string.alpha({ length: { min: 10, max: 20 } }),
    sub_heading: faker.string.alpha({ length: { min: 10, max: 20 } }),
    description: faker.string.alpha({ length: { min: 10, max: 20 } }),
    runs: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    rating: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
  })),
  pagination: {
    total_items: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    total_pages: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    current_page: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    page_size: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
  },
  ...overrideResponse,
});

export const getGetV2ListStoreAgentsResponseMock200 = (
  overrideResponse: Partial<StoreAgentsResponse> = {},
): StoreAgentsResponse => ({
  agents: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    slug: faker.string.alpha({ length: { min: 10, max: 20 } }),
    agent_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    agent_image: faker.string.alpha({ length: { min: 10, max: 20 } }),
    creator: faker.string.alpha({ length: { min: 10, max: 20 } }),
    creator_avatar: faker.string.alpha({ length: { min: 10, max: 20 } }),
    sub_heading: faker.string.alpha({ length: { min: 10, max: 20 } }),
    description: faker.string.alpha({ length: { min: 10, max: 20 } }),
    runs: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    rating: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
  })),
  pagination: {
    total_items: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    total_pages: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    current_page: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    page_size: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
  },
  ...overrideResponse,
});

export const getGetV2ListStoreAgentsResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV2GetSpecificAgentResponseMock = (
  overrideResponse: Partial<StoreAgentDetails> = {},
): StoreAgentDetails => ({
  store_listing_version_id: faker.string.alpha({
    length: { min: 10, max: 20 },
  }),
  slug: faker.string.alpha({ length: { min: 10, max: 20 } }),
  agent_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  agent_video: faker.string.alpha({ length: { min: 10, max: 20 } }),
  agent_image: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
  creator: faker.string.alpha({ length: { min: 10, max: 20 } }),
  creator_avatar: faker.string.alpha({ length: { min: 10, max: 20 } }),
  sub_heading: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  categories: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
  runs: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  rating: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  versions: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
  last_updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
  active_version_id: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  has_approved_version: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV2GetSpecificAgentResponseMock200 = (
  overrideResponse: Partial<StoreAgentDetails> = {},
): StoreAgentDetails => ({
  store_listing_version_id: faker.string.alpha({
    length: { min: 10, max: 20 },
  }),
  slug: faker.string.alpha({ length: { min: 10, max: 20 } }),
  agent_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  agent_video: faker.string.alpha({ length: { min: 10, max: 20 } }),
  agent_image: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
  creator: faker.string.alpha({ length: { min: 10, max: 20 } }),
  creator_avatar: faker.string.alpha({ length: { min: 10, max: 20 } }),
  sub_heading: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  categories: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
  runs: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  rating: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  versions: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
  last_updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
  active_version_id: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  has_approved_version: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV2GetSpecificAgentResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV2GetAgentGraphResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV2GetAgentByVersionResponseMock = (
  overrideResponse: Partial<StoreAgentDetails> = {},
): StoreAgentDetails => ({
  store_listing_version_id: faker.string.alpha({
    length: { min: 10, max: 20 },
  }),
  slug: faker.string.alpha({ length: { min: 10, max: 20 } }),
  agent_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  agent_video: faker.string.alpha({ length: { min: 10, max: 20 } }),
  agent_image: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
  creator: faker.string.alpha({ length: { min: 10, max: 20 } }),
  creator_avatar: faker.string.alpha({ length: { min: 10, max: 20 } }),
  sub_heading: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  categories: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
  runs: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  rating: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  versions: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
  last_updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
  active_version_id: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  has_approved_version: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV2GetAgentByVersionResponseMock200 = (
  overrideResponse: Partial<StoreAgentDetails> = {},
): StoreAgentDetails => ({
  store_listing_version_id: faker.string.alpha({
    length: { min: 10, max: 20 },
  }),
  slug: faker.string.alpha({ length: { min: 10, max: 20 } }),
  agent_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  agent_video: faker.string.alpha({ length: { min: 10, max: 20 } }),
  agent_image: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
  creator: faker.string.alpha({ length: { min: 10, max: 20 } }),
  creator_avatar: faker.string.alpha({ length: { min: 10, max: 20 } }),
  sub_heading: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  categories: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
  runs: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  rating: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  versions: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
  last_updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
  active_version_id: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  has_approved_version: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV2GetAgentByVersionResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostV2CreateAgentReviewResponseMock = (
  overrideResponse: Partial<StoreReview> = {},
): StoreReview => ({
  score: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  comments: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostV2CreateAgentReviewResponseMock200 = (
  overrideResponse: Partial<StoreReview> = {},
): StoreReview => ({
  score: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  comments: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostV2CreateAgentReviewResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV2ListStoreCreatorsResponseMock = (
  overrideResponse: Partial<CreatorsResponse> = {},
): CreatorsResponse => ({
  creators: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    username: faker.string.alpha({ length: { min: 10, max: 20 } }),
    description: faker.string.alpha({ length: { min: 10, max: 20 } }),
    avatar_url: faker.string.alpha({ length: { min: 10, max: 20 } }),
    num_agents: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    agent_rating: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    agent_runs: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    is_featured: faker.datatype.boolean(),
  })),
  pagination: {
    total_items: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    total_pages: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    current_page: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    page_size: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
  },
  ...overrideResponse,
});

export const getGetV2ListStoreCreatorsResponseMock200 = (
  overrideResponse: Partial<CreatorsResponse> = {},
): CreatorsResponse => ({
  creators: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    username: faker.string.alpha({ length: { min: 10, max: 20 } }),
    description: faker.string.alpha({ length: { min: 10, max: 20 } }),
    avatar_url: faker.string.alpha({ length: { min: 10, max: 20 } }),
    num_agents: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    agent_rating: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    agent_runs: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    is_featured: faker.datatype.boolean(),
  })),
  pagination: {
    total_items: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    total_pages: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    current_page: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    page_size: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
  },
  ...overrideResponse,
});

export const getGetV2ListStoreCreatorsResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV2GetCreatorDetailsResponseMock = (
  overrideResponse: Partial<CreatorDetails> = {},
): CreatorDetails => ({
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  username: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  links: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
  avatar_url: faker.string.alpha({ length: { min: 10, max: 20 } }),
  agent_rating: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  agent_runs: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  top_categories: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
  ...overrideResponse,
});

export const getGetV2GetCreatorDetailsResponseMock200 = (
  overrideResponse: Partial<CreatorDetails> = {},
): CreatorDetails => ({
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  username: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  links: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
  avatar_url: faker.string.alpha({ length: { min: 10, max: 20 } }),
  agent_rating: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  agent_runs: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  top_categories: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
  ...overrideResponse,
});

export const getGetV2GetCreatorDetailsResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV2GetMyAgentsResponseMock = (
  overrideResponse: Partial<MyAgentsResponse> = {},
): MyAgentsResponse => ({
  agents: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    agent_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    agent_version: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    agent_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    agent_image: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    description: faker.string.alpha({ length: { min: 10, max: 20 } }),
    last_edited: `${faker.date.past().toISOString().split(".")[0]}Z`,
  })),
  pagination: {
    total_items: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    total_pages: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    current_page: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    page_size: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
  },
  ...overrideResponse,
});

export const getGetV2GetMyAgentsResponseMock200 = (
  overrideResponse: Partial<MyAgentsResponse> = {},
): MyAgentsResponse => ({
  agents: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    agent_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    agent_version: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    agent_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    agent_image: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    description: faker.string.alpha({ length: { min: 10, max: 20 } }),
    last_edited: `${faker.date.past().toISOString().split(".")[0]}Z`,
  })),
  pagination: {
    total_items: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    total_pages: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    current_page: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    page_size: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
  },
  ...overrideResponse,
});

export const getDeleteV2DeleteStoreSubmissionResponseMock = (): boolean =>
  faker.datatype.boolean();

export const getDeleteV2DeleteStoreSubmissionResponseMock200 = (): boolean =>
  faker.datatype.boolean();

export const getDeleteV2DeleteStoreSubmissionResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV2ListMySubmissionsResponseMock = (
  overrideResponse: Partial<StoreSubmissionsResponse> = {},
): StoreSubmissionsResponse => ({
  submissions: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    agent_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    agent_version: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    sub_heading: faker.string.alpha({ length: { min: 10, max: 20 } }),
    slug: faker.string.alpha({ length: { min: 10, max: 20 } }),
    description: faker.string.alpha({ length: { min: 10, max: 20 } }),
    image_urls: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
    date_submitted: `${faker.date.past().toISOString().split(".")[0]}Z`,
    status: faker.helpers.arrayElement(Object.values(SubmissionStatus)),
    runs: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    rating: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    store_listing_version_id: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    version: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        null,
      ]),
      undefined,
    ]),
    reviewer_id: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    review_comments: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    internal_comments: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    reviewed_at: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        null,
      ]),
      undefined,
    ]),
    changes_summary: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
  })),
  pagination: {
    total_items: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    total_pages: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    current_page: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    page_size: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
  },
  ...overrideResponse,
});

export const getGetV2ListMySubmissionsResponseMock200 = (
  overrideResponse: Partial<StoreSubmissionsResponse> = {},
): StoreSubmissionsResponse => ({
  submissions: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    agent_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    agent_version: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    sub_heading: faker.string.alpha({ length: { min: 10, max: 20 } }),
    slug: faker.string.alpha({ length: { min: 10, max: 20 } }),
    description: faker.string.alpha({ length: { min: 10, max: 20 } }),
    image_urls: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
    date_submitted: `${faker.date.past().toISOString().split(".")[0]}Z`,
    status: faker.helpers.arrayElement(Object.values(SubmissionStatus)),
    runs: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    rating: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    store_listing_version_id: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    version: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        null,
      ]),
      undefined,
    ]),
    reviewer_id: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    review_comments: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    internal_comments: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    reviewed_at: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        null,
      ]),
      undefined,
    ]),
    changes_summary: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
  })),
  pagination: {
    total_items: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    total_pages: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    current_page: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    page_size: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
  },
  ...overrideResponse,
});

export const getGetV2ListMySubmissionsResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostV2CreateStoreSubmissionResponseMock = (
  overrideResponse: Partial<StoreSubmission> = {},
): StoreSubmission => ({
  agent_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  agent_version: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  sub_heading: faker.string.alpha({ length: { min: 10, max: 20 } }),
  slug: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  image_urls: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
  date_submitted: `${faker.date.past().toISOString().split(".")[0]}Z`,
  status: faker.helpers.arrayElement(Object.values(SubmissionStatus)),
  runs: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  rating: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  store_listing_version_id: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  version: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      null,
    ]),
    undefined,
  ]),
  reviewer_id: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  review_comments: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  internal_comments: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  reviewed_at: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      null,
    ]),
    undefined,
  ]),
  changes_summary: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostV2CreateStoreSubmissionResponseMock200 = (
  overrideResponse: Partial<StoreSubmission> = {},
): StoreSubmission => ({
  agent_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  agent_version: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  sub_heading: faker.string.alpha({ length: { min: 10, max: 20 } }),
  slug: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  image_urls: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
  date_submitted: `${faker.date.past().toISOString().split(".")[0]}Z`,
  status: faker.helpers.arrayElement(Object.values(SubmissionStatus)),
  runs: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  rating: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  store_listing_version_id: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  version: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      null,
    ]),
    undefined,
  ]),
  reviewer_id: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  review_comments: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  internal_comments: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  reviewed_at: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      null,
    ]),
    undefined,
  ]),
  changes_summary: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostV2CreateStoreSubmissionResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostV2UploadSubmissionMediaResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostV2GenerateSubmissionImageResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV2DownloadAgentFileResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV2GetUserProfileMockHandler = (
  overrideResponse?:
    | ProfileDetails
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ProfileDetails> | ProfileDetails),
) => {
  return http.get("*/api/store/profile", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2GetUserProfileResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV2GetUserProfileMockHandler200 = (
  overrideResponse?:
    | ProfileDetails
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ProfileDetails> | ProfileDetails),
) => {
  return http.get("*/api/store/profile", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2GetUserProfileResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV2UpdateUserProfileMockHandler = (
  overrideResponse?:
    | CreatorDetails
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<CreatorDetails> | CreatorDetails),
) => {
  return http.post("*/api/store/profile", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV2UpdateUserProfileResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV2UpdateUserProfileMockHandler200 = (
  overrideResponse?:
    | CreatorDetails
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<CreatorDetails> | CreatorDetails),
) => {
  return http.post("*/api/store/profile", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV2UpdateUserProfileResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV2UpdateUserProfileMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.post("*/api/store/profile", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV2UpdateUserProfileResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV2ListStoreAgentsMockHandler = (
  overrideResponse?:
    | StoreAgentsResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<StoreAgentsResponse> | StoreAgentsResponse),
) => {
  return http.get("*/api/store/agents", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2ListStoreAgentsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV2ListStoreAgentsMockHandler200 = (
  overrideResponse?:
    | StoreAgentsResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<StoreAgentsResponse> | StoreAgentsResponse),
) => {
  return http.get("*/api/store/agents", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2ListStoreAgentsResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV2ListStoreAgentsMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.get("*/api/store/agents", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2ListStoreAgentsResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV2GetSpecificAgentMockHandler = (
  overrideResponse?:
    | StoreAgentDetails
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<StoreAgentDetails> | StoreAgentDetails),
) => {
  return http.get("*/api/store/agents/:username/:agentName", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2GetSpecificAgentResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV2GetSpecificAgentMockHandler200 = (
  overrideResponse?:
    | StoreAgentDetails
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<StoreAgentDetails> | StoreAgentDetails),
) => {
  return http.get("*/api/store/agents/:username/:agentName", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2GetSpecificAgentResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV2GetSpecificAgentMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.get("*/api/store/agents/:username/:agentName", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2GetSpecificAgentResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV2GetAgentGraphMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get("*/api/store/graph/:storeListingVersionId", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getGetV2GetAgentGraphMockHandler200 = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get("*/api/store/graph/:storeListingVersionId", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getGetV2GetAgentGraphMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.get("*/api/store/graph/:storeListingVersionId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2GetAgentGraphResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV2GetAgentByVersionMockHandler = (
  overrideResponse?:
    | StoreAgentDetails
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<StoreAgentDetails> | StoreAgentDetails),
) => {
  return http.get("*/api/store/agents/:storeListingVersionId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2GetAgentByVersionResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV2GetAgentByVersionMockHandler200 = (
  overrideResponse?:
    | StoreAgentDetails
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<StoreAgentDetails> | StoreAgentDetails),
) => {
  return http.get("*/api/store/agents/:storeListingVersionId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2GetAgentByVersionResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV2GetAgentByVersionMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.get("*/api/store/agents/:storeListingVersionId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2GetAgentByVersionResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV2CreateAgentReviewMockHandler = (
  overrideResponse?:
    | StoreReview
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<StoreReview> | StoreReview),
) => {
  return http.post(
    "*/api/store/agents/:username/:agentName/review",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getPostV2CreateAgentReviewResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getPostV2CreateAgentReviewMockHandler200 = (
  overrideResponse?:
    | StoreReview
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<StoreReview> | StoreReview),
) => {
  return http.post(
    "*/api/store/agents/:username/:agentName/review",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getPostV2CreateAgentReviewResponseMock200(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getPostV2CreateAgentReviewMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.post(
    "*/api/store/agents/:username/:agentName/review",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getPostV2CreateAgentReviewResponseMock422(),
        ),
        { status: 422, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getGetV2ListStoreCreatorsMockHandler = (
  overrideResponse?:
    | CreatorsResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<CreatorsResponse> | CreatorsResponse),
) => {
  return http.get("*/api/store/creators", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2ListStoreCreatorsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV2ListStoreCreatorsMockHandler200 = (
  overrideResponse?:
    | CreatorsResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<CreatorsResponse> | CreatorsResponse),
) => {
  return http.get("*/api/store/creators", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2ListStoreCreatorsResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV2ListStoreCreatorsMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.get("*/api/store/creators", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2ListStoreCreatorsResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV2GetCreatorDetailsMockHandler = (
  overrideResponse?:
    | CreatorDetails
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<CreatorDetails> | CreatorDetails),
) => {
  return http.get("*/api/store/creator/:username", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2GetCreatorDetailsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV2GetCreatorDetailsMockHandler200 = (
  overrideResponse?:
    | CreatorDetails
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<CreatorDetails> | CreatorDetails),
) => {
  return http.get("*/api/store/creator/:username", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2GetCreatorDetailsResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV2GetCreatorDetailsMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.get("*/api/store/creator/:username", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2GetCreatorDetailsResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV2GetMyAgentsMockHandler = (
  overrideResponse?:
    | MyAgentsResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<MyAgentsResponse> | MyAgentsResponse),
) => {
  return http.get("*/api/store/myagents", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2GetMyAgentsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV2GetMyAgentsMockHandler200 = (
  overrideResponse?:
    | MyAgentsResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<MyAgentsResponse> | MyAgentsResponse),
) => {
  return http.get("*/api/store/myagents", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2GetMyAgentsResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getDeleteV2DeleteStoreSubmissionMockHandler = (
  overrideResponse?:
    | boolean
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<boolean> | boolean),
) => {
  return http.delete("*/api/store/submissions/:submissionId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getDeleteV2DeleteStoreSubmissionResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getDeleteV2DeleteStoreSubmissionMockHandler200 = (
  overrideResponse?:
    | boolean
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<boolean> | boolean),
) => {
  return http.delete("*/api/store/submissions/:submissionId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getDeleteV2DeleteStoreSubmissionResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getDeleteV2DeleteStoreSubmissionMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.delete("*/api/store/submissions/:submissionId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getDeleteV2DeleteStoreSubmissionResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV2ListMySubmissionsMockHandler = (
  overrideResponse?:
    | StoreSubmissionsResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<StoreSubmissionsResponse> | StoreSubmissionsResponse),
) => {
  return http.get("*/api/store/submissions", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2ListMySubmissionsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV2ListMySubmissionsMockHandler200 = (
  overrideResponse?:
    | StoreSubmissionsResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<StoreSubmissionsResponse> | StoreSubmissionsResponse),
) => {
  return http.get("*/api/store/submissions", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2ListMySubmissionsResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV2ListMySubmissionsMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.get("*/api/store/submissions", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2ListMySubmissionsResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV2CreateStoreSubmissionMockHandler = (
  overrideResponse?:
    | StoreSubmission
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<StoreSubmission> | StoreSubmission),
) => {
  return http.post("*/api/store/submissions", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV2CreateStoreSubmissionResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV2CreateStoreSubmissionMockHandler200 = (
  overrideResponse?:
    | StoreSubmission
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<StoreSubmission> | StoreSubmission),
) => {
  return http.post("*/api/store/submissions", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV2CreateStoreSubmissionResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV2CreateStoreSubmissionMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.post("*/api/store/submissions", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV2CreateStoreSubmissionResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV2UploadSubmissionMediaMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post("*/api/store/submissions/media", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getPostV2UploadSubmissionMediaMockHandler200 = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post("*/api/store/submissions/media", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getPostV2UploadSubmissionMediaMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.post("*/api/store/submissions/media", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV2UploadSubmissionMediaResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV2GenerateSubmissionImageMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post("*/api/store/submissions/generate_image", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getPostV2GenerateSubmissionImageMockHandler200 = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post("*/api/store/submissions/generate_image", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getPostV2GenerateSubmissionImageMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.post("*/api/store/submissions/generate_image", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV2GenerateSubmissionImageResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV2DownloadAgentFileMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get(
    "*/api/store/download/agents/:storeListingVersionId",
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 200 });
    },
  );
};

export const getGetV2DownloadAgentFileMockHandler200 = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get(
    "*/api/store/download/agents/:storeListingVersionId",
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 200 });
    },
  );
};

export const getGetV2DownloadAgentFileMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.get(
    "*/api/store/download/agents/:storeListingVersionId",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetV2DownloadAgentFileResponseMock422(),
        ),
        { status: 422, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};
export const getStoreMock = () => [
  getGetV2GetUserProfileMockHandler(),
  getPostV2UpdateUserProfileMockHandler(),
  getGetV2ListStoreAgentsMockHandler(),
  getGetV2GetSpecificAgentMockHandler(),
  getGetV2GetAgentGraphMockHandler(),
  getGetV2GetAgentByVersionMockHandler(),
  getPostV2CreateAgentReviewMockHandler(),
  getGetV2ListStoreCreatorsMockHandler(),
  getGetV2GetCreatorDetailsMockHandler(),
  getGetV2GetMyAgentsMockHandler(),
  getDeleteV2DeleteStoreSubmissionMockHandler(),
  getGetV2ListMySubmissionsMockHandler(),
  getPostV2CreateStoreSubmissionMockHandler(),
  getPostV2UploadSubmissionMediaMockHandler(),
  getPostV2GenerateSubmissionImageMockHandler(),
  getGetV2DownloadAgentFileMockHandler(),
];
