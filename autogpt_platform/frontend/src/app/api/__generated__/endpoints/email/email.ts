/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * AutoGPT Agent Server
 * This server is used to execute agents that are created by the AutoGPT system.
 * OpenAPI spec version: 0.1
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";

import type { HTTPValidationError } from "../../models/hTTPValidationError";

import type { PostV1HandlePostmarkEmailWebhooksBody } from "../../models/postV1HandlePostmarkEmailWebhooksBody";

import type { PostV1OneClickEmailUnsubscribeParams } from "../../models/postV1OneClickEmailUnsubscribeParams";

import { customMutator } from "../../../mutators/custom-mutator";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary One Click Email Unsubscribe
 */
export type postV1OneClickEmailUnsubscribeResponse200 = {
  data: unknown;
  status: 200;
};

export type postV1OneClickEmailUnsubscribeResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type postV1OneClickEmailUnsubscribeResponseComposite =
  | postV1OneClickEmailUnsubscribeResponse200
  | postV1OneClickEmailUnsubscribeResponse422;

export type postV1OneClickEmailUnsubscribeResponse =
  postV1OneClickEmailUnsubscribeResponseComposite & {
    headers: Headers;
  };

export const getPostV1OneClickEmailUnsubscribeUrl = (
  params: PostV1OneClickEmailUnsubscribeParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/email/unsubscribe?${stringifiedParams}`
    : `/api/email/unsubscribe`;
};

export const postV1OneClickEmailUnsubscribe = async (
  params: PostV1OneClickEmailUnsubscribeParams,
  options?: RequestInit,
): Promise<postV1OneClickEmailUnsubscribeResponse> => {
  return customMutator<postV1OneClickEmailUnsubscribeResponse>(
    getPostV1OneClickEmailUnsubscribeUrl(params),
    {
      ...options,
      method: "POST",
    },
  );
};

export const getPostV1OneClickEmailUnsubscribeMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1OneClickEmailUnsubscribe>>,
    TError,
    { params: PostV1OneClickEmailUnsubscribeParams },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1OneClickEmailUnsubscribe>>,
  TError,
  { params: PostV1OneClickEmailUnsubscribeParams },
  TContext
> => {
  const mutationKey = ["postV1OneClickEmailUnsubscribe"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1OneClickEmailUnsubscribe>>,
    { params: PostV1OneClickEmailUnsubscribeParams }
  > = (props) => {
    const { params } = props ?? {};

    return postV1OneClickEmailUnsubscribe(params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1OneClickEmailUnsubscribeMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1OneClickEmailUnsubscribe>>
>;

export type PostV1OneClickEmailUnsubscribeMutationError = HTTPValidationError;

/**
 * @summary One Click Email Unsubscribe
 */
export const usePostV1OneClickEmailUnsubscribe = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1OneClickEmailUnsubscribe>>,
      TError,
      { params: PostV1OneClickEmailUnsubscribeParams },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postV1OneClickEmailUnsubscribe>>,
  TError,
  { params: PostV1OneClickEmailUnsubscribeParams },
  TContext
> => {
  const mutationOptions =
    getPostV1OneClickEmailUnsubscribeMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Handle Postmark Email Webhooks
 */
export type postV1HandlePostmarkEmailWebhooksResponse200 = {
  data: unknown;
  status: 200;
};

export type postV1HandlePostmarkEmailWebhooksResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type postV1HandlePostmarkEmailWebhooksResponseComposite =
  | postV1HandlePostmarkEmailWebhooksResponse200
  | postV1HandlePostmarkEmailWebhooksResponse422;

export type postV1HandlePostmarkEmailWebhooksResponse =
  postV1HandlePostmarkEmailWebhooksResponseComposite & {
    headers: Headers;
  };

export const getPostV1HandlePostmarkEmailWebhooksUrl = () => {
  return `/api/email/`;
};

export const postV1HandlePostmarkEmailWebhooks = async (
  postV1HandlePostmarkEmailWebhooksBody: PostV1HandlePostmarkEmailWebhooksBody,
  options?: RequestInit,
): Promise<postV1HandlePostmarkEmailWebhooksResponse> => {
  return customMutator<postV1HandlePostmarkEmailWebhooksResponse>(
    getPostV1HandlePostmarkEmailWebhooksUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(postV1HandlePostmarkEmailWebhooksBody),
    },
  );
};

export const getPostV1HandlePostmarkEmailWebhooksMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1HandlePostmarkEmailWebhooks>>,
    TError,
    { data: PostV1HandlePostmarkEmailWebhooksBody },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1HandlePostmarkEmailWebhooks>>,
  TError,
  { data: PostV1HandlePostmarkEmailWebhooksBody },
  TContext
> => {
  const mutationKey = ["postV1HandlePostmarkEmailWebhooks"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1HandlePostmarkEmailWebhooks>>,
    { data: PostV1HandlePostmarkEmailWebhooksBody }
  > = (props) => {
    const { data } = props ?? {};

    return postV1HandlePostmarkEmailWebhooks(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1HandlePostmarkEmailWebhooksMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1HandlePostmarkEmailWebhooks>>
>;
export type PostV1HandlePostmarkEmailWebhooksMutationBody =
  PostV1HandlePostmarkEmailWebhooksBody;
export type PostV1HandlePostmarkEmailWebhooksMutationError =
  HTTPValidationError;

/**
 * @summary Handle Postmark Email Webhooks
 */
export const usePostV1HandlePostmarkEmailWebhooks = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1HandlePostmarkEmailWebhooks>>,
      TError,
      { data: PostV1HandlePostmarkEmailWebhooksBody },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postV1HandlePostmarkEmailWebhooks>>,
  TError,
  { data: PostV1HandlePostmarkEmailWebhooksBody },
  TContext
> => {
  const mutationOptions =
    getPostV1HandlePostmarkEmailWebhooksMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
