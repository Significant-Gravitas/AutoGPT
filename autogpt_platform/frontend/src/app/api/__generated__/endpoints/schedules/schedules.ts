/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * AutoGPT Agent Server
 * This server is used to execute agents that are created by the AutoGPT system.
 * OpenAPI spec version: 0.1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { DeleteV1DeleteExecutionSchedule200 } from "../../models/deleteV1DeleteExecutionSchedule200";

import type { GraphExecutionJobInfo } from "../../models/graphExecutionJobInfo";

import type { HTTPValidationError } from "../../models/hTTPValidationError";

import type { ScheduleCreationRequest } from "../../models/scheduleCreationRequest";

import { customMutator } from "../../../mutators/custom-mutator";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Create execution schedule
 */
export type postV1CreateExecutionScheduleResponse200 = {
  data: GraphExecutionJobInfo;
  status: 200;
};

export type postV1CreateExecutionScheduleResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type postV1CreateExecutionScheduleResponseComposite =
  | postV1CreateExecutionScheduleResponse200
  | postV1CreateExecutionScheduleResponse422;

export type postV1CreateExecutionScheduleResponse =
  postV1CreateExecutionScheduleResponseComposite & {
    headers: Headers;
  };

export const getPostV1CreateExecutionScheduleUrl = (graphId: string) => {
  return `/api/graphs/${graphId}/schedules`;
};

export const postV1CreateExecutionSchedule = async (
  graphId: string,
  scheduleCreationRequest: ScheduleCreationRequest,
  options?: RequestInit,
): Promise<postV1CreateExecutionScheduleResponse> => {
  return customMutator<postV1CreateExecutionScheduleResponse>(
    getPostV1CreateExecutionScheduleUrl(graphId),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(scheduleCreationRequest),
    },
  );
};

export const getPostV1CreateExecutionScheduleMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1CreateExecutionSchedule>>,
    TError,
    { graphId: string; data: ScheduleCreationRequest },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1CreateExecutionSchedule>>,
  TError,
  { graphId: string; data: ScheduleCreationRequest },
  TContext
> => {
  const mutationKey = ["postV1CreateExecutionSchedule"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1CreateExecutionSchedule>>,
    { graphId: string; data: ScheduleCreationRequest }
  > = (props) => {
    const { graphId, data } = props ?? {};

    return postV1CreateExecutionSchedule(graphId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1CreateExecutionScheduleMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1CreateExecutionSchedule>>
>;
export type PostV1CreateExecutionScheduleMutationBody = ScheduleCreationRequest;
export type PostV1CreateExecutionScheduleMutationError = HTTPValidationError;

/**
 * @summary Create execution schedule
 */
export const usePostV1CreateExecutionSchedule = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1CreateExecutionSchedule>>,
      TError,
      { graphId: string; data: ScheduleCreationRequest },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postV1CreateExecutionSchedule>>,
  TError,
  { graphId: string; data: ScheduleCreationRequest },
  TContext
> => {
  const mutationOptions =
    getPostV1CreateExecutionScheduleMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary List execution schedules for a graph
 */
export type getV1ListExecutionSchedulesForAGraphResponse200 = {
  data: GraphExecutionJobInfo[];
  status: 200;
};

export type getV1ListExecutionSchedulesForAGraphResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type getV1ListExecutionSchedulesForAGraphResponseComposite =
  | getV1ListExecutionSchedulesForAGraphResponse200
  | getV1ListExecutionSchedulesForAGraphResponse422;

export type getV1ListExecutionSchedulesForAGraphResponse =
  getV1ListExecutionSchedulesForAGraphResponseComposite & {
    headers: Headers;
  };

export const getGetV1ListExecutionSchedulesForAGraphUrl = (graphId: string) => {
  return `/api/graphs/${graphId}/schedules`;
};

export const getV1ListExecutionSchedulesForAGraph = async (
  graphId: string,
  options?: RequestInit,
): Promise<getV1ListExecutionSchedulesForAGraphResponse> => {
  return customMutator<getV1ListExecutionSchedulesForAGraphResponse>(
    getGetV1ListExecutionSchedulesForAGraphUrl(graphId),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV1ListExecutionSchedulesForAGraphQueryKey = (
  graphId: string,
) => {
  return [`/api/graphs/${graphId}/schedules`] as const;
};

export const getGetV1ListExecutionSchedulesForAGraphQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1ListExecutionSchedulesForAGraph>>,
  TError = HTTPValidationError,
>(
  graphId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1ListExecutionSchedulesForAGraph>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetV1ListExecutionSchedulesForAGraphQueryKey(graphId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV1ListExecutionSchedulesForAGraph>>
  > = ({ signal }) =>
    getV1ListExecutionSchedulesForAGraph(graphId, {
      signal,
      ...requestOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!graphId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1ListExecutionSchedulesForAGraph>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV1ListExecutionSchedulesForAGraphQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1ListExecutionSchedulesForAGraph>>
>;
export type GetV1ListExecutionSchedulesForAGraphQueryError =
  HTTPValidationError;

export function useGetV1ListExecutionSchedulesForAGraph<
  TData = Awaited<ReturnType<typeof getV1ListExecutionSchedulesForAGraph>>,
  TError = HTTPValidationError,
>(
  graphId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1ListExecutionSchedulesForAGraph>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1ListExecutionSchedulesForAGraph>>,
          TError,
          Awaited<ReturnType<typeof getV1ListExecutionSchedulesForAGraph>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1ListExecutionSchedulesForAGraph<
  TData = Awaited<ReturnType<typeof getV1ListExecutionSchedulesForAGraph>>,
  TError = HTTPValidationError,
>(
  graphId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1ListExecutionSchedulesForAGraph>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1ListExecutionSchedulesForAGraph>>,
          TError,
          Awaited<ReturnType<typeof getV1ListExecutionSchedulesForAGraph>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1ListExecutionSchedulesForAGraph<
  TData = Awaited<ReturnType<typeof getV1ListExecutionSchedulesForAGraph>>,
  TError = HTTPValidationError,
>(
  graphId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1ListExecutionSchedulesForAGraph>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List execution schedules for a graph
 */

export function useGetV1ListExecutionSchedulesForAGraph<
  TData = Awaited<ReturnType<typeof getV1ListExecutionSchedulesForAGraph>>,
  TError = HTTPValidationError,
>(
  graphId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1ListExecutionSchedulesForAGraph>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV1ListExecutionSchedulesForAGraphQueryOptions(
    graphId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary List execution schedules for a user
 */
export type getV1ListExecutionSchedulesForAUserResponse200 = {
  data: GraphExecutionJobInfo[];
  status: 200;
};

export type getV1ListExecutionSchedulesForAUserResponseComposite =
  getV1ListExecutionSchedulesForAUserResponse200;

export type getV1ListExecutionSchedulesForAUserResponse =
  getV1ListExecutionSchedulesForAUserResponseComposite & {
    headers: Headers;
  };

export const getGetV1ListExecutionSchedulesForAUserUrl = () => {
  return `/api/schedules`;
};

export const getV1ListExecutionSchedulesForAUser = async (
  options?: RequestInit,
): Promise<getV1ListExecutionSchedulesForAUserResponse> => {
  return customMutator<getV1ListExecutionSchedulesForAUserResponse>(
    getGetV1ListExecutionSchedulesForAUserUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV1ListExecutionSchedulesForAUserQueryKey = () => {
  return [`/api/schedules`] as const;
};

export const getGetV1ListExecutionSchedulesForAUserQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1ListExecutionSchedulesForAUser>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getV1ListExecutionSchedulesForAUser>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customMutator>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetV1ListExecutionSchedulesForAUserQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV1ListExecutionSchedulesForAUser>>
  > = ({ signal }) =>
    getV1ListExecutionSchedulesForAUser({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1ListExecutionSchedulesForAUser>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV1ListExecutionSchedulesForAUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1ListExecutionSchedulesForAUser>>
>;
export type GetV1ListExecutionSchedulesForAUserQueryError = unknown;

export function useGetV1ListExecutionSchedulesForAUser<
  TData = Awaited<ReturnType<typeof getV1ListExecutionSchedulesForAUser>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1ListExecutionSchedulesForAUser>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1ListExecutionSchedulesForAUser>>,
          TError,
          Awaited<ReturnType<typeof getV1ListExecutionSchedulesForAUser>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1ListExecutionSchedulesForAUser<
  TData = Awaited<ReturnType<typeof getV1ListExecutionSchedulesForAUser>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1ListExecutionSchedulesForAUser>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1ListExecutionSchedulesForAUser>>,
          TError,
          Awaited<ReturnType<typeof getV1ListExecutionSchedulesForAUser>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1ListExecutionSchedulesForAUser<
  TData = Awaited<ReturnType<typeof getV1ListExecutionSchedulesForAUser>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1ListExecutionSchedulesForAUser>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List execution schedules for a user
 */

export function useGetV1ListExecutionSchedulesForAUser<
  TData = Awaited<ReturnType<typeof getV1ListExecutionSchedulesForAUser>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1ListExecutionSchedulesForAUser>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getGetV1ListExecutionSchedulesForAUserQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Delete execution schedule
 */
export type deleteV1DeleteExecutionScheduleResponse200 = {
  data: DeleteV1DeleteExecutionSchedule200;
  status: 200;
};

export type deleteV1DeleteExecutionScheduleResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type deleteV1DeleteExecutionScheduleResponseComposite =
  | deleteV1DeleteExecutionScheduleResponse200
  | deleteV1DeleteExecutionScheduleResponse422;

export type deleteV1DeleteExecutionScheduleResponse =
  deleteV1DeleteExecutionScheduleResponseComposite & {
    headers: Headers;
  };

export const getDeleteV1DeleteExecutionScheduleUrl = (scheduleId: string) => {
  return `/api/schedules/${scheduleId}`;
};

export const deleteV1DeleteExecutionSchedule = async (
  scheduleId: string,
  options?: RequestInit,
): Promise<deleteV1DeleteExecutionScheduleResponse> => {
  return customMutator<deleteV1DeleteExecutionScheduleResponse>(
    getDeleteV1DeleteExecutionScheduleUrl(scheduleId),
    {
      ...options,
      method: "DELETE",
    },
  );
};

export const getDeleteV1DeleteExecutionScheduleMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteV1DeleteExecutionSchedule>>,
    TError,
    { scheduleId: string },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteV1DeleteExecutionSchedule>>,
  TError,
  { scheduleId: string },
  TContext
> => {
  const mutationKey = ["deleteV1DeleteExecutionSchedule"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteV1DeleteExecutionSchedule>>,
    { scheduleId: string }
  > = (props) => {
    const { scheduleId } = props ?? {};

    return deleteV1DeleteExecutionSchedule(scheduleId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteV1DeleteExecutionScheduleMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteV1DeleteExecutionSchedule>>
>;

export type DeleteV1DeleteExecutionScheduleMutationError = HTTPValidationError;

/**
 * @summary Delete execution schedule
 */
export const useDeleteV1DeleteExecutionSchedule = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteV1DeleteExecutionSchedule>>,
      TError,
      { scheduleId: string },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteV1DeleteExecutionSchedule>>,
  TError,
  { scheduleId: string },
  TContext
> => {
  const mutationOptions =
    getDeleteV1DeleteExecutionScheduleMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
