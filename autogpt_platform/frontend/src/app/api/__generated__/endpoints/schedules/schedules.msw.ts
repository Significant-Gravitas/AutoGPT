/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * AutoGPT Agent Server
 * This server is used to execute agents that are created by the AutoGPT system.
 * OpenAPI spec version: 0.1
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";

import type { DeleteV1DeleteExecutionSchedule200 } from "../../models/deleteV1DeleteExecutionSchedule200";

import type { GraphExecutionJobInfo } from "../../models/graphExecutionJobInfo";

import type { HTTPValidationError } from "../../models/hTTPValidationError";

import { ProviderName } from "../../models/providerName";

export const getPostV1CreateExecutionScheduleResponseMock = (
  overrideResponse: Partial<GraphExecutionJobInfo> = {},
): GraphExecutionJobInfo => ({
  user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  graph_version: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  cron: faker.string.alpha({ length: { min: 10, max: 20 } }),
  input_data: {},
  input_credentials: faker.helpers.arrayElement([
    {
      [faker.string.alphanumeric(5)]: {
        id: faker.string.alpha({ length: { min: 10, max: 20 } }),
        title: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            null,
          ]),
          undefined,
        ]),
        provider: faker.helpers.arrayElement(Object.values(ProviderName)),
        type: faker.helpers.arrayElement([
          "api_key",
          "oauth2",
          "user_password",
          "host_scoped",
        ] as const),
      },
    },
    undefined,
  ]),
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  next_run_time: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getPostV1CreateExecutionScheduleResponseMock200 = (
  overrideResponse: Partial<GraphExecutionJobInfo> = {},
): GraphExecutionJobInfo => ({
  user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  graph_version: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  cron: faker.string.alpha({ length: { min: 10, max: 20 } }),
  input_data: {},
  input_credentials: faker.helpers.arrayElement([
    {
      [faker.string.alphanumeric(5)]: {
        id: faker.string.alpha({ length: { min: 10, max: 20 } }),
        title: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            null,
          ]),
          undefined,
        ]),
        provider: faker.helpers.arrayElement(Object.values(ProviderName)),
        type: faker.helpers.arrayElement([
          "api_key",
          "oauth2",
          "user_password",
          "host_scoped",
        ] as const),
      },
    },
    undefined,
  ]),
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  next_run_time: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getPostV1CreateExecutionScheduleResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV1ListExecutionSchedulesForAGraphResponseMock =
  (): GraphExecutionJobInfo[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      graph_version: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      cron: faker.string.alpha({ length: { min: 10, max: 20 } }),
      input_data: {},
      input_credentials: faker.helpers.arrayElement([
        {
          [faker.string.alphanumeric(5)]: {
            id: faker.string.alpha({ length: { min: 10, max: 20 } }),
            title: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                null,
              ]),
              undefined,
            ]),
            provider: faker.helpers.arrayElement(Object.values(ProviderName)),
            type: faker.helpers.arrayElement([
              "api_key",
              "oauth2",
              "user_password",
              "host_scoped",
            ] as const),
          },
        },
        undefined,
      ]),
      id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      next_run_time: faker.string.alpha({ length: { min: 10, max: 20 } }),
    }));

export const getGetV1ListExecutionSchedulesForAGraphResponseMock200 =
  (): GraphExecutionJobInfo[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      graph_version: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      cron: faker.string.alpha({ length: { min: 10, max: 20 } }),
      input_data: {},
      input_credentials: faker.helpers.arrayElement([
        {
          [faker.string.alphanumeric(5)]: {
            id: faker.string.alpha({ length: { min: 10, max: 20 } }),
            title: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                null,
              ]),
              undefined,
            ]),
            provider: faker.helpers.arrayElement(Object.values(ProviderName)),
            type: faker.helpers.arrayElement([
              "api_key",
              "oauth2",
              "user_password",
              "host_scoped",
            ] as const),
          },
        },
        undefined,
      ]),
      id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      next_run_time: faker.string.alpha({ length: { min: 10, max: 20 } }),
    }));

export const getGetV1ListExecutionSchedulesForAGraphResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV1ListExecutionSchedulesForAUserResponseMock =
  (): GraphExecutionJobInfo[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      graph_version: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      cron: faker.string.alpha({ length: { min: 10, max: 20 } }),
      input_data: {},
      input_credentials: faker.helpers.arrayElement([
        {
          [faker.string.alphanumeric(5)]: {
            id: faker.string.alpha({ length: { min: 10, max: 20 } }),
            title: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                null,
              ]),
              undefined,
            ]),
            provider: faker.helpers.arrayElement(Object.values(ProviderName)),
            type: faker.helpers.arrayElement([
              "api_key",
              "oauth2",
              "user_password",
              "host_scoped",
            ] as const),
          },
        },
        undefined,
      ]),
      id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      next_run_time: faker.string.alpha({ length: { min: 10, max: 20 } }),
    }));

export const getGetV1ListExecutionSchedulesForAUserResponseMock200 =
  (): GraphExecutionJobInfo[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      graph_version: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      cron: faker.string.alpha({ length: { min: 10, max: 20 } }),
      input_data: {},
      input_credentials: faker.helpers.arrayElement([
        {
          [faker.string.alphanumeric(5)]: {
            id: faker.string.alpha({ length: { min: 10, max: 20 } }),
            title: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                null,
              ]),
              undefined,
            ]),
            provider: faker.helpers.arrayElement(Object.values(ProviderName)),
            type: faker.helpers.arrayElement([
              "api_key",
              "oauth2",
              "user_password",
              "host_scoped",
            ] as const),
          },
        },
        undefined,
      ]),
      id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      next_run_time: faker.string.alpha({ length: { min: 10, max: 20 } }),
    }));

export const getDeleteV1DeleteExecutionScheduleResponseMock =
  (): DeleteV1DeleteExecutionSchedule200 => ({});

export const getDeleteV1DeleteExecutionScheduleResponseMock200 =
  (): DeleteV1DeleteExecutionSchedule200 => ({});

export const getDeleteV1DeleteExecutionScheduleResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostV1CreateExecutionScheduleMockHandler = (
  overrideResponse?:
    | GraphExecutionJobInfo
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<GraphExecutionJobInfo> | GraphExecutionJobInfo),
) => {
  return http.post("*/api/graphs/:graphId/schedules", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV1CreateExecutionScheduleResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV1CreateExecutionScheduleMockHandler200 = (
  overrideResponse?:
    | GraphExecutionJobInfo
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<GraphExecutionJobInfo> | GraphExecutionJobInfo),
) => {
  return http.post("*/api/graphs/:graphId/schedules", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV1CreateExecutionScheduleResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV1CreateExecutionScheduleMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.post("*/api/graphs/:graphId/schedules", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV1CreateExecutionScheduleResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1ListExecutionSchedulesForAGraphMockHandler = (
  overrideResponse?:
    | GraphExecutionJobInfo[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GraphExecutionJobInfo[]> | GraphExecutionJobInfo[]),
) => {
  return http.get("*/api/graphs/:graphId/schedules", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1ListExecutionSchedulesForAGraphResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1ListExecutionSchedulesForAGraphMockHandler200 = (
  overrideResponse?:
    | GraphExecutionJobInfo[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GraphExecutionJobInfo[]> | GraphExecutionJobInfo[]),
) => {
  return http.get("*/api/graphs/:graphId/schedules", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1ListExecutionSchedulesForAGraphResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1ListExecutionSchedulesForAGraphMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.get("*/api/graphs/:graphId/schedules", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1ListExecutionSchedulesForAGraphResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1ListExecutionSchedulesForAUserMockHandler = (
  overrideResponse?:
    | GraphExecutionJobInfo[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GraphExecutionJobInfo[]> | GraphExecutionJobInfo[]),
) => {
  return http.get("*/api/schedules", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1ListExecutionSchedulesForAUserResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1ListExecutionSchedulesForAUserMockHandler200 = (
  overrideResponse?:
    | GraphExecutionJobInfo[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GraphExecutionJobInfo[]> | GraphExecutionJobInfo[]),
) => {
  return http.get("*/api/schedules", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1ListExecutionSchedulesForAUserResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getDeleteV1DeleteExecutionScheduleMockHandler = (
  overrideResponse?:
    | DeleteV1DeleteExecutionSchedule200
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) =>
        | Promise<DeleteV1DeleteExecutionSchedule200>
        | DeleteV1DeleteExecutionSchedule200),
) => {
  return http.delete("*/api/schedules/:scheduleId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getDeleteV1DeleteExecutionScheduleResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getDeleteV1DeleteExecutionScheduleMockHandler200 = (
  overrideResponse?:
    | DeleteV1DeleteExecutionSchedule200
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) =>
        | Promise<DeleteV1DeleteExecutionSchedule200>
        | DeleteV1DeleteExecutionSchedule200),
) => {
  return http.delete("*/api/schedules/:scheduleId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getDeleteV1DeleteExecutionScheduleResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getDeleteV1DeleteExecutionScheduleMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.delete("*/api/schedules/:scheduleId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getDeleteV1DeleteExecutionScheduleResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getSchedulesMock = () => [
  getPostV1CreateExecutionScheduleMockHandler(),
  getGetV1ListExecutionSchedulesForAGraphMockHandler(),
  getGetV1ListExecutionSchedulesForAUserMockHandler(),
  getDeleteV1DeleteExecutionScheduleMockHandler(),
];
