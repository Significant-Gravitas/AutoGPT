/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * AutoGPT Agent Server
 * This server is used to execute agents that are created by the AutoGPT system.
 * OpenAPI spec version: 0.1
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";

import type { AutoTopUpConfig } from "../../models/autoTopUpConfig";

import { CreditTransactionType } from "../../models/creditTransactionType";

import type { GetV1GetUserCredits200 } from "../../models/getV1GetUserCredits200";

import type { GetV1ManagePaymentMethods200 } from "../../models/getV1ManagePaymentMethods200";

import type { HTTPValidationError } from "../../models/hTTPValidationError";

import type { RefundRequest } from "../../models/refundRequest";

import type { TransactionHistory } from "../../models/transactionHistory";

export const getGetV1GetUserCreditsResponseMock =
  (): GetV1GetUserCredits200 => ({
    [faker.string.alphanumeric(5)]: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
  });

export const getGetV1GetUserCreditsResponseMock200 =
  (): GetV1GetUserCredits200 => ({
    [faker.string.alphanumeric(5)]: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
  });

export const getPostV1RequestCreditTopUpResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostV1RefundCreditTransactionResponseMock = (): number =>
  faker.number.int();

export const getPostV1RefundCreditTransactionResponseMock200 = (): number =>
  faker.number.int();

export const getPostV1RefundCreditTransactionResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV1GetAutoTopUpResponseMock = (
  overrideResponse: Partial<AutoTopUpConfig> = {},
): AutoTopUpConfig => ({
  amount: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  threshold: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  ...overrideResponse,
});

export const getGetV1GetAutoTopUpResponseMock200 = (
  overrideResponse: Partial<AutoTopUpConfig> = {},
): AutoTopUpConfig => ({
  amount: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  threshold: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  ...overrideResponse,
});

export const getPostV1ConfigureAutoTopUpResponseMock = (): string =>
  faker.word.sample();

export const getPostV1ConfigureAutoTopUpResponseMock200 = (): string =>
  faker.word.sample();

export const getPostV1ConfigureAutoTopUpResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV1ManagePaymentMethodsResponseMock =
  (): GetV1ManagePaymentMethods200 => ({
    [faker.string.alphanumeric(5)]: faker.string.alpha({
      length: { min: 10, max: 20 },
    }),
  });

export const getGetV1ManagePaymentMethodsResponseMock200 =
  (): GetV1ManagePaymentMethods200 => ({
    [faker.string.alphanumeric(5)]: faker.string.alpha({
      length: { min: 10, max: 20 },
    }),
  });

export const getGetV1GetCreditHistoryResponseMock = (
  overrideResponse: Partial<TransactionHistory> = {},
): TransactionHistory => ({
  transactions: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    transaction_key: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    transaction_time: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      undefined,
    ]),
    transaction_type: faker.helpers.arrayElement([
      faker.helpers.arrayElement(Object.values(CreditTransactionType)),
      undefined,
    ]),
    amount: faker.helpers.arrayElement([
      faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      undefined,
    ]),
    running_balance: faker.helpers.arrayElement([
      faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      undefined,
    ]),
    current_balance: faker.helpers.arrayElement([
      faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      undefined,
    ]),
    description: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    usage_graph_id: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    usage_execution_id: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    usage_node_count: faker.helpers.arrayElement([
      faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      undefined,
    ]),
    usage_start_time: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      undefined,
    ]),
    user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    user_email: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    reason: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    admin_email: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    extra_data: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
  })),
  next_transaction_time: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    null,
  ]),
  ...overrideResponse,
});

export const getGetV1GetCreditHistoryResponseMock200 = (
  overrideResponse: Partial<TransactionHistory> = {},
): TransactionHistory => ({
  transactions: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    transaction_key: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    transaction_time: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      undefined,
    ]),
    transaction_type: faker.helpers.arrayElement([
      faker.helpers.arrayElement(Object.values(CreditTransactionType)),
      undefined,
    ]),
    amount: faker.helpers.arrayElement([
      faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      undefined,
    ]),
    running_balance: faker.helpers.arrayElement([
      faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      undefined,
    ]),
    current_balance: faker.helpers.arrayElement([
      faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      undefined,
    ]),
    description: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    usage_graph_id: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    usage_execution_id: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    usage_node_count: faker.helpers.arrayElement([
      faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      undefined,
    ]),
    usage_start_time: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      undefined,
    ]),
    user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    user_email: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    reason: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    admin_email: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    extra_data: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
  })),
  next_transaction_time: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    null,
  ]),
  ...overrideResponse,
});

export const getGetV1GetCreditHistoryResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV1GetRefundRequestsResponseMock = (): RefundRequest[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    transaction_key: faker.string.alpha({ length: { min: 10, max: 20 } }),
    amount: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    reason: faker.string.alpha({ length: { min: 10, max: 20 } }),
    result: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    status: faker.string.alpha({ length: { min: 10, max: 20 } }),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  }));

export const getGetV1GetRefundRequestsResponseMock200 = (): RefundRequest[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    transaction_key: faker.string.alpha({ length: { min: 10, max: 20 } }),
    amount: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    reason: faker.string.alpha({ length: { min: 10, max: 20 } }),
    result: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    status: faker.string.alpha({ length: { min: 10, max: 20 } }),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  }));

export const getGetV1GetUserCreditsMockHandler = (
  overrideResponse?:
    | GetV1GetUserCredits200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetV1GetUserCredits200> | GetV1GetUserCredits200),
) => {
  return http.get("*/api/credits", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1GetUserCreditsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1GetUserCreditsMockHandler200 = (
  overrideResponse?:
    | GetV1GetUserCredits200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetV1GetUserCredits200> | GetV1GetUserCredits200),
) => {
  return http.get("*/api/credits", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1GetUserCreditsResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV1RequestCreditTopUpMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post("*/api/credits", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getPostV1RequestCreditTopUpMockHandler200 = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post("*/api/credits", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getPostV1RequestCreditTopUpMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.post("*/api/credits", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV1RequestCreditTopUpResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPatchV1FulfillCheckoutSessionMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.patch("*/api/credits", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getPatchV1FulfillCheckoutSessionMockHandler200 = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.patch("*/api/credits", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getPostV1RefundCreditTransactionMockHandler = (
  overrideResponse?:
    | number
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<number> | number),
) => {
  return http.post("*/api/credits/:transactionKey/refund", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV1RefundCreditTransactionResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV1RefundCreditTransactionMockHandler200 = (
  overrideResponse?:
    | number
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<number> | number),
) => {
  return http.post("*/api/credits/:transactionKey/refund", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV1RefundCreditTransactionResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV1RefundCreditTransactionMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.post("*/api/credits/:transactionKey/refund", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV1RefundCreditTransactionResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1GetAutoTopUpMockHandler = (
  overrideResponse?:
    | AutoTopUpConfig
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<AutoTopUpConfig> | AutoTopUpConfig),
) => {
  return http.get("*/api/credits/auto-top-up", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1GetAutoTopUpResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1GetAutoTopUpMockHandler200 = (
  overrideResponse?:
    | AutoTopUpConfig
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<AutoTopUpConfig> | AutoTopUpConfig),
) => {
  return http.get("*/api/credits/auto-top-up", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1GetAutoTopUpResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV1ConfigureAutoTopUpMockHandler = (
  overrideResponse?:
    | string
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<string> | string),
) => {
  return http.post("*/api/credits/auto-top-up", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV1ConfigureAutoTopUpResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV1ConfigureAutoTopUpMockHandler200 = (
  overrideResponse?:
    | string
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<string> | string),
) => {
  return http.post("*/api/credits/auto-top-up", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV1ConfigureAutoTopUpResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV1ConfigureAutoTopUpMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.post("*/api/credits/auto-top-up", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV1ConfigureAutoTopUpResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV1HandleStripeWebhooksMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post("*/api/credits/stripe_webhook", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getPostV1HandleStripeWebhooksMockHandler200 = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post("*/api/credits/stripe_webhook", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getGetV1ManagePaymentMethodsMockHandler = (
  overrideResponse?:
    | GetV1ManagePaymentMethods200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<GetV1ManagePaymentMethods200>
        | GetV1ManagePaymentMethods200),
) => {
  return http.get("*/api/credits/manage", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1ManagePaymentMethodsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1ManagePaymentMethodsMockHandler200 = (
  overrideResponse?:
    | GetV1ManagePaymentMethods200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<GetV1ManagePaymentMethods200>
        | GetV1ManagePaymentMethods200),
) => {
  return http.get("*/api/credits/manage", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1ManagePaymentMethodsResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1GetCreditHistoryMockHandler = (
  overrideResponse?:
    | TransactionHistory
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<TransactionHistory> | TransactionHistory),
) => {
  return http.get("*/api/credits/transactions", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1GetCreditHistoryResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1GetCreditHistoryMockHandler200 = (
  overrideResponse?:
    | TransactionHistory
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<TransactionHistory> | TransactionHistory),
) => {
  return http.get("*/api/credits/transactions", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1GetCreditHistoryResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1GetCreditHistoryMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.get("*/api/credits/transactions", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1GetCreditHistoryResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1GetRefundRequestsMockHandler = (
  overrideResponse?:
    | RefundRequest[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<RefundRequest[]> | RefundRequest[]),
) => {
  return http.get("*/api/credits/refunds", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1GetRefundRequestsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1GetRefundRequestsMockHandler200 = (
  overrideResponse?:
    | RefundRequest[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<RefundRequest[]> | RefundRequest[]),
) => {
  return http.get("*/api/credits/refunds", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1GetRefundRequestsResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getCreditsMock = () => [
  getGetV1GetUserCreditsMockHandler(),
  getPostV1RequestCreditTopUpMockHandler(),
  getPatchV1FulfillCheckoutSessionMockHandler(),
  getPostV1RefundCreditTransactionMockHandler(),
  getGetV1GetAutoTopUpMockHandler(),
  getPostV1ConfigureAutoTopUpMockHandler(),
  getPostV1HandleStripeWebhooksMockHandler(),
  getGetV1ManagePaymentMethodsMockHandler(),
  getGetV1GetCreditHistoryMockHandler(),
  getGetV1GetRefundRequestsMockHandler(),
];
