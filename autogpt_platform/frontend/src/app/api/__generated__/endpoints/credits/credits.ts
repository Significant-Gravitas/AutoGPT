/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * AutoGPT Agent Server
 * This server is used to execute agents that are created by the AutoGPT system.
 * OpenAPI spec version: 0.1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { AutoTopUpConfig } from "../../models/autoTopUpConfig";

import type { GetV1GetCreditHistoryParams } from "../../models/getV1GetCreditHistoryParams";

import type { GetV1GetUserCredits200 } from "../../models/getV1GetUserCredits200";

import type { GetV1ManagePaymentMethods200 } from "../../models/getV1ManagePaymentMethods200";

import type { HTTPValidationError } from "../../models/hTTPValidationError";

import type { PostV1RefundCreditTransactionBody } from "../../models/postV1RefundCreditTransactionBody";

import type { RefundRequest } from "../../models/refundRequest";

import type { RequestTopUp } from "../../models/requestTopUp";

import type { TransactionHistory } from "../../models/transactionHistory";

import { customMutator } from "../../../mutators/custom-mutator";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Get user credits
 */
export type getV1GetUserCreditsResponse200 = {
  data: GetV1GetUserCredits200;
  status: 200;
};

export type getV1GetUserCreditsResponseComposite =
  getV1GetUserCreditsResponse200;

export type getV1GetUserCreditsResponse =
  getV1GetUserCreditsResponseComposite & {
    headers: Headers;
  };

export const getGetV1GetUserCreditsUrl = () => {
  return `/api/credits`;
};

export const getV1GetUserCredits = async (
  options?: RequestInit,
): Promise<getV1GetUserCreditsResponse> => {
  return customMutator<getV1GetUserCreditsResponse>(
    getGetV1GetUserCreditsUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV1GetUserCreditsQueryKey = () => {
  return [`/api/credits`] as const;
};

export const getGetV1GetUserCreditsQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1GetUserCredits>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getV1GetUserCredits>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customMutator>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetV1GetUserCreditsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV1GetUserCredits>>
  > = ({ signal }) => getV1GetUserCredits({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1GetUserCredits>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV1GetUserCreditsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1GetUserCredits>>
>;
export type GetV1GetUserCreditsQueryError = unknown;

export function useGetV1GetUserCredits<
  TData = Awaited<ReturnType<typeof getV1GetUserCredits>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetUserCredits>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1GetUserCredits>>,
          TError,
          Awaited<ReturnType<typeof getV1GetUserCredits>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1GetUserCredits<
  TData = Awaited<ReturnType<typeof getV1GetUserCredits>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetUserCredits>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1GetUserCredits>>,
          TError,
          Awaited<ReturnType<typeof getV1GetUserCredits>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1GetUserCredits<
  TData = Awaited<ReturnType<typeof getV1GetUserCredits>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetUserCredits>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get user credits
 */

export function useGetV1GetUserCredits<
  TData = Awaited<ReturnType<typeof getV1GetUserCredits>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetUserCredits>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV1GetUserCreditsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Request credit top up
 */
export type postV1RequestCreditTopUpResponse200 = {
  data: unknown;
  status: 200;
};

export type postV1RequestCreditTopUpResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type postV1RequestCreditTopUpResponseComposite =
  | postV1RequestCreditTopUpResponse200
  | postV1RequestCreditTopUpResponse422;

export type postV1RequestCreditTopUpResponse =
  postV1RequestCreditTopUpResponseComposite & {
    headers: Headers;
  };

export const getPostV1RequestCreditTopUpUrl = () => {
  return `/api/credits`;
};

export const postV1RequestCreditTopUp = async (
  requestTopUp: RequestTopUp,
  options?: RequestInit,
): Promise<postV1RequestCreditTopUpResponse> => {
  return customMutator<postV1RequestCreditTopUpResponse>(
    getPostV1RequestCreditTopUpUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(requestTopUp),
    },
  );
};

export const getPostV1RequestCreditTopUpMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1RequestCreditTopUp>>,
    TError,
    { data: RequestTopUp },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1RequestCreditTopUp>>,
  TError,
  { data: RequestTopUp },
  TContext
> => {
  const mutationKey = ["postV1RequestCreditTopUp"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1RequestCreditTopUp>>,
    { data: RequestTopUp }
  > = (props) => {
    const { data } = props ?? {};

    return postV1RequestCreditTopUp(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1RequestCreditTopUpMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1RequestCreditTopUp>>
>;
export type PostV1RequestCreditTopUpMutationBody = RequestTopUp;
export type PostV1RequestCreditTopUpMutationError = HTTPValidationError;

/**
 * @summary Request credit top up
 */
export const usePostV1RequestCreditTopUp = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1RequestCreditTopUp>>,
      TError,
      { data: RequestTopUp },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postV1RequestCreditTopUp>>,
  TError,
  { data: RequestTopUp },
  TContext
> => {
  const mutationOptions = getPostV1RequestCreditTopUpMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Fulfill checkout session
 */
export type patchV1FulfillCheckoutSessionResponse200 = {
  data: unknown;
  status: 200;
};

export type patchV1FulfillCheckoutSessionResponseComposite =
  patchV1FulfillCheckoutSessionResponse200;

export type patchV1FulfillCheckoutSessionResponse =
  patchV1FulfillCheckoutSessionResponseComposite & {
    headers: Headers;
  };

export const getPatchV1FulfillCheckoutSessionUrl = () => {
  return `/api/credits`;
};

export const patchV1FulfillCheckoutSession = async (
  options?: RequestInit,
): Promise<patchV1FulfillCheckoutSessionResponse> => {
  return customMutator<patchV1FulfillCheckoutSessionResponse>(
    getPatchV1FulfillCheckoutSessionUrl(),
    {
      ...options,
      method: "PATCH",
    },
  );
};

export const getPatchV1FulfillCheckoutSessionMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchV1FulfillCheckoutSession>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchV1FulfillCheckoutSession>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["patchV1FulfillCheckoutSession"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchV1FulfillCheckoutSession>>,
    void
  > = () => {
    return patchV1FulfillCheckoutSession(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchV1FulfillCheckoutSessionMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchV1FulfillCheckoutSession>>
>;

export type PatchV1FulfillCheckoutSessionMutationError = unknown;

/**
 * @summary Fulfill checkout session
 */
export const usePatchV1FulfillCheckoutSession = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof patchV1FulfillCheckoutSession>>,
      TError,
      void,
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof patchV1FulfillCheckoutSession>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions =
    getPatchV1FulfillCheckoutSessionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Refund credit transaction
 */
export type postV1RefundCreditTransactionResponse200 = {
  data: number;
  status: 200;
};

export type postV1RefundCreditTransactionResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type postV1RefundCreditTransactionResponseComposite =
  | postV1RefundCreditTransactionResponse200
  | postV1RefundCreditTransactionResponse422;

export type postV1RefundCreditTransactionResponse =
  postV1RefundCreditTransactionResponseComposite & {
    headers: Headers;
  };

export const getPostV1RefundCreditTransactionUrl = (transactionKey: string) => {
  return `/api/credits/${transactionKey}/refund`;
};

export const postV1RefundCreditTransaction = async (
  transactionKey: string,
  postV1RefundCreditTransactionBody: PostV1RefundCreditTransactionBody,
  options?: RequestInit,
): Promise<postV1RefundCreditTransactionResponse> => {
  return customMutator<postV1RefundCreditTransactionResponse>(
    getPostV1RefundCreditTransactionUrl(transactionKey),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(postV1RefundCreditTransactionBody),
    },
  );
};

export const getPostV1RefundCreditTransactionMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1RefundCreditTransaction>>,
    TError,
    { transactionKey: string; data: PostV1RefundCreditTransactionBody },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1RefundCreditTransaction>>,
  TError,
  { transactionKey: string; data: PostV1RefundCreditTransactionBody },
  TContext
> => {
  const mutationKey = ["postV1RefundCreditTransaction"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1RefundCreditTransaction>>,
    { transactionKey: string; data: PostV1RefundCreditTransactionBody }
  > = (props) => {
    const { transactionKey, data } = props ?? {};

    return postV1RefundCreditTransaction(transactionKey, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1RefundCreditTransactionMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1RefundCreditTransaction>>
>;
export type PostV1RefundCreditTransactionMutationBody =
  PostV1RefundCreditTransactionBody;
export type PostV1RefundCreditTransactionMutationError = HTTPValidationError;

/**
 * @summary Refund credit transaction
 */
export const usePostV1RefundCreditTransaction = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1RefundCreditTransaction>>,
      TError,
      { transactionKey: string; data: PostV1RefundCreditTransactionBody },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postV1RefundCreditTransaction>>,
  TError,
  { transactionKey: string; data: PostV1RefundCreditTransactionBody },
  TContext
> => {
  const mutationOptions =
    getPostV1RefundCreditTransactionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get auto top up
 */
export type getV1GetAutoTopUpResponse200 = {
  data: AutoTopUpConfig;
  status: 200;
};

export type getV1GetAutoTopUpResponseComposite = getV1GetAutoTopUpResponse200;

export type getV1GetAutoTopUpResponse = getV1GetAutoTopUpResponseComposite & {
  headers: Headers;
};

export const getGetV1GetAutoTopUpUrl = () => {
  return `/api/credits/auto-top-up`;
};

export const getV1GetAutoTopUp = async (
  options?: RequestInit,
): Promise<getV1GetAutoTopUpResponse> => {
  return customMutator<getV1GetAutoTopUpResponse>(getGetV1GetAutoTopUpUrl(), {
    ...options,
    method: "GET",
  });
};

export const getGetV1GetAutoTopUpQueryKey = () => {
  return [`/api/credits/auto-top-up`] as const;
};

export const getGetV1GetAutoTopUpQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1GetAutoTopUp>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getV1GetAutoTopUp>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customMutator>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetV1GetAutoTopUpQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV1GetAutoTopUp>>
  > = ({ signal }) => getV1GetAutoTopUp({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1GetAutoTopUp>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV1GetAutoTopUpQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1GetAutoTopUp>>
>;
export type GetV1GetAutoTopUpQueryError = unknown;

export function useGetV1GetAutoTopUp<
  TData = Awaited<ReturnType<typeof getV1GetAutoTopUp>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetAutoTopUp>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1GetAutoTopUp>>,
          TError,
          Awaited<ReturnType<typeof getV1GetAutoTopUp>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1GetAutoTopUp<
  TData = Awaited<ReturnType<typeof getV1GetAutoTopUp>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetAutoTopUp>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1GetAutoTopUp>>,
          TError,
          Awaited<ReturnType<typeof getV1GetAutoTopUp>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1GetAutoTopUp<
  TData = Awaited<ReturnType<typeof getV1GetAutoTopUp>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetAutoTopUp>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get auto top up
 */

export function useGetV1GetAutoTopUp<
  TData = Awaited<ReturnType<typeof getV1GetAutoTopUp>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetAutoTopUp>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV1GetAutoTopUpQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Configure auto top up
 */
export type postV1ConfigureAutoTopUpResponse200 = {
  data: string;
  status: 200;
};

export type postV1ConfigureAutoTopUpResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type postV1ConfigureAutoTopUpResponseComposite =
  | postV1ConfigureAutoTopUpResponse200
  | postV1ConfigureAutoTopUpResponse422;

export type postV1ConfigureAutoTopUpResponse =
  postV1ConfigureAutoTopUpResponseComposite & {
    headers: Headers;
  };

export const getPostV1ConfigureAutoTopUpUrl = () => {
  return `/api/credits/auto-top-up`;
};

export const postV1ConfigureAutoTopUp = async (
  autoTopUpConfig: AutoTopUpConfig,
  options?: RequestInit,
): Promise<postV1ConfigureAutoTopUpResponse> => {
  return customMutator<postV1ConfigureAutoTopUpResponse>(
    getPostV1ConfigureAutoTopUpUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(autoTopUpConfig),
    },
  );
};

export const getPostV1ConfigureAutoTopUpMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1ConfigureAutoTopUp>>,
    TError,
    { data: AutoTopUpConfig },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1ConfigureAutoTopUp>>,
  TError,
  { data: AutoTopUpConfig },
  TContext
> => {
  const mutationKey = ["postV1ConfigureAutoTopUp"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1ConfigureAutoTopUp>>,
    { data: AutoTopUpConfig }
  > = (props) => {
    const { data } = props ?? {};

    return postV1ConfigureAutoTopUp(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1ConfigureAutoTopUpMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1ConfigureAutoTopUp>>
>;
export type PostV1ConfigureAutoTopUpMutationBody = AutoTopUpConfig;
export type PostV1ConfigureAutoTopUpMutationError = HTTPValidationError;

/**
 * @summary Configure auto top up
 */
export const usePostV1ConfigureAutoTopUp = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1ConfigureAutoTopUp>>,
      TError,
      { data: AutoTopUpConfig },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postV1ConfigureAutoTopUp>>,
  TError,
  { data: AutoTopUpConfig },
  TContext
> => {
  const mutationOptions = getPostV1ConfigureAutoTopUpMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Handle Stripe webhooks
 */
export type postV1HandleStripeWebhooksResponse200 = {
  data: unknown;
  status: 200;
};

export type postV1HandleStripeWebhooksResponseComposite =
  postV1HandleStripeWebhooksResponse200;

export type postV1HandleStripeWebhooksResponse =
  postV1HandleStripeWebhooksResponseComposite & {
    headers: Headers;
  };

export const getPostV1HandleStripeWebhooksUrl = () => {
  return `/api/credits/stripe_webhook`;
};

export const postV1HandleStripeWebhooks = async (
  options?: RequestInit,
): Promise<postV1HandleStripeWebhooksResponse> => {
  return customMutator<postV1HandleStripeWebhooksResponse>(
    getPostV1HandleStripeWebhooksUrl(),
    {
      ...options,
      method: "POST",
    },
  );
};

export const getPostV1HandleStripeWebhooksMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1HandleStripeWebhooks>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1HandleStripeWebhooks>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["postV1HandleStripeWebhooks"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1HandleStripeWebhooks>>,
    void
  > = () => {
    return postV1HandleStripeWebhooks(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1HandleStripeWebhooksMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1HandleStripeWebhooks>>
>;

export type PostV1HandleStripeWebhooksMutationError = unknown;

/**
 * @summary Handle Stripe webhooks
 */
export const usePostV1HandleStripeWebhooks = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1HandleStripeWebhooks>>,
      TError,
      void,
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postV1HandleStripeWebhooks>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostV1HandleStripeWebhooksMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Manage payment methods
 */
export type getV1ManagePaymentMethodsResponse200 = {
  data: GetV1ManagePaymentMethods200;
  status: 200;
};

export type getV1ManagePaymentMethodsResponseComposite =
  getV1ManagePaymentMethodsResponse200;

export type getV1ManagePaymentMethodsResponse =
  getV1ManagePaymentMethodsResponseComposite & {
    headers: Headers;
  };

export const getGetV1ManagePaymentMethodsUrl = () => {
  return `/api/credits/manage`;
};

export const getV1ManagePaymentMethods = async (
  options?: RequestInit,
): Promise<getV1ManagePaymentMethodsResponse> => {
  return customMutator<getV1ManagePaymentMethodsResponse>(
    getGetV1ManagePaymentMethodsUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV1ManagePaymentMethodsQueryKey = () => {
  return [`/api/credits/manage`] as const;
};

export const getGetV1ManagePaymentMethodsQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1ManagePaymentMethods>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getV1ManagePaymentMethods>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customMutator>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetV1ManagePaymentMethodsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV1ManagePaymentMethods>>
  > = ({ signal }) => getV1ManagePaymentMethods({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1ManagePaymentMethods>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV1ManagePaymentMethodsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1ManagePaymentMethods>>
>;
export type GetV1ManagePaymentMethodsQueryError = unknown;

export function useGetV1ManagePaymentMethods<
  TData = Awaited<ReturnType<typeof getV1ManagePaymentMethods>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1ManagePaymentMethods>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1ManagePaymentMethods>>,
          TError,
          Awaited<ReturnType<typeof getV1ManagePaymentMethods>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1ManagePaymentMethods<
  TData = Awaited<ReturnType<typeof getV1ManagePaymentMethods>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1ManagePaymentMethods>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1ManagePaymentMethods>>,
          TError,
          Awaited<ReturnType<typeof getV1ManagePaymentMethods>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1ManagePaymentMethods<
  TData = Awaited<ReturnType<typeof getV1ManagePaymentMethods>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1ManagePaymentMethods>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Manage payment methods
 */

export function useGetV1ManagePaymentMethods<
  TData = Awaited<ReturnType<typeof getV1ManagePaymentMethods>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1ManagePaymentMethods>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV1ManagePaymentMethodsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get credit history
 */
export type getV1GetCreditHistoryResponse200 = {
  data: TransactionHistory;
  status: 200;
};

export type getV1GetCreditHistoryResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type getV1GetCreditHistoryResponseComposite =
  | getV1GetCreditHistoryResponse200
  | getV1GetCreditHistoryResponse422;

export type getV1GetCreditHistoryResponse =
  getV1GetCreditHistoryResponseComposite & {
    headers: Headers;
  };

export const getGetV1GetCreditHistoryUrl = (
  params?: GetV1GetCreditHistoryParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/credits/transactions?${stringifiedParams}`
    : `/api/credits/transactions`;
};

export const getV1GetCreditHistory = async (
  params?: GetV1GetCreditHistoryParams,
  options?: RequestInit,
): Promise<getV1GetCreditHistoryResponse> => {
  return customMutator<getV1GetCreditHistoryResponse>(
    getGetV1GetCreditHistoryUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV1GetCreditHistoryQueryKey = (
  params?: GetV1GetCreditHistoryParams,
) => {
  return [`/api/credits/transactions`, ...(params ? [params] : [])] as const;
};

export const getGetV1GetCreditHistoryQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1GetCreditHistory>>,
  TError = HTTPValidationError,
>(
  params?: GetV1GetCreditHistoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetCreditHistory>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetV1GetCreditHistoryQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV1GetCreditHistory>>
  > = ({ signal }) =>
    getV1GetCreditHistory(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1GetCreditHistory>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV1GetCreditHistoryQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1GetCreditHistory>>
>;
export type GetV1GetCreditHistoryQueryError = HTTPValidationError;

export function useGetV1GetCreditHistory<
  TData = Awaited<ReturnType<typeof getV1GetCreditHistory>>,
  TError = HTTPValidationError,
>(
  params: undefined | GetV1GetCreditHistoryParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetCreditHistory>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1GetCreditHistory>>,
          TError,
          Awaited<ReturnType<typeof getV1GetCreditHistory>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1GetCreditHistory<
  TData = Awaited<ReturnType<typeof getV1GetCreditHistory>>,
  TError = HTTPValidationError,
>(
  params?: GetV1GetCreditHistoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetCreditHistory>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1GetCreditHistory>>,
          TError,
          Awaited<ReturnType<typeof getV1GetCreditHistory>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1GetCreditHistory<
  TData = Awaited<ReturnType<typeof getV1GetCreditHistory>>,
  TError = HTTPValidationError,
>(
  params?: GetV1GetCreditHistoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetCreditHistory>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get credit history
 */

export function useGetV1GetCreditHistory<
  TData = Awaited<ReturnType<typeof getV1GetCreditHistory>>,
  TError = HTTPValidationError,
>(
  params?: GetV1GetCreditHistoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetCreditHistory>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV1GetCreditHistoryQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get refund requests
 */
export type getV1GetRefundRequestsResponse200 = {
  data: RefundRequest[];
  status: 200;
};

export type getV1GetRefundRequestsResponseComposite =
  getV1GetRefundRequestsResponse200;

export type getV1GetRefundRequestsResponse =
  getV1GetRefundRequestsResponseComposite & {
    headers: Headers;
  };

export const getGetV1GetRefundRequestsUrl = () => {
  return `/api/credits/refunds`;
};

export const getV1GetRefundRequests = async (
  options?: RequestInit,
): Promise<getV1GetRefundRequestsResponse> => {
  return customMutator<getV1GetRefundRequestsResponse>(
    getGetV1GetRefundRequestsUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV1GetRefundRequestsQueryKey = () => {
  return [`/api/credits/refunds`] as const;
};

export const getGetV1GetRefundRequestsQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1GetRefundRequests>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getV1GetRefundRequests>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customMutator>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetV1GetRefundRequestsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV1GetRefundRequests>>
  > = ({ signal }) => getV1GetRefundRequests({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1GetRefundRequests>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV1GetRefundRequestsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1GetRefundRequests>>
>;
export type GetV1GetRefundRequestsQueryError = unknown;

export function useGetV1GetRefundRequests<
  TData = Awaited<ReturnType<typeof getV1GetRefundRequests>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetRefundRequests>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1GetRefundRequests>>,
          TError,
          Awaited<ReturnType<typeof getV1GetRefundRequests>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1GetRefundRequests<
  TData = Awaited<ReturnType<typeof getV1GetRefundRequests>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetRefundRequests>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1GetRefundRequests>>,
          TError,
          Awaited<ReturnType<typeof getV1GetRefundRequests>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1GetRefundRequests<
  TData = Awaited<ReturnType<typeof getV1GetRefundRequests>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetRefundRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get refund requests
 */

export function useGetV1GetRefundRequests<
  TData = Awaited<ReturnType<typeof getV1GetRefundRequests>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetRefundRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV1GetRefundRequestsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
