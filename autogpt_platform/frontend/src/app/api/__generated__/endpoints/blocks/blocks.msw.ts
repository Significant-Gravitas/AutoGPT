/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * AutoGPT Agent Server
 * This server is used to execute agents that are created by the AutoGPT system.
 * OpenAPI spec version: 0.1
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";

import type { GetV1ListAvailableBlocks200Item } from "../../models/getV1ListAvailableBlocks200Item";

import type { HTTPValidationError } from "../../models/hTTPValidationError";

import type { PostV1ExecuteGraphBlock200 } from "../../models/postV1ExecuteGraphBlock200";

export const getGetV1ListAvailableBlocksResponseMock =
  (): GetV1ListAvailableBlocks200Item[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({}));

export const getGetV1ListAvailableBlocksResponseMock200 =
  (): GetV1ListAvailableBlocks200Item[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({}));

export const getPostV1ExecuteGraphBlockResponseMock =
  (): PostV1ExecuteGraphBlock200 => ({
    [faker.string.alphanumeric(5)]: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({})),
  });

export const getPostV1ExecuteGraphBlockResponseMock200 =
  (): PostV1ExecuteGraphBlock200 => ({
    [faker.string.alphanumeric(5)]: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({})),
  });

export const getPostV1ExecuteGraphBlockResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV1ListAvailableBlocksMockHandler = (
  overrideResponse?:
    | GetV1ListAvailableBlocks200Item[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<GetV1ListAvailableBlocks200Item[]>
        | GetV1ListAvailableBlocks200Item[]),
) => {
  return http.get("*/api/blocks", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1ListAvailableBlocksResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1ListAvailableBlocksMockHandler200 = (
  overrideResponse?:
    | GetV1ListAvailableBlocks200Item[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<GetV1ListAvailableBlocks200Item[]>
        | GetV1ListAvailableBlocks200Item[]),
) => {
  return http.get("*/api/blocks", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1ListAvailableBlocksResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV1ExecuteGraphBlockMockHandler = (
  overrideResponse?:
    | PostV1ExecuteGraphBlock200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<PostV1ExecuteGraphBlock200> | PostV1ExecuteGraphBlock200),
) => {
  return http.post("*/api/blocks/:blockId/execute", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV1ExecuteGraphBlockResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV1ExecuteGraphBlockMockHandler200 = (
  overrideResponse?:
    | PostV1ExecuteGraphBlock200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<PostV1ExecuteGraphBlock200> | PostV1ExecuteGraphBlock200),
) => {
  return http.post("*/api/blocks/:blockId/execute", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV1ExecuteGraphBlockResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV1ExecuteGraphBlockMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.post("*/api/blocks/:blockId/execute", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV1ExecuteGraphBlockResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getBlocksMock = () => [
  getGetV1ListAvailableBlocksMockHandler(),
  getPostV1ExecuteGraphBlockMockHandler(),
];
