/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * AutoGPT Agent Server
 * This server is used to execute agents that are created by the AutoGPT system.
 * OpenAPI spec version: 0.1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { GetV1ListAvailableBlocks200Item } from "../../models/getV1ListAvailableBlocks200Item";

import type { HTTPValidationError } from "../../models/hTTPValidationError";

import type { PostV1ExecuteGraphBlock200 } from "../../models/postV1ExecuteGraphBlock200";

import type { PostV1ExecuteGraphBlockBody } from "../../models/postV1ExecuteGraphBlockBody";

import { customMutator } from "../../../mutators/custom-mutator";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary List available blocks
 */
export type getV1ListAvailableBlocksResponse200 = {
  data: GetV1ListAvailableBlocks200Item[];
  status: 200;
};

export type getV1ListAvailableBlocksResponseComposite =
  getV1ListAvailableBlocksResponse200;

export type getV1ListAvailableBlocksResponse =
  getV1ListAvailableBlocksResponseComposite & {
    headers: Headers;
  };

export const getGetV1ListAvailableBlocksUrl = () => {
  return `/api/blocks`;
};

export const getV1ListAvailableBlocks = async (
  options?: RequestInit,
): Promise<getV1ListAvailableBlocksResponse> => {
  return customMutator<getV1ListAvailableBlocksResponse>(
    getGetV1ListAvailableBlocksUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV1ListAvailableBlocksQueryKey = () => {
  return [`/api/blocks`] as const;
};

export const getGetV1ListAvailableBlocksQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1ListAvailableBlocks>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getV1ListAvailableBlocks>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customMutator>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetV1ListAvailableBlocksQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV1ListAvailableBlocks>>
  > = ({ signal }) => getV1ListAvailableBlocks({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1ListAvailableBlocks>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV1ListAvailableBlocksQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1ListAvailableBlocks>>
>;
export type GetV1ListAvailableBlocksQueryError = unknown;

export function useGetV1ListAvailableBlocks<
  TData = Awaited<ReturnType<typeof getV1ListAvailableBlocks>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1ListAvailableBlocks>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1ListAvailableBlocks>>,
          TError,
          Awaited<ReturnType<typeof getV1ListAvailableBlocks>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1ListAvailableBlocks<
  TData = Awaited<ReturnType<typeof getV1ListAvailableBlocks>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1ListAvailableBlocks>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1ListAvailableBlocks>>,
          TError,
          Awaited<ReturnType<typeof getV1ListAvailableBlocks>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1ListAvailableBlocks<
  TData = Awaited<ReturnType<typeof getV1ListAvailableBlocks>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1ListAvailableBlocks>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List available blocks
 */

export function useGetV1ListAvailableBlocks<
  TData = Awaited<ReturnType<typeof getV1ListAvailableBlocks>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1ListAvailableBlocks>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV1ListAvailableBlocksQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Execute graph block
 */
export type postV1ExecuteGraphBlockResponse200 = {
  data: PostV1ExecuteGraphBlock200;
  status: 200;
};

export type postV1ExecuteGraphBlockResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type postV1ExecuteGraphBlockResponseComposite =
  | postV1ExecuteGraphBlockResponse200
  | postV1ExecuteGraphBlockResponse422;

export type postV1ExecuteGraphBlockResponse =
  postV1ExecuteGraphBlockResponseComposite & {
    headers: Headers;
  };

export const getPostV1ExecuteGraphBlockUrl = (blockId: string) => {
  return `/api/blocks/${blockId}/execute`;
};

export const postV1ExecuteGraphBlock = async (
  blockId: string,
  postV1ExecuteGraphBlockBody: PostV1ExecuteGraphBlockBody,
  options?: RequestInit,
): Promise<postV1ExecuteGraphBlockResponse> => {
  return customMutator<postV1ExecuteGraphBlockResponse>(
    getPostV1ExecuteGraphBlockUrl(blockId),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(postV1ExecuteGraphBlockBody),
    },
  );
};

export const getPostV1ExecuteGraphBlockMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1ExecuteGraphBlock>>,
    TError,
    { blockId: string; data: PostV1ExecuteGraphBlockBody },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1ExecuteGraphBlock>>,
  TError,
  { blockId: string; data: PostV1ExecuteGraphBlockBody },
  TContext
> => {
  const mutationKey = ["postV1ExecuteGraphBlock"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1ExecuteGraphBlock>>,
    { blockId: string; data: PostV1ExecuteGraphBlockBody }
  > = (props) => {
    const { blockId, data } = props ?? {};

    return postV1ExecuteGraphBlock(blockId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1ExecuteGraphBlockMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1ExecuteGraphBlock>>
>;
export type PostV1ExecuteGraphBlockMutationBody = PostV1ExecuteGraphBlockBody;
export type PostV1ExecuteGraphBlockMutationError = HTTPValidationError;

/**
 * @summary Execute graph block
 */
export const usePostV1ExecuteGraphBlock = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1ExecuteGraphBlock>>,
      TError,
      { blockId: string; data: PostV1ExecuteGraphBlockBody },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postV1ExecuteGraphBlock>>,
  TError,
  { blockId: string; data: PostV1ExecuteGraphBlockBody },
  TContext
> => {
  const mutationOptions = getPostV1ExecuteGraphBlockMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
