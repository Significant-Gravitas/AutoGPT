/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * AutoGPT Agent Server
 * This server is used to execute agents that are created by the AutoGPT system.
 * OpenAPI spec version: 0.1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { BodyPostV1ExecuteGraphAgent } from "../../models/bodyPostV1ExecuteGraphAgent";

import type { CreateGraph } from "../../models/createGraph";

import type { DeleteGraphResponse } from "../../models/deleteGraphResponse";

import type { ExecuteGraphResponse } from "../../models/executeGraphResponse";

import type { GetV1GetExecutionDetails200 } from "../../models/getV1GetExecutionDetails200";

import type { GetV1GetGraphVersionParams } from "../../models/getV1GetGraphVersionParams";

import type { GetV1GetSpecificGraphParams } from "../../models/getV1GetSpecificGraphParams";

import type { Graph } from "../../models/graph";

import type { GraphExecution } from "../../models/graphExecution";

import type { GraphExecutionMeta } from "../../models/graphExecutionMeta";

import type { GraphModel } from "../../models/graphModel";

import type { HTTPValidationError } from "../../models/hTTPValidationError";

import type { PostV1ExecuteGraphAgentParams } from "../../models/postV1ExecuteGraphAgentParams";

import type { SetGraphActiveVersion } from "../../models/setGraphActiveVersion";

import { customMutator } from "../../../mutators/custom-mutator";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary List user graphs
 */
export type getV1ListUserGraphsResponse200 = {
  data: GraphModel[];
  status: 200;
};

export type getV1ListUserGraphsResponseComposite =
  getV1ListUserGraphsResponse200;

export type getV1ListUserGraphsResponse =
  getV1ListUserGraphsResponseComposite & {
    headers: Headers;
  };

export const getGetV1ListUserGraphsUrl = () => {
  return `/api/graphs`;
};

export const getV1ListUserGraphs = async (
  options?: RequestInit,
): Promise<getV1ListUserGraphsResponse> => {
  return customMutator<getV1ListUserGraphsResponse>(
    getGetV1ListUserGraphsUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV1ListUserGraphsQueryKey = () => {
  return [`/api/graphs`] as const;
};

export const getGetV1ListUserGraphsQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1ListUserGraphs>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getV1ListUserGraphs>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customMutator>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetV1ListUserGraphsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV1ListUserGraphs>>
  > = ({ signal }) => getV1ListUserGraphs({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1ListUserGraphs>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV1ListUserGraphsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1ListUserGraphs>>
>;
export type GetV1ListUserGraphsQueryError = unknown;

export function useGetV1ListUserGraphs<
  TData = Awaited<ReturnType<typeof getV1ListUserGraphs>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1ListUserGraphs>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1ListUserGraphs>>,
          TError,
          Awaited<ReturnType<typeof getV1ListUserGraphs>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1ListUserGraphs<
  TData = Awaited<ReturnType<typeof getV1ListUserGraphs>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1ListUserGraphs>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1ListUserGraphs>>,
          TError,
          Awaited<ReturnType<typeof getV1ListUserGraphs>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1ListUserGraphs<
  TData = Awaited<ReturnType<typeof getV1ListUserGraphs>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1ListUserGraphs>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List user graphs
 */

export function useGetV1ListUserGraphs<
  TData = Awaited<ReturnType<typeof getV1ListUserGraphs>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1ListUserGraphs>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV1ListUserGraphsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Create new graph
 */
export type postV1CreateNewGraphResponse200 = {
  data: GraphModel;
  status: 200;
};

export type postV1CreateNewGraphResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type postV1CreateNewGraphResponseComposite =
  | postV1CreateNewGraphResponse200
  | postV1CreateNewGraphResponse422;

export type postV1CreateNewGraphResponse =
  postV1CreateNewGraphResponseComposite & {
    headers: Headers;
  };

export const getPostV1CreateNewGraphUrl = () => {
  return `/api/graphs`;
};

export const postV1CreateNewGraph = async (
  createGraph: CreateGraph,
  options?: RequestInit,
): Promise<postV1CreateNewGraphResponse> => {
  return customMutator<postV1CreateNewGraphResponse>(
    getPostV1CreateNewGraphUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(createGraph),
    },
  );
};

export const getPostV1CreateNewGraphMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1CreateNewGraph>>,
    TError,
    { data: CreateGraph },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1CreateNewGraph>>,
  TError,
  { data: CreateGraph },
  TContext
> => {
  const mutationKey = ["postV1CreateNewGraph"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1CreateNewGraph>>,
    { data: CreateGraph }
  > = (props) => {
    const { data } = props ?? {};

    return postV1CreateNewGraph(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1CreateNewGraphMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1CreateNewGraph>>
>;
export type PostV1CreateNewGraphMutationBody = CreateGraph;
export type PostV1CreateNewGraphMutationError = HTTPValidationError;

/**
 * @summary Create new graph
 */
export const usePostV1CreateNewGraph = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1CreateNewGraph>>,
      TError,
      { data: CreateGraph },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postV1CreateNewGraph>>,
  TError,
  { data: CreateGraph },
  TContext
> => {
  const mutationOptions = getPostV1CreateNewGraphMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get graph version
 */
export type getV1GetGraphVersionResponse200 = {
  data: GraphModel;
  status: 200;
};

export type getV1GetGraphVersionResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type getV1GetGraphVersionResponseComposite =
  | getV1GetGraphVersionResponse200
  | getV1GetGraphVersionResponse422;

export type getV1GetGraphVersionResponse =
  getV1GetGraphVersionResponseComposite & {
    headers: Headers;
  };

export const getGetV1GetGraphVersionUrl = (
  graphId: string,
  version: number | null,
  params?: GetV1GetGraphVersionParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/graphs/${graphId}/versions/${version}?${stringifiedParams}`
    : `/api/graphs/${graphId}/versions/${version}`;
};

export const getV1GetGraphVersion = async (
  graphId: string,
  version: number | null,
  params?: GetV1GetGraphVersionParams,
  options?: RequestInit,
): Promise<getV1GetGraphVersionResponse> => {
  return customMutator<getV1GetGraphVersionResponse>(
    getGetV1GetGraphVersionUrl(graphId, version, params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV1GetGraphVersionQueryKey = (
  graphId: string,
  version: number | null,
  params?: GetV1GetGraphVersionParams,
) => {
  return [
    `/api/graphs/${graphId}/versions/${version}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetV1GetGraphVersionQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1GetGraphVersion>>,
  TError = HTTPValidationError,
>(
  graphId: string,
  version: number | null,
  params?: GetV1GetGraphVersionParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetGraphVersion>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetV1GetGraphVersionQueryKey(graphId, version, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV1GetGraphVersion>>
  > = ({ signal }) =>
    getV1GetGraphVersion(graphId, version, params, {
      signal,
      ...requestOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!(graphId && version),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1GetGraphVersion>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV1GetGraphVersionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1GetGraphVersion>>
>;
export type GetV1GetGraphVersionQueryError = HTTPValidationError;

export function useGetV1GetGraphVersion<
  TData = Awaited<ReturnType<typeof getV1GetGraphVersion>>,
  TError = HTTPValidationError,
>(
  graphId: string,
  version: number | null,
  params: undefined | GetV1GetGraphVersionParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetGraphVersion>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1GetGraphVersion>>,
          TError,
          Awaited<ReturnType<typeof getV1GetGraphVersion>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1GetGraphVersion<
  TData = Awaited<ReturnType<typeof getV1GetGraphVersion>>,
  TError = HTTPValidationError,
>(
  graphId: string,
  version: number | null,
  params?: GetV1GetGraphVersionParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetGraphVersion>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1GetGraphVersion>>,
          TError,
          Awaited<ReturnType<typeof getV1GetGraphVersion>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1GetGraphVersion<
  TData = Awaited<ReturnType<typeof getV1GetGraphVersion>>,
  TError = HTTPValidationError,
>(
  graphId: string,
  version: number | null,
  params?: GetV1GetGraphVersionParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetGraphVersion>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get graph version
 */

export function useGetV1GetGraphVersion<
  TData = Awaited<ReturnType<typeof getV1GetGraphVersion>>,
  TError = HTTPValidationError,
>(
  graphId: string,
  version: number | null,
  params?: GetV1GetGraphVersionParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetGraphVersion>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV1GetGraphVersionQueryOptions(
    graphId,
    version,
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get specific graph
 */
export type getV1GetSpecificGraphResponse200 = {
  data: GraphModel;
  status: 200;
};

export type getV1GetSpecificGraphResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type getV1GetSpecificGraphResponseComposite =
  | getV1GetSpecificGraphResponse200
  | getV1GetSpecificGraphResponse422;

export type getV1GetSpecificGraphResponse =
  getV1GetSpecificGraphResponseComposite & {
    headers: Headers;
  };

export const getGetV1GetSpecificGraphUrl = (
  graphId: string,
  params?: GetV1GetSpecificGraphParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/graphs/${graphId}?${stringifiedParams}`
    : `/api/graphs/${graphId}`;
};

export const getV1GetSpecificGraph = async (
  graphId: string,
  params?: GetV1GetSpecificGraphParams,
  options?: RequestInit,
): Promise<getV1GetSpecificGraphResponse> => {
  return customMutator<getV1GetSpecificGraphResponse>(
    getGetV1GetSpecificGraphUrl(graphId, params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV1GetSpecificGraphQueryKey = (
  graphId: string,
  params?: GetV1GetSpecificGraphParams,
) => {
  return [`/api/graphs/${graphId}`, ...(params ? [params] : [])] as const;
};

export const getGetV1GetSpecificGraphQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1GetSpecificGraph>>,
  TError = HTTPValidationError,
>(
  graphId: string,
  params?: GetV1GetSpecificGraphParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetSpecificGraph>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetV1GetSpecificGraphQueryKey(graphId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV1GetSpecificGraph>>
  > = ({ signal }) =>
    getV1GetSpecificGraph(graphId, params, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!graphId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1GetSpecificGraph>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV1GetSpecificGraphQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1GetSpecificGraph>>
>;
export type GetV1GetSpecificGraphQueryError = HTTPValidationError;

export function useGetV1GetSpecificGraph<
  TData = Awaited<ReturnType<typeof getV1GetSpecificGraph>>,
  TError = HTTPValidationError,
>(
  graphId: string,
  params: undefined | GetV1GetSpecificGraphParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetSpecificGraph>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1GetSpecificGraph>>,
          TError,
          Awaited<ReturnType<typeof getV1GetSpecificGraph>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1GetSpecificGraph<
  TData = Awaited<ReturnType<typeof getV1GetSpecificGraph>>,
  TError = HTTPValidationError,
>(
  graphId: string,
  params?: GetV1GetSpecificGraphParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetSpecificGraph>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1GetSpecificGraph>>,
          TError,
          Awaited<ReturnType<typeof getV1GetSpecificGraph>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1GetSpecificGraph<
  TData = Awaited<ReturnType<typeof getV1GetSpecificGraph>>,
  TError = HTTPValidationError,
>(
  graphId: string,
  params?: GetV1GetSpecificGraphParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetSpecificGraph>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get specific graph
 */

export function useGetV1GetSpecificGraph<
  TData = Awaited<ReturnType<typeof getV1GetSpecificGraph>>,
  TError = HTTPValidationError,
>(
  graphId: string,
  params?: GetV1GetSpecificGraphParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetSpecificGraph>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV1GetSpecificGraphQueryOptions(
    graphId,
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Delete graph permanently
 */
export type deleteV1DeleteGraphPermanentlyResponse200 = {
  data: DeleteGraphResponse;
  status: 200;
};

export type deleteV1DeleteGraphPermanentlyResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type deleteV1DeleteGraphPermanentlyResponseComposite =
  | deleteV1DeleteGraphPermanentlyResponse200
  | deleteV1DeleteGraphPermanentlyResponse422;

export type deleteV1DeleteGraphPermanentlyResponse =
  deleteV1DeleteGraphPermanentlyResponseComposite & {
    headers: Headers;
  };

export const getDeleteV1DeleteGraphPermanentlyUrl = (graphId: string) => {
  return `/api/graphs/${graphId}`;
};

export const deleteV1DeleteGraphPermanently = async (
  graphId: string,
  options?: RequestInit,
): Promise<deleteV1DeleteGraphPermanentlyResponse> => {
  return customMutator<deleteV1DeleteGraphPermanentlyResponse>(
    getDeleteV1DeleteGraphPermanentlyUrl(graphId),
    {
      ...options,
      method: "DELETE",
    },
  );
};

export const getDeleteV1DeleteGraphPermanentlyMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteV1DeleteGraphPermanently>>,
    TError,
    { graphId: string },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteV1DeleteGraphPermanently>>,
  TError,
  { graphId: string },
  TContext
> => {
  const mutationKey = ["deleteV1DeleteGraphPermanently"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteV1DeleteGraphPermanently>>,
    { graphId: string }
  > = (props) => {
    const { graphId } = props ?? {};

    return deleteV1DeleteGraphPermanently(graphId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteV1DeleteGraphPermanentlyMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteV1DeleteGraphPermanently>>
>;

export type DeleteV1DeleteGraphPermanentlyMutationError = HTTPValidationError;

/**
 * @summary Delete graph permanently
 */
export const useDeleteV1DeleteGraphPermanently = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteV1DeleteGraphPermanently>>,
      TError,
      { graphId: string },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteV1DeleteGraphPermanently>>,
  TError,
  { graphId: string },
  TContext
> => {
  const mutationOptions =
    getDeleteV1DeleteGraphPermanentlyMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Update graph version
 */
export type putV1UpdateGraphVersionResponse200 = {
  data: GraphModel;
  status: 200;
};

export type putV1UpdateGraphVersionResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type putV1UpdateGraphVersionResponseComposite =
  | putV1UpdateGraphVersionResponse200
  | putV1UpdateGraphVersionResponse422;

export type putV1UpdateGraphVersionResponse =
  putV1UpdateGraphVersionResponseComposite & {
    headers: Headers;
  };

export const getPutV1UpdateGraphVersionUrl = (graphId: string) => {
  return `/api/graphs/${graphId}`;
};

export const putV1UpdateGraphVersion = async (
  graphId: string,
  graph: Graph,
  options?: RequestInit,
): Promise<putV1UpdateGraphVersionResponse> => {
  return customMutator<putV1UpdateGraphVersionResponse>(
    getPutV1UpdateGraphVersionUrl(graphId),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(graph),
    },
  );
};

export const getPutV1UpdateGraphVersionMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putV1UpdateGraphVersion>>,
    TError,
    { graphId: string; data: Graph },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putV1UpdateGraphVersion>>,
  TError,
  { graphId: string; data: Graph },
  TContext
> => {
  const mutationKey = ["putV1UpdateGraphVersion"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putV1UpdateGraphVersion>>,
    { graphId: string; data: Graph }
  > = (props) => {
    const { graphId, data } = props ?? {};

    return putV1UpdateGraphVersion(graphId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutV1UpdateGraphVersionMutationResult = NonNullable<
  Awaited<ReturnType<typeof putV1UpdateGraphVersion>>
>;
export type PutV1UpdateGraphVersionMutationBody = Graph;
export type PutV1UpdateGraphVersionMutationError = HTTPValidationError;

/**
 * @summary Update graph version
 */
export const usePutV1UpdateGraphVersion = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putV1UpdateGraphVersion>>,
      TError,
      { graphId: string; data: Graph },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putV1UpdateGraphVersion>>,
  TError,
  { graphId: string; data: Graph },
  TContext
> => {
  const mutationOptions = getPutV1UpdateGraphVersionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get all graph versions
 */
export type getV1GetAllGraphVersionsResponse200 = {
  data: GraphModel[];
  status: 200;
};

export type getV1GetAllGraphVersionsResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type getV1GetAllGraphVersionsResponseComposite =
  | getV1GetAllGraphVersionsResponse200
  | getV1GetAllGraphVersionsResponse422;

export type getV1GetAllGraphVersionsResponse =
  getV1GetAllGraphVersionsResponseComposite & {
    headers: Headers;
  };

export const getGetV1GetAllGraphVersionsUrl = (graphId: string) => {
  return `/api/graphs/${graphId}/versions`;
};

export const getV1GetAllGraphVersions = async (
  graphId: string,
  options?: RequestInit,
): Promise<getV1GetAllGraphVersionsResponse> => {
  return customMutator<getV1GetAllGraphVersionsResponse>(
    getGetV1GetAllGraphVersionsUrl(graphId),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV1GetAllGraphVersionsQueryKey = (graphId: string) => {
  return [`/api/graphs/${graphId}/versions`] as const;
};

export const getGetV1GetAllGraphVersionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1GetAllGraphVersions>>,
  TError = HTTPValidationError,
>(
  graphId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetAllGraphVersions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetV1GetAllGraphVersionsQueryKey(graphId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV1GetAllGraphVersions>>
  > = ({ signal }) =>
    getV1GetAllGraphVersions(graphId, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!graphId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1GetAllGraphVersions>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV1GetAllGraphVersionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1GetAllGraphVersions>>
>;
export type GetV1GetAllGraphVersionsQueryError = HTTPValidationError;

export function useGetV1GetAllGraphVersions<
  TData = Awaited<ReturnType<typeof getV1GetAllGraphVersions>>,
  TError = HTTPValidationError,
>(
  graphId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetAllGraphVersions>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1GetAllGraphVersions>>,
          TError,
          Awaited<ReturnType<typeof getV1GetAllGraphVersions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1GetAllGraphVersions<
  TData = Awaited<ReturnType<typeof getV1GetAllGraphVersions>>,
  TError = HTTPValidationError,
>(
  graphId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetAllGraphVersions>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1GetAllGraphVersions>>,
          TError,
          Awaited<ReturnType<typeof getV1GetAllGraphVersions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1GetAllGraphVersions<
  TData = Awaited<ReturnType<typeof getV1GetAllGraphVersions>>,
  TError = HTTPValidationError,
>(
  graphId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetAllGraphVersions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all graph versions
 */

export function useGetV1GetAllGraphVersions<
  TData = Awaited<ReturnType<typeof getV1GetAllGraphVersions>>,
  TError = HTTPValidationError,
>(
  graphId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetAllGraphVersions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV1GetAllGraphVersionsQueryOptions(
    graphId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Set active graph version
 */
export type putV1SetActiveGraphVersionResponse200 = {
  data: unknown;
  status: 200;
};

export type putV1SetActiveGraphVersionResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type putV1SetActiveGraphVersionResponseComposite =
  | putV1SetActiveGraphVersionResponse200
  | putV1SetActiveGraphVersionResponse422;

export type putV1SetActiveGraphVersionResponse =
  putV1SetActiveGraphVersionResponseComposite & {
    headers: Headers;
  };

export const getPutV1SetActiveGraphVersionUrl = (graphId: string) => {
  return `/api/graphs/${graphId}/versions/active`;
};

export const putV1SetActiveGraphVersion = async (
  graphId: string,
  setGraphActiveVersion: SetGraphActiveVersion,
  options?: RequestInit,
): Promise<putV1SetActiveGraphVersionResponse> => {
  return customMutator<putV1SetActiveGraphVersionResponse>(
    getPutV1SetActiveGraphVersionUrl(graphId),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(setGraphActiveVersion),
    },
  );
};

export const getPutV1SetActiveGraphVersionMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putV1SetActiveGraphVersion>>,
    TError,
    { graphId: string; data: SetGraphActiveVersion },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putV1SetActiveGraphVersion>>,
  TError,
  { graphId: string; data: SetGraphActiveVersion },
  TContext
> => {
  const mutationKey = ["putV1SetActiveGraphVersion"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putV1SetActiveGraphVersion>>,
    { graphId: string; data: SetGraphActiveVersion }
  > = (props) => {
    const { graphId, data } = props ?? {};

    return putV1SetActiveGraphVersion(graphId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutV1SetActiveGraphVersionMutationResult = NonNullable<
  Awaited<ReturnType<typeof putV1SetActiveGraphVersion>>
>;
export type PutV1SetActiveGraphVersionMutationBody = SetGraphActiveVersion;
export type PutV1SetActiveGraphVersionMutationError = HTTPValidationError;

/**
 * @summary Set active graph version
 */
export const usePutV1SetActiveGraphVersion = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putV1SetActiveGraphVersion>>,
      TError,
      { graphId: string; data: SetGraphActiveVersion },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putV1SetActiveGraphVersion>>,
  TError,
  { graphId: string; data: SetGraphActiveVersion },
  TContext
> => {
  const mutationOptions = getPutV1SetActiveGraphVersionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Execute graph agent
 */
export type postV1ExecuteGraphAgentResponse200 = {
  data: ExecuteGraphResponse;
  status: 200;
};

export type postV1ExecuteGraphAgentResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type postV1ExecuteGraphAgentResponseComposite =
  | postV1ExecuteGraphAgentResponse200
  | postV1ExecuteGraphAgentResponse422;

export type postV1ExecuteGraphAgentResponse =
  postV1ExecuteGraphAgentResponseComposite & {
    headers: Headers;
  };

export const getPostV1ExecuteGraphAgentUrl = (
  graphId: string,
  graphVersion: number | null,
  params?: PostV1ExecuteGraphAgentParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/graphs/${graphId}/execute/${graphVersion}?${stringifiedParams}`
    : `/api/graphs/${graphId}/execute/${graphVersion}`;
};

export const postV1ExecuteGraphAgent = async (
  graphId: string,
  graphVersion: number | null,
  bodyPostV1ExecuteGraphAgent: BodyPostV1ExecuteGraphAgent,
  params?: PostV1ExecuteGraphAgentParams,
  options?: RequestInit,
): Promise<postV1ExecuteGraphAgentResponse> => {
  return customMutator<postV1ExecuteGraphAgentResponse>(
    getPostV1ExecuteGraphAgentUrl(graphId, graphVersion, params),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(bodyPostV1ExecuteGraphAgent),
    },
  );
};

export const getPostV1ExecuteGraphAgentMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1ExecuteGraphAgent>>,
    TError,
    {
      graphId: string;
      graphVersion: number | null;
      data: BodyPostV1ExecuteGraphAgent;
      params?: PostV1ExecuteGraphAgentParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1ExecuteGraphAgent>>,
  TError,
  {
    graphId: string;
    graphVersion: number | null;
    data: BodyPostV1ExecuteGraphAgent;
    params?: PostV1ExecuteGraphAgentParams;
  },
  TContext
> => {
  const mutationKey = ["postV1ExecuteGraphAgent"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1ExecuteGraphAgent>>,
    {
      graphId: string;
      graphVersion: number | null;
      data: BodyPostV1ExecuteGraphAgent;
      params?: PostV1ExecuteGraphAgentParams;
    }
  > = (props) => {
    const { graphId, graphVersion, data, params } = props ?? {};

    return postV1ExecuteGraphAgent(
      graphId,
      graphVersion,
      data,
      params,
      requestOptions,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1ExecuteGraphAgentMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1ExecuteGraphAgent>>
>;
export type PostV1ExecuteGraphAgentMutationBody = BodyPostV1ExecuteGraphAgent;
export type PostV1ExecuteGraphAgentMutationError = HTTPValidationError;

/**
 * @summary Execute graph agent
 */
export const usePostV1ExecuteGraphAgent = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1ExecuteGraphAgent>>,
      TError,
      {
        graphId: string;
        graphVersion: number | null;
        data: BodyPostV1ExecuteGraphAgent;
        params?: PostV1ExecuteGraphAgentParams;
      },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postV1ExecuteGraphAgent>>,
  TError,
  {
    graphId: string;
    graphVersion: number | null;
    data: BodyPostV1ExecuteGraphAgent;
    params?: PostV1ExecuteGraphAgentParams;
  },
  TContext
> => {
  const mutationOptions = getPostV1ExecuteGraphAgentMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Stop graph execution
 */
export type postV1StopGraphExecutionResponse200 = {
  data: GraphExecution;
  status: 200;
};

export type postV1StopGraphExecutionResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type postV1StopGraphExecutionResponseComposite =
  | postV1StopGraphExecutionResponse200
  | postV1StopGraphExecutionResponse422;

export type postV1StopGraphExecutionResponse =
  postV1StopGraphExecutionResponseComposite & {
    headers: Headers;
  };

export const getPostV1StopGraphExecutionUrl = (
  graphId: string,
  graphExecId: string,
) => {
  return `/api/graphs/${graphId}/executions/${graphExecId}/stop`;
};

export const postV1StopGraphExecution = async (
  graphId: string,
  graphExecId: string,
  options?: RequestInit,
): Promise<postV1StopGraphExecutionResponse> => {
  return customMutator<postV1StopGraphExecutionResponse>(
    getPostV1StopGraphExecutionUrl(graphId, graphExecId),
    {
      ...options,
      method: "POST",
    },
  );
};

export const getPostV1StopGraphExecutionMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1StopGraphExecution>>,
    TError,
    { graphId: string; graphExecId: string },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1StopGraphExecution>>,
  TError,
  { graphId: string; graphExecId: string },
  TContext
> => {
  const mutationKey = ["postV1StopGraphExecution"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1StopGraphExecution>>,
    { graphId: string; graphExecId: string }
  > = (props) => {
    const { graphId, graphExecId } = props ?? {};

    return postV1StopGraphExecution(graphId, graphExecId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1StopGraphExecutionMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1StopGraphExecution>>
>;

export type PostV1StopGraphExecutionMutationError = HTTPValidationError;

/**
 * @summary Stop graph execution
 */
export const usePostV1StopGraphExecution = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1StopGraphExecution>>,
      TError,
      { graphId: string; graphExecId: string },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postV1StopGraphExecution>>,
  TError,
  { graphId: string; graphExecId: string },
  TContext
> => {
  const mutationOptions = getPostV1StopGraphExecutionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get all executions
 */
export type getV1GetAllExecutionsResponse200 = {
  data: GraphExecutionMeta[];
  status: 200;
};

export type getV1GetAllExecutionsResponseComposite =
  getV1GetAllExecutionsResponse200;

export type getV1GetAllExecutionsResponse =
  getV1GetAllExecutionsResponseComposite & {
    headers: Headers;
  };

export const getGetV1GetAllExecutionsUrl = () => {
  return `/api/executions`;
};

export const getV1GetAllExecutions = async (
  options?: RequestInit,
): Promise<getV1GetAllExecutionsResponse> => {
  return customMutator<getV1GetAllExecutionsResponse>(
    getGetV1GetAllExecutionsUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV1GetAllExecutionsQueryKey = () => {
  return [`/api/executions`] as const;
};

export const getGetV1GetAllExecutionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1GetAllExecutions>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getV1GetAllExecutions>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customMutator>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetV1GetAllExecutionsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV1GetAllExecutions>>
  > = ({ signal }) => getV1GetAllExecutions({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1GetAllExecutions>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV1GetAllExecutionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1GetAllExecutions>>
>;
export type GetV1GetAllExecutionsQueryError = unknown;

export function useGetV1GetAllExecutions<
  TData = Awaited<ReturnType<typeof getV1GetAllExecutions>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetAllExecutions>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1GetAllExecutions>>,
          TError,
          Awaited<ReturnType<typeof getV1GetAllExecutions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1GetAllExecutions<
  TData = Awaited<ReturnType<typeof getV1GetAllExecutions>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetAllExecutions>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1GetAllExecutions>>,
          TError,
          Awaited<ReturnType<typeof getV1GetAllExecutions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1GetAllExecutions<
  TData = Awaited<ReturnType<typeof getV1GetAllExecutions>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetAllExecutions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all executions
 */

export function useGetV1GetAllExecutions<
  TData = Awaited<ReturnType<typeof getV1GetAllExecutions>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetAllExecutions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV1GetAllExecutionsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get graph executions
 */
export type getV1GetGraphExecutionsResponse200 = {
  data: GraphExecutionMeta[];
  status: 200;
};

export type getV1GetGraphExecutionsResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type getV1GetGraphExecutionsResponseComposite =
  | getV1GetGraphExecutionsResponse200
  | getV1GetGraphExecutionsResponse422;

export type getV1GetGraphExecutionsResponse =
  getV1GetGraphExecutionsResponseComposite & {
    headers: Headers;
  };

export const getGetV1GetGraphExecutionsUrl = (graphId: string) => {
  return `/api/graphs/${graphId}/executions`;
};

export const getV1GetGraphExecutions = async (
  graphId: string,
  options?: RequestInit,
): Promise<getV1GetGraphExecutionsResponse> => {
  return customMutator<getV1GetGraphExecutionsResponse>(
    getGetV1GetGraphExecutionsUrl(graphId),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV1GetGraphExecutionsQueryKey = (graphId: string) => {
  return [`/api/graphs/${graphId}/executions`] as const;
};

export const getGetV1GetGraphExecutionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1GetGraphExecutions>>,
  TError = HTTPValidationError,
>(
  graphId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetGraphExecutions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetV1GetGraphExecutionsQueryKey(graphId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV1GetGraphExecutions>>
  > = ({ signal }) =>
    getV1GetGraphExecutions(graphId, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!graphId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1GetGraphExecutions>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV1GetGraphExecutionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1GetGraphExecutions>>
>;
export type GetV1GetGraphExecutionsQueryError = HTTPValidationError;

export function useGetV1GetGraphExecutions<
  TData = Awaited<ReturnType<typeof getV1GetGraphExecutions>>,
  TError = HTTPValidationError,
>(
  graphId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetGraphExecutions>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1GetGraphExecutions>>,
          TError,
          Awaited<ReturnType<typeof getV1GetGraphExecutions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1GetGraphExecutions<
  TData = Awaited<ReturnType<typeof getV1GetGraphExecutions>>,
  TError = HTTPValidationError,
>(
  graphId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetGraphExecutions>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1GetGraphExecutions>>,
          TError,
          Awaited<ReturnType<typeof getV1GetGraphExecutions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1GetGraphExecutions<
  TData = Awaited<ReturnType<typeof getV1GetGraphExecutions>>,
  TError = HTTPValidationError,
>(
  graphId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetGraphExecutions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get graph executions
 */

export function useGetV1GetGraphExecutions<
  TData = Awaited<ReturnType<typeof getV1GetGraphExecutions>>,
  TError = HTTPValidationError,
>(
  graphId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetGraphExecutions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV1GetGraphExecutionsQueryOptions(graphId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get execution details
 */
export type getV1GetExecutionDetailsResponse200 = {
  data: GetV1GetExecutionDetails200;
  status: 200;
};

export type getV1GetExecutionDetailsResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type getV1GetExecutionDetailsResponseComposite =
  | getV1GetExecutionDetailsResponse200
  | getV1GetExecutionDetailsResponse422;

export type getV1GetExecutionDetailsResponse =
  getV1GetExecutionDetailsResponseComposite & {
    headers: Headers;
  };

export const getGetV1GetExecutionDetailsUrl = (
  graphId: string,
  graphExecId: string,
) => {
  return `/api/graphs/${graphId}/executions/${graphExecId}`;
};

export const getV1GetExecutionDetails = async (
  graphId: string,
  graphExecId: string,
  options?: RequestInit,
): Promise<getV1GetExecutionDetailsResponse> => {
  return customMutator<getV1GetExecutionDetailsResponse>(
    getGetV1GetExecutionDetailsUrl(graphId, graphExecId),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV1GetExecutionDetailsQueryKey = (
  graphId: string,
  graphExecId: string,
) => {
  return [`/api/graphs/${graphId}/executions/${graphExecId}`] as const;
};

export const getGetV1GetExecutionDetailsQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1GetExecutionDetails>>,
  TError = HTTPValidationError,
>(
  graphId: string,
  graphExecId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetExecutionDetails>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetV1GetExecutionDetailsQueryKey(graphId, graphExecId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV1GetExecutionDetails>>
  > = ({ signal }) =>
    getV1GetExecutionDetails(graphId, graphExecId, {
      signal,
      ...requestOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!(graphId && graphExecId),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1GetExecutionDetails>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV1GetExecutionDetailsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1GetExecutionDetails>>
>;
export type GetV1GetExecutionDetailsQueryError = HTTPValidationError;

export function useGetV1GetExecutionDetails<
  TData = Awaited<ReturnType<typeof getV1GetExecutionDetails>>,
  TError = HTTPValidationError,
>(
  graphId: string,
  graphExecId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetExecutionDetails>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1GetExecutionDetails>>,
          TError,
          Awaited<ReturnType<typeof getV1GetExecutionDetails>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1GetExecutionDetails<
  TData = Awaited<ReturnType<typeof getV1GetExecutionDetails>>,
  TError = HTTPValidationError,
>(
  graphId: string,
  graphExecId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetExecutionDetails>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1GetExecutionDetails>>,
          TError,
          Awaited<ReturnType<typeof getV1GetExecutionDetails>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1GetExecutionDetails<
  TData = Awaited<ReturnType<typeof getV1GetExecutionDetails>>,
  TError = HTTPValidationError,
>(
  graphId: string,
  graphExecId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetExecutionDetails>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get execution details
 */

export function useGetV1GetExecutionDetails<
  TData = Awaited<ReturnType<typeof getV1GetExecutionDetails>>,
  TError = HTTPValidationError,
>(
  graphId: string,
  graphExecId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetExecutionDetails>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV1GetExecutionDetailsQueryOptions(
    graphId,
    graphExecId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Delete graph execution
 */
export type deleteV1DeleteGraphExecutionResponse204 = {
  data: void;
  status: 204;
};

export type deleteV1DeleteGraphExecutionResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type deleteV1DeleteGraphExecutionResponseComposite =
  | deleteV1DeleteGraphExecutionResponse204
  | deleteV1DeleteGraphExecutionResponse422;

export type deleteV1DeleteGraphExecutionResponse =
  deleteV1DeleteGraphExecutionResponseComposite & {
    headers: Headers;
  };

export const getDeleteV1DeleteGraphExecutionUrl = (graphExecId: string) => {
  return `/api/executions/${graphExecId}`;
};

export const deleteV1DeleteGraphExecution = async (
  graphExecId: string,
  options?: RequestInit,
): Promise<deleteV1DeleteGraphExecutionResponse> => {
  return customMutator<deleteV1DeleteGraphExecutionResponse>(
    getDeleteV1DeleteGraphExecutionUrl(graphExecId),
    {
      ...options,
      method: "DELETE",
    },
  );
};

export const getDeleteV1DeleteGraphExecutionMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteV1DeleteGraphExecution>>,
    TError,
    { graphExecId: string },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteV1DeleteGraphExecution>>,
  TError,
  { graphExecId: string },
  TContext
> => {
  const mutationKey = ["deleteV1DeleteGraphExecution"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteV1DeleteGraphExecution>>,
    { graphExecId: string }
  > = (props) => {
    const { graphExecId } = props ?? {};

    return deleteV1DeleteGraphExecution(graphExecId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteV1DeleteGraphExecutionMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteV1DeleteGraphExecution>>
>;

export type DeleteV1DeleteGraphExecutionMutationError = HTTPValidationError;

/**
 * @summary Delete graph execution
 */
export const useDeleteV1DeleteGraphExecution = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteV1DeleteGraphExecution>>,
      TError,
      { graphExecId: string },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteV1DeleteGraphExecution>>,
  TError,
  { graphExecId: string },
  TContext
> => {
  const mutationOptions =
    getDeleteV1DeleteGraphExecutionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
