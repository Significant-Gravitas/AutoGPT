/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * AutoGPT Agent Server
 * This server is used to execute agents that are created by the AutoGPT system.
 * OpenAPI spec version: 0.1
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";

import { AgentExecutionStatus } from "../../models/agentExecutionStatus";

import type { DeleteGraphResponse } from "../../models/deleteGraphResponse";

import type { ExecuteGraphResponse } from "../../models/executeGraphResponse";

import type { GetV1GetExecutionDetails200 } from "../../models/getV1GetExecutionDetails200";

import type { GraphExecution } from "../../models/graphExecution";

import type { GraphExecutionMeta } from "../../models/graphExecutionMeta";

import type { GraphModel } from "../../models/graphModel";

import type { HTTPValidationError } from "../../models/hTTPValidationError";

import { ProviderName } from "../../models/providerName";

export const getGetV1ListUserGraphsResponseMock = (): GraphModel[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    version: faker.helpers.arrayElement([
      faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      undefined,
    ]),
    is_active: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    description: faker.string.alpha({ length: { min: 10, max: 20 } }),
    nodes: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        id: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        block_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
        input_default: faker.helpers.arrayElement([{}, undefined]),
        metadata: faker.helpers.arrayElement([{}, undefined]),
        input_links: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({
            id: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
            sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
            source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            is_static: faker.helpers.arrayElement([
              faker.datatype.boolean(),
              undefined,
            ]),
          })),
          undefined,
        ]),
        output_links: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({
            id: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
            sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
            source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            is_static: faker.helpers.arrayElement([
              faker.datatype.boolean(),
              undefined,
            ]),
          })),
          undefined,
        ]),
        graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
        graph_version: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        webhook_id: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            null,
          ]),
          undefined,
        ]),
        webhook: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            {
              id: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
              provider: faker.helpers.arrayElement(Object.values(ProviderName)),
              credentials_id: faker.string.alpha({
                length: { min: 10, max: 20 },
              }),
              webhook_type: faker.string.alpha({
                length: { min: 10, max: 20 },
              }),
              resource: faker.string.alpha({ length: { min: 10, max: 20 } }),
              events: Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
              config: faker.helpers.arrayElement([{}, undefined]),
              secret: faker.string.alpha({ length: { min: 10, max: 20 } }),
              provider_webhook_id: faker.string.alpha({
                length: { min: 10, max: 20 },
              }),
              url: faker.string.alpha({ length: { min: 10, max: 20 } }),
            },
            null,
          ]),
          undefined,
        ]),
      })),
      undefined,
    ]),
    links: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        id: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
        sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
        source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        is_static: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
      })),
      undefined,
    ]),
    forked_from_id: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    forked_from_version: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        null,
      ]),
      undefined,
    ]),
    sub_graphs: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        id: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        version: faker.helpers.arrayElement([
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
          undefined,
        ]),
        is_active: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        description: faker.string.alpha({ length: { min: 10, max: 20 } }),
        nodes: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({
            id: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            block_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
            input_default: faker.helpers.arrayElement([{}, undefined]),
            metadata: faker.helpers.arrayElement([{}, undefined]),
            input_links: faker.helpers.arrayElement([
              Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => ({
                id: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined,
                ]),
                source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
                sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
                source_name: faker.string.alpha({
                  length: { min: 10, max: 20 },
                }),
                sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
                is_static: faker.helpers.arrayElement([
                  faker.datatype.boolean(),
                  undefined,
                ]),
              })),
              undefined,
            ]),
            output_links: faker.helpers.arrayElement([
              Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => ({
                id: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined,
                ]),
                source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
                sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
                source_name: faker.string.alpha({
                  length: { min: 10, max: 20 },
                }),
                sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
                is_static: faker.helpers.arrayElement([
                  faker.datatype.boolean(),
                  undefined,
                ]),
              })),
              undefined,
            ]),
          })),
          undefined,
        ]),
        links: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({
            id: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
            sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
            source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            is_static: faker.helpers.arrayElement([
              faker.datatype.boolean(),
              undefined,
            ]),
          })),
          undefined,
        ]),
        forked_from_id: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            null,
          ]),
          undefined,
        ]),
        forked_from_version: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            null,
          ]),
          undefined,
        ]),
        input_schema: {},
        output_schema: {},
      })),
      undefined,
    ]),
    user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    input_schema: {},
    output_schema: {},
    credentials_input_schema: {},
    has_webhook_trigger: faker.datatype.boolean(),
  }));

export const getGetV1ListUserGraphsResponseMock200 = (): GraphModel[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    version: faker.helpers.arrayElement([
      faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      undefined,
    ]),
    is_active: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    description: faker.string.alpha({ length: { min: 10, max: 20 } }),
    nodes: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        id: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        block_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
        input_default: faker.helpers.arrayElement([{}, undefined]),
        metadata: faker.helpers.arrayElement([{}, undefined]),
        input_links: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({
            id: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
            sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
            source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            is_static: faker.helpers.arrayElement([
              faker.datatype.boolean(),
              undefined,
            ]),
          })),
          undefined,
        ]),
        output_links: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({
            id: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
            sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
            source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            is_static: faker.helpers.arrayElement([
              faker.datatype.boolean(),
              undefined,
            ]),
          })),
          undefined,
        ]),
        graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
        graph_version: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        webhook_id: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            null,
          ]),
          undefined,
        ]),
        webhook: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            {
              id: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
              provider: faker.helpers.arrayElement(Object.values(ProviderName)),
              credentials_id: faker.string.alpha({
                length: { min: 10, max: 20 },
              }),
              webhook_type: faker.string.alpha({
                length: { min: 10, max: 20 },
              }),
              resource: faker.string.alpha({ length: { min: 10, max: 20 } }),
              events: Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
              config: faker.helpers.arrayElement([{}, undefined]),
              secret: faker.string.alpha({ length: { min: 10, max: 20 } }),
              provider_webhook_id: faker.string.alpha({
                length: { min: 10, max: 20 },
              }),
              url: faker.string.alpha({ length: { min: 10, max: 20 } }),
            },
            null,
          ]),
          undefined,
        ]),
      })),
      undefined,
    ]),
    links: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        id: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
        sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
        source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        is_static: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
      })),
      undefined,
    ]),
    forked_from_id: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    forked_from_version: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        null,
      ]),
      undefined,
    ]),
    sub_graphs: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        id: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        version: faker.helpers.arrayElement([
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
          undefined,
        ]),
        is_active: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        description: faker.string.alpha({ length: { min: 10, max: 20 } }),
        nodes: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({
            id: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            block_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
            input_default: faker.helpers.arrayElement([{}, undefined]),
            metadata: faker.helpers.arrayElement([{}, undefined]),
            input_links: faker.helpers.arrayElement([
              Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => ({
                id: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined,
                ]),
                source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
                sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
                source_name: faker.string.alpha({
                  length: { min: 10, max: 20 },
                }),
                sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
                is_static: faker.helpers.arrayElement([
                  faker.datatype.boolean(),
                  undefined,
                ]),
              })),
              undefined,
            ]),
            output_links: faker.helpers.arrayElement([
              Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => ({
                id: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined,
                ]),
                source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
                sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
                source_name: faker.string.alpha({
                  length: { min: 10, max: 20 },
                }),
                sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
                is_static: faker.helpers.arrayElement([
                  faker.datatype.boolean(),
                  undefined,
                ]),
              })),
              undefined,
            ]),
          })),
          undefined,
        ]),
        links: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({
            id: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
            sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
            source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            is_static: faker.helpers.arrayElement([
              faker.datatype.boolean(),
              undefined,
            ]),
          })),
          undefined,
        ]),
        forked_from_id: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            null,
          ]),
          undefined,
        ]),
        forked_from_version: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            null,
          ]),
          undefined,
        ]),
        input_schema: {},
        output_schema: {},
      })),
      undefined,
    ]),
    user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    input_schema: {},
    output_schema: {},
    credentials_input_schema: {},
    has_webhook_trigger: faker.datatype.boolean(),
  }));

export const getPostV1CreateNewGraphResponseMock = (
  overrideResponse: Partial<GraphModel> = {},
): GraphModel => ({
  id: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  version: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    undefined,
  ]),
  is_active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  nodes: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      block_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      input_default: faker.helpers.arrayElement([{}, undefined]),
      metadata: faker.helpers.arrayElement([{}, undefined]),
      input_links: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          is_static: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
        })),
        undefined,
      ]),
      output_links: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          is_static: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
        })),
        undefined,
      ]),
      graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      graph_version: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      webhook_id: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
      webhook: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          {
            id: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
            provider: faker.helpers.arrayElement(Object.values(ProviderName)),
            credentials_id: faker.string.alpha({
              length: { min: 10, max: 20 },
            }),
            webhook_type: faker.string.alpha({ length: { min: 10, max: 20 } }),
            resource: faker.string.alpha({ length: { min: 10, max: 20 } }),
            events: Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
            config: faker.helpers.arrayElement([{}, undefined]),
            secret: faker.string.alpha({ length: { min: 10, max: 20 } }),
            provider_webhook_id: faker.string.alpha({
              length: { min: 10, max: 20 },
            }),
            url: faker.string.alpha({ length: { min: 10, max: 20 } }),
          },
          null,
        ]),
        undefined,
      ]),
    })),
    undefined,
  ]),
  links: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      is_static: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
    })),
    undefined,
  ]),
  forked_from_id: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  forked_from_version: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      null,
    ]),
    undefined,
  ]),
  sub_graphs: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      version: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      is_active: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      description: faker.string.alpha({ length: { min: 10, max: 20 } }),
      nodes: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          block_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          input_default: faker.helpers.arrayElement([{}, undefined]),
          metadata: faker.helpers.arrayElement([{}, undefined]),
          input_links: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => ({
              id: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
              sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
              source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              is_static: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
              ]),
            })),
            undefined,
          ]),
          output_links: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => ({
              id: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
              sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
              source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              is_static: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
              ]),
            })),
            undefined,
          ]),
        })),
        undefined,
      ]),
      links: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          is_static: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
        })),
        undefined,
      ]),
      forked_from_id: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
      forked_from_version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
          null,
        ]),
        undefined,
      ]),
      input_schema: {},
      output_schema: {},
    })),
    undefined,
  ]),
  user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  input_schema: {},
  output_schema: {},
  credentials_input_schema: {},
  has_webhook_trigger: faker.datatype.boolean(),
  ...overrideResponse,
});

export const getPostV1CreateNewGraphResponseMock200 = (
  overrideResponse: Partial<GraphModel> = {},
): GraphModel => ({
  id: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  version: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    undefined,
  ]),
  is_active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  nodes: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      block_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      input_default: faker.helpers.arrayElement([{}, undefined]),
      metadata: faker.helpers.arrayElement([{}, undefined]),
      input_links: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          is_static: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
        })),
        undefined,
      ]),
      output_links: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          is_static: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
        })),
        undefined,
      ]),
      graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      graph_version: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      webhook_id: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
      webhook: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          {
            id: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
            provider: faker.helpers.arrayElement(Object.values(ProviderName)),
            credentials_id: faker.string.alpha({
              length: { min: 10, max: 20 },
            }),
            webhook_type: faker.string.alpha({ length: { min: 10, max: 20 } }),
            resource: faker.string.alpha({ length: { min: 10, max: 20 } }),
            events: Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
            config: faker.helpers.arrayElement([{}, undefined]),
            secret: faker.string.alpha({ length: { min: 10, max: 20 } }),
            provider_webhook_id: faker.string.alpha({
              length: { min: 10, max: 20 },
            }),
            url: faker.string.alpha({ length: { min: 10, max: 20 } }),
          },
          null,
        ]),
        undefined,
      ]),
    })),
    undefined,
  ]),
  links: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      is_static: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
    })),
    undefined,
  ]),
  forked_from_id: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  forked_from_version: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      null,
    ]),
    undefined,
  ]),
  sub_graphs: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      version: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      is_active: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      description: faker.string.alpha({ length: { min: 10, max: 20 } }),
      nodes: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          block_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          input_default: faker.helpers.arrayElement([{}, undefined]),
          metadata: faker.helpers.arrayElement([{}, undefined]),
          input_links: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => ({
              id: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
              sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
              source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              is_static: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
              ]),
            })),
            undefined,
          ]),
          output_links: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => ({
              id: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
              sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
              source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              is_static: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
              ]),
            })),
            undefined,
          ]),
        })),
        undefined,
      ]),
      links: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          is_static: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
        })),
        undefined,
      ]),
      forked_from_id: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
      forked_from_version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
          null,
        ]),
        undefined,
      ]),
      input_schema: {},
      output_schema: {},
    })),
    undefined,
  ]),
  user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  input_schema: {},
  output_schema: {},
  credentials_input_schema: {},
  has_webhook_trigger: faker.datatype.boolean(),
  ...overrideResponse,
});

export const getPostV1CreateNewGraphResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV1GetGraphVersionResponseMock = (
  overrideResponse: Partial<GraphModel> = {},
): GraphModel => ({
  id: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  version: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    undefined,
  ]),
  is_active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  nodes: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      block_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      input_default: faker.helpers.arrayElement([{}, undefined]),
      metadata: faker.helpers.arrayElement([{}, undefined]),
      input_links: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          is_static: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
        })),
        undefined,
      ]),
      output_links: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          is_static: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
        })),
        undefined,
      ]),
      graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      graph_version: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      webhook_id: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
      webhook: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          {
            id: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
            provider: faker.helpers.arrayElement(Object.values(ProviderName)),
            credentials_id: faker.string.alpha({
              length: { min: 10, max: 20 },
            }),
            webhook_type: faker.string.alpha({ length: { min: 10, max: 20 } }),
            resource: faker.string.alpha({ length: { min: 10, max: 20 } }),
            events: Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
            config: faker.helpers.arrayElement([{}, undefined]),
            secret: faker.string.alpha({ length: { min: 10, max: 20 } }),
            provider_webhook_id: faker.string.alpha({
              length: { min: 10, max: 20 },
            }),
            url: faker.string.alpha({ length: { min: 10, max: 20 } }),
          },
          null,
        ]),
        undefined,
      ]),
    })),
    undefined,
  ]),
  links: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      is_static: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
    })),
    undefined,
  ]),
  forked_from_id: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  forked_from_version: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      null,
    ]),
    undefined,
  ]),
  sub_graphs: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      version: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      is_active: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      description: faker.string.alpha({ length: { min: 10, max: 20 } }),
      nodes: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          block_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          input_default: faker.helpers.arrayElement([{}, undefined]),
          metadata: faker.helpers.arrayElement([{}, undefined]),
          input_links: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => ({
              id: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
              sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
              source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              is_static: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
              ]),
            })),
            undefined,
          ]),
          output_links: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => ({
              id: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
              sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
              source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              is_static: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
              ]),
            })),
            undefined,
          ]),
        })),
        undefined,
      ]),
      links: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          is_static: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
        })),
        undefined,
      ]),
      forked_from_id: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
      forked_from_version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
          null,
        ]),
        undefined,
      ]),
      input_schema: {},
      output_schema: {},
    })),
    undefined,
  ]),
  user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  input_schema: {},
  output_schema: {},
  credentials_input_schema: {},
  has_webhook_trigger: faker.datatype.boolean(),
  ...overrideResponse,
});

export const getGetV1GetGraphVersionResponseMock200 = (
  overrideResponse: Partial<GraphModel> = {},
): GraphModel => ({
  id: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  version: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    undefined,
  ]),
  is_active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  nodes: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      block_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      input_default: faker.helpers.arrayElement([{}, undefined]),
      metadata: faker.helpers.arrayElement([{}, undefined]),
      input_links: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          is_static: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
        })),
        undefined,
      ]),
      output_links: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          is_static: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
        })),
        undefined,
      ]),
      graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      graph_version: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      webhook_id: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
      webhook: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          {
            id: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
            provider: faker.helpers.arrayElement(Object.values(ProviderName)),
            credentials_id: faker.string.alpha({
              length: { min: 10, max: 20 },
            }),
            webhook_type: faker.string.alpha({ length: { min: 10, max: 20 } }),
            resource: faker.string.alpha({ length: { min: 10, max: 20 } }),
            events: Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
            config: faker.helpers.arrayElement([{}, undefined]),
            secret: faker.string.alpha({ length: { min: 10, max: 20 } }),
            provider_webhook_id: faker.string.alpha({
              length: { min: 10, max: 20 },
            }),
            url: faker.string.alpha({ length: { min: 10, max: 20 } }),
          },
          null,
        ]),
        undefined,
      ]),
    })),
    undefined,
  ]),
  links: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      is_static: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
    })),
    undefined,
  ]),
  forked_from_id: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  forked_from_version: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      null,
    ]),
    undefined,
  ]),
  sub_graphs: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      version: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      is_active: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      description: faker.string.alpha({ length: { min: 10, max: 20 } }),
      nodes: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          block_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          input_default: faker.helpers.arrayElement([{}, undefined]),
          metadata: faker.helpers.arrayElement([{}, undefined]),
          input_links: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => ({
              id: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
              sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
              source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              is_static: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
              ]),
            })),
            undefined,
          ]),
          output_links: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => ({
              id: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
              sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
              source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              is_static: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
              ]),
            })),
            undefined,
          ]),
        })),
        undefined,
      ]),
      links: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          is_static: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
        })),
        undefined,
      ]),
      forked_from_id: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
      forked_from_version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
          null,
        ]),
        undefined,
      ]),
      input_schema: {},
      output_schema: {},
    })),
    undefined,
  ]),
  user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  input_schema: {},
  output_schema: {},
  credentials_input_schema: {},
  has_webhook_trigger: faker.datatype.boolean(),
  ...overrideResponse,
});

export const getGetV1GetGraphVersionResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV1GetSpecificGraphResponseMock = (
  overrideResponse: Partial<GraphModel> = {},
): GraphModel => ({
  id: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  version: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    undefined,
  ]),
  is_active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  nodes: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      block_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      input_default: faker.helpers.arrayElement([{}, undefined]),
      metadata: faker.helpers.arrayElement([{}, undefined]),
      input_links: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          is_static: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
        })),
        undefined,
      ]),
      output_links: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          is_static: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
        })),
        undefined,
      ]),
      graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      graph_version: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      webhook_id: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
      webhook: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          {
            id: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
            provider: faker.helpers.arrayElement(Object.values(ProviderName)),
            credentials_id: faker.string.alpha({
              length: { min: 10, max: 20 },
            }),
            webhook_type: faker.string.alpha({ length: { min: 10, max: 20 } }),
            resource: faker.string.alpha({ length: { min: 10, max: 20 } }),
            events: Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
            config: faker.helpers.arrayElement([{}, undefined]),
            secret: faker.string.alpha({ length: { min: 10, max: 20 } }),
            provider_webhook_id: faker.string.alpha({
              length: { min: 10, max: 20 },
            }),
            url: faker.string.alpha({ length: { min: 10, max: 20 } }),
          },
          null,
        ]),
        undefined,
      ]),
    })),
    undefined,
  ]),
  links: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      is_static: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
    })),
    undefined,
  ]),
  forked_from_id: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  forked_from_version: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      null,
    ]),
    undefined,
  ]),
  sub_graphs: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      version: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      is_active: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      description: faker.string.alpha({ length: { min: 10, max: 20 } }),
      nodes: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          block_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          input_default: faker.helpers.arrayElement([{}, undefined]),
          metadata: faker.helpers.arrayElement([{}, undefined]),
          input_links: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => ({
              id: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
              sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
              source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              is_static: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
              ]),
            })),
            undefined,
          ]),
          output_links: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => ({
              id: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
              sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
              source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              is_static: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
              ]),
            })),
            undefined,
          ]),
        })),
        undefined,
      ]),
      links: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          is_static: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
        })),
        undefined,
      ]),
      forked_from_id: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
      forked_from_version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
          null,
        ]),
        undefined,
      ]),
      input_schema: {},
      output_schema: {},
    })),
    undefined,
  ]),
  user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  input_schema: {},
  output_schema: {},
  credentials_input_schema: {},
  has_webhook_trigger: faker.datatype.boolean(),
  ...overrideResponse,
});

export const getGetV1GetSpecificGraphResponseMock200 = (
  overrideResponse: Partial<GraphModel> = {},
): GraphModel => ({
  id: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  version: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    undefined,
  ]),
  is_active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  nodes: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      block_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      input_default: faker.helpers.arrayElement([{}, undefined]),
      metadata: faker.helpers.arrayElement([{}, undefined]),
      input_links: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          is_static: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
        })),
        undefined,
      ]),
      output_links: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          is_static: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
        })),
        undefined,
      ]),
      graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      graph_version: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      webhook_id: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
      webhook: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          {
            id: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
            provider: faker.helpers.arrayElement(Object.values(ProviderName)),
            credentials_id: faker.string.alpha({
              length: { min: 10, max: 20 },
            }),
            webhook_type: faker.string.alpha({ length: { min: 10, max: 20 } }),
            resource: faker.string.alpha({ length: { min: 10, max: 20 } }),
            events: Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
            config: faker.helpers.arrayElement([{}, undefined]),
            secret: faker.string.alpha({ length: { min: 10, max: 20 } }),
            provider_webhook_id: faker.string.alpha({
              length: { min: 10, max: 20 },
            }),
            url: faker.string.alpha({ length: { min: 10, max: 20 } }),
          },
          null,
        ]),
        undefined,
      ]),
    })),
    undefined,
  ]),
  links: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      is_static: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
    })),
    undefined,
  ]),
  forked_from_id: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  forked_from_version: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      null,
    ]),
    undefined,
  ]),
  sub_graphs: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      version: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      is_active: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      description: faker.string.alpha({ length: { min: 10, max: 20 } }),
      nodes: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          block_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          input_default: faker.helpers.arrayElement([{}, undefined]),
          metadata: faker.helpers.arrayElement([{}, undefined]),
          input_links: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => ({
              id: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
              sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
              source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              is_static: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
              ]),
            })),
            undefined,
          ]),
          output_links: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => ({
              id: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
              sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
              source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              is_static: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
              ]),
            })),
            undefined,
          ]),
        })),
        undefined,
      ]),
      links: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          is_static: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
        })),
        undefined,
      ]),
      forked_from_id: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
      forked_from_version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
          null,
        ]),
        undefined,
      ]),
      input_schema: {},
      output_schema: {},
    })),
    undefined,
  ]),
  user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  input_schema: {},
  output_schema: {},
  credentials_input_schema: {},
  has_webhook_trigger: faker.datatype.boolean(),
  ...overrideResponse,
});

export const getGetV1GetSpecificGraphResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getDeleteV1DeleteGraphPermanentlyResponseMock = (
  overrideResponse: Partial<DeleteGraphResponse> = {},
): DeleteGraphResponse => ({
  version_counts: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  ...overrideResponse,
});

export const getDeleteV1DeleteGraphPermanentlyResponseMock200 = (
  overrideResponse: Partial<DeleteGraphResponse> = {},
): DeleteGraphResponse => ({
  version_counts: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  ...overrideResponse,
});

export const getDeleteV1DeleteGraphPermanentlyResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPutV1UpdateGraphVersionResponseMock = (
  overrideResponse: Partial<GraphModel> = {},
): GraphModel => ({
  id: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  version: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    undefined,
  ]),
  is_active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  nodes: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      block_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      input_default: faker.helpers.arrayElement([{}, undefined]),
      metadata: faker.helpers.arrayElement([{}, undefined]),
      input_links: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          is_static: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
        })),
        undefined,
      ]),
      output_links: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          is_static: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
        })),
        undefined,
      ]),
      graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      graph_version: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      webhook_id: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
      webhook: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          {
            id: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
            provider: faker.helpers.arrayElement(Object.values(ProviderName)),
            credentials_id: faker.string.alpha({
              length: { min: 10, max: 20 },
            }),
            webhook_type: faker.string.alpha({ length: { min: 10, max: 20 } }),
            resource: faker.string.alpha({ length: { min: 10, max: 20 } }),
            events: Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
            config: faker.helpers.arrayElement([{}, undefined]),
            secret: faker.string.alpha({ length: { min: 10, max: 20 } }),
            provider_webhook_id: faker.string.alpha({
              length: { min: 10, max: 20 },
            }),
            url: faker.string.alpha({ length: { min: 10, max: 20 } }),
          },
          null,
        ]),
        undefined,
      ]),
    })),
    undefined,
  ]),
  links: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      is_static: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
    })),
    undefined,
  ]),
  forked_from_id: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  forked_from_version: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      null,
    ]),
    undefined,
  ]),
  sub_graphs: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      version: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      is_active: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      description: faker.string.alpha({ length: { min: 10, max: 20 } }),
      nodes: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          block_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          input_default: faker.helpers.arrayElement([{}, undefined]),
          metadata: faker.helpers.arrayElement([{}, undefined]),
          input_links: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => ({
              id: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
              sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
              source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              is_static: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
              ]),
            })),
            undefined,
          ]),
          output_links: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => ({
              id: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
              sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
              source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              is_static: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
              ]),
            })),
            undefined,
          ]),
        })),
        undefined,
      ]),
      links: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          is_static: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
        })),
        undefined,
      ]),
      forked_from_id: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
      forked_from_version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
          null,
        ]),
        undefined,
      ]),
      input_schema: {},
      output_schema: {},
    })),
    undefined,
  ]),
  user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  input_schema: {},
  output_schema: {},
  credentials_input_schema: {},
  has_webhook_trigger: faker.datatype.boolean(),
  ...overrideResponse,
});

export const getPutV1UpdateGraphVersionResponseMock200 = (
  overrideResponse: Partial<GraphModel> = {},
): GraphModel => ({
  id: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  version: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    undefined,
  ]),
  is_active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  nodes: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      block_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      input_default: faker.helpers.arrayElement([{}, undefined]),
      metadata: faker.helpers.arrayElement([{}, undefined]),
      input_links: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          is_static: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
        })),
        undefined,
      ]),
      output_links: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          is_static: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
        })),
        undefined,
      ]),
      graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      graph_version: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      webhook_id: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
      webhook: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          {
            id: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
            provider: faker.helpers.arrayElement(Object.values(ProviderName)),
            credentials_id: faker.string.alpha({
              length: { min: 10, max: 20 },
            }),
            webhook_type: faker.string.alpha({ length: { min: 10, max: 20 } }),
            resource: faker.string.alpha({ length: { min: 10, max: 20 } }),
            events: Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
            config: faker.helpers.arrayElement([{}, undefined]),
            secret: faker.string.alpha({ length: { min: 10, max: 20 } }),
            provider_webhook_id: faker.string.alpha({
              length: { min: 10, max: 20 },
            }),
            url: faker.string.alpha({ length: { min: 10, max: 20 } }),
          },
          null,
        ]),
        undefined,
      ]),
    })),
    undefined,
  ]),
  links: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      is_static: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
    })),
    undefined,
  ]),
  forked_from_id: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  forked_from_version: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      null,
    ]),
    undefined,
  ]),
  sub_graphs: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      version: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      is_active: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      description: faker.string.alpha({ length: { min: 10, max: 20 } }),
      nodes: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          block_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          input_default: faker.helpers.arrayElement([{}, undefined]),
          metadata: faker.helpers.arrayElement([{}, undefined]),
          input_links: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => ({
              id: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
              sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
              source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              is_static: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
              ]),
            })),
            undefined,
          ]),
          output_links: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => ({
              id: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
              sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
              source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              is_static: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
              ]),
            })),
            undefined,
          ]),
        })),
        undefined,
      ]),
      links: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          is_static: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
        })),
        undefined,
      ]),
      forked_from_id: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
      forked_from_version: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
          null,
        ]),
        undefined,
      ]),
      input_schema: {},
      output_schema: {},
    })),
    undefined,
  ]),
  user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  input_schema: {},
  output_schema: {},
  credentials_input_schema: {},
  has_webhook_trigger: faker.datatype.boolean(),
  ...overrideResponse,
});

export const getPutV1UpdateGraphVersionResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV1GetAllGraphVersionsResponseMock = (): GraphModel[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    version: faker.helpers.arrayElement([
      faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      undefined,
    ]),
    is_active: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    description: faker.string.alpha({ length: { min: 10, max: 20 } }),
    nodes: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        id: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        block_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
        input_default: faker.helpers.arrayElement([{}, undefined]),
        metadata: faker.helpers.arrayElement([{}, undefined]),
        input_links: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({
            id: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
            sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
            source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            is_static: faker.helpers.arrayElement([
              faker.datatype.boolean(),
              undefined,
            ]),
          })),
          undefined,
        ]),
        output_links: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({
            id: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
            sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
            source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            is_static: faker.helpers.arrayElement([
              faker.datatype.boolean(),
              undefined,
            ]),
          })),
          undefined,
        ]),
        graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
        graph_version: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        webhook_id: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            null,
          ]),
          undefined,
        ]),
        webhook: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            {
              id: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
              provider: faker.helpers.arrayElement(Object.values(ProviderName)),
              credentials_id: faker.string.alpha({
                length: { min: 10, max: 20 },
              }),
              webhook_type: faker.string.alpha({
                length: { min: 10, max: 20 },
              }),
              resource: faker.string.alpha({ length: { min: 10, max: 20 } }),
              events: Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
              config: faker.helpers.arrayElement([{}, undefined]),
              secret: faker.string.alpha({ length: { min: 10, max: 20 } }),
              provider_webhook_id: faker.string.alpha({
                length: { min: 10, max: 20 },
              }),
              url: faker.string.alpha({ length: { min: 10, max: 20 } }),
            },
            null,
          ]),
          undefined,
        ]),
      })),
      undefined,
    ]),
    links: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        id: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
        sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
        source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        is_static: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
      })),
      undefined,
    ]),
    forked_from_id: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    forked_from_version: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        null,
      ]),
      undefined,
    ]),
    sub_graphs: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        id: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        version: faker.helpers.arrayElement([
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
          undefined,
        ]),
        is_active: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        description: faker.string.alpha({ length: { min: 10, max: 20 } }),
        nodes: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({
            id: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            block_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
            input_default: faker.helpers.arrayElement([{}, undefined]),
            metadata: faker.helpers.arrayElement([{}, undefined]),
            input_links: faker.helpers.arrayElement([
              Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => ({
                id: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined,
                ]),
                source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
                sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
                source_name: faker.string.alpha({
                  length: { min: 10, max: 20 },
                }),
                sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
                is_static: faker.helpers.arrayElement([
                  faker.datatype.boolean(),
                  undefined,
                ]),
              })),
              undefined,
            ]),
            output_links: faker.helpers.arrayElement([
              Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => ({
                id: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined,
                ]),
                source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
                sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
                source_name: faker.string.alpha({
                  length: { min: 10, max: 20 },
                }),
                sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
                is_static: faker.helpers.arrayElement([
                  faker.datatype.boolean(),
                  undefined,
                ]),
              })),
              undefined,
            ]),
          })),
          undefined,
        ]),
        links: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({
            id: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
            sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
            source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            is_static: faker.helpers.arrayElement([
              faker.datatype.boolean(),
              undefined,
            ]),
          })),
          undefined,
        ]),
        forked_from_id: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            null,
          ]),
          undefined,
        ]),
        forked_from_version: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            null,
          ]),
          undefined,
        ]),
        input_schema: {},
        output_schema: {},
      })),
      undefined,
    ]),
    user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    input_schema: {},
    output_schema: {},
    credentials_input_schema: {},
    has_webhook_trigger: faker.datatype.boolean(),
  }));

export const getGetV1GetAllGraphVersionsResponseMock200 = (): GraphModel[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    version: faker.helpers.arrayElement([
      faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      undefined,
    ]),
    is_active: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    description: faker.string.alpha({ length: { min: 10, max: 20 } }),
    nodes: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        id: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        block_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
        input_default: faker.helpers.arrayElement([{}, undefined]),
        metadata: faker.helpers.arrayElement([{}, undefined]),
        input_links: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({
            id: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
            sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
            source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            is_static: faker.helpers.arrayElement([
              faker.datatype.boolean(),
              undefined,
            ]),
          })),
          undefined,
        ]),
        output_links: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({
            id: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
            sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
            source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            is_static: faker.helpers.arrayElement([
              faker.datatype.boolean(),
              undefined,
            ]),
          })),
          undefined,
        ]),
        graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
        graph_version: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        webhook_id: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            null,
          ]),
          undefined,
        ]),
        webhook: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            {
              id: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
              provider: faker.helpers.arrayElement(Object.values(ProviderName)),
              credentials_id: faker.string.alpha({
                length: { min: 10, max: 20 },
              }),
              webhook_type: faker.string.alpha({
                length: { min: 10, max: 20 },
              }),
              resource: faker.string.alpha({ length: { min: 10, max: 20 } }),
              events: Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
              config: faker.helpers.arrayElement([{}, undefined]),
              secret: faker.string.alpha({ length: { min: 10, max: 20 } }),
              provider_webhook_id: faker.string.alpha({
                length: { min: 10, max: 20 },
              }),
              url: faker.string.alpha({ length: { min: 10, max: 20 } }),
            },
            null,
          ]),
          undefined,
        ]),
      })),
      undefined,
    ]),
    links: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        id: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
        sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
        source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        is_static: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
      })),
      undefined,
    ]),
    forked_from_id: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    forked_from_version: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        null,
      ]),
      undefined,
    ]),
    sub_graphs: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        id: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        version: faker.helpers.arrayElement([
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
          undefined,
        ]),
        is_active: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        description: faker.string.alpha({ length: { min: 10, max: 20 } }),
        nodes: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({
            id: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            block_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
            input_default: faker.helpers.arrayElement([{}, undefined]),
            metadata: faker.helpers.arrayElement([{}, undefined]),
            input_links: faker.helpers.arrayElement([
              Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => ({
                id: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined,
                ]),
                source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
                sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
                source_name: faker.string.alpha({
                  length: { min: 10, max: 20 },
                }),
                sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
                is_static: faker.helpers.arrayElement([
                  faker.datatype.boolean(),
                  undefined,
                ]),
              })),
              undefined,
            ]),
            output_links: faker.helpers.arrayElement([
              Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => ({
                id: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined,
                ]),
                source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
                sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
                source_name: faker.string.alpha({
                  length: { min: 10, max: 20 },
                }),
                sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
                is_static: faker.helpers.arrayElement([
                  faker.datatype.boolean(),
                  undefined,
                ]),
              })),
              undefined,
            ]),
          })),
          undefined,
        ]),
        links: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({
            id: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            source_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
            sink_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
            source_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            sink_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            is_static: faker.helpers.arrayElement([
              faker.datatype.boolean(),
              undefined,
            ]),
          })),
          undefined,
        ]),
        forked_from_id: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            null,
          ]),
          undefined,
        ]),
        forked_from_version: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            null,
          ]),
          undefined,
        ]),
        input_schema: {},
        output_schema: {},
      })),
      undefined,
    ]),
    user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    input_schema: {},
    output_schema: {},
    credentials_input_schema: {},
    has_webhook_trigger: faker.datatype.boolean(),
  }));

export const getGetV1GetAllGraphVersionsResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPutV1SetActiveGraphVersionResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostV1ExecuteGraphAgentResponseMock = (
  overrideResponse: Partial<ExecuteGraphResponse> = {},
): ExecuteGraphResponse => ({
  graph_exec_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getPostV1ExecuteGraphAgentResponseMock200 = (
  overrideResponse: Partial<ExecuteGraphResponse> = {},
): ExecuteGraphResponse => ({
  graph_exec_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getPostV1ExecuteGraphAgentResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostV1StopGraphExecutionResponseMock = (
  overrideResponse: Partial<GraphExecution> = {},
): GraphExecution => ({
  id: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  graph_version: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  preset_id: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  status: faker.helpers.arrayElement(Object.values(AgentExecutionStatus)),
  started_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  ended_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  stats: faker.helpers.arrayElement([
    {
      cost: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      duration: faker.helpers.arrayElement([
        faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        undefined,
      ]),
      duration_cpu_only: faker.helpers.arrayElement([
        faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        undefined,
      ]),
      node_exec_time: faker.helpers.arrayElement([
        faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        undefined,
      ]),
      node_exec_time_cpu_only: faker.helpers.arrayElement([
        faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        undefined,
      ]),
      node_exec_count: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      node_error_count: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      error: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
    },
    null,
  ]),
  inputs: {},
  outputs: {
    [faker.string.alphanumeric(5)]: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({})),
  },
  ...overrideResponse,
});

export const getPostV1StopGraphExecutionResponseMock200 = (
  overrideResponse: Partial<GraphExecution> = {},
): GraphExecution => ({
  id: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  graph_version: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  preset_id: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  status: faker.helpers.arrayElement(Object.values(AgentExecutionStatus)),
  started_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  ended_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  stats: faker.helpers.arrayElement([
    {
      cost: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      duration: faker.helpers.arrayElement([
        faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        undefined,
      ]),
      duration_cpu_only: faker.helpers.arrayElement([
        faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        undefined,
      ]),
      node_exec_time: faker.helpers.arrayElement([
        faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        undefined,
      ]),
      node_exec_time_cpu_only: faker.helpers.arrayElement([
        faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        undefined,
      ]),
      node_exec_count: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      node_error_count: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      error: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
    },
    null,
  ]),
  inputs: {},
  outputs: {
    [faker.string.alphanumeric(5)]: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({})),
  },
  ...overrideResponse,
});

export const getPostV1StopGraphExecutionResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV1GetAllExecutionsResponseMock = (): GraphExecutionMeta[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    graph_version: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    preset_id: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    status: faker.helpers.arrayElement(Object.values(AgentExecutionStatus)),
    started_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    ended_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    stats: faker.helpers.arrayElement([
      {
        cost: faker.helpers.arrayElement([
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
          undefined,
        ]),
        duration: faker.helpers.arrayElement([
          faker.number.float({
            min: undefined,
            max: undefined,
            fractionDigits: 2,
          }),
          undefined,
        ]),
        duration_cpu_only: faker.helpers.arrayElement([
          faker.number.float({
            min: undefined,
            max: undefined,
            fractionDigits: 2,
          }),
          undefined,
        ]),
        node_exec_time: faker.helpers.arrayElement([
          faker.number.float({
            min: undefined,
            max: undefined,
            fractionDigits: 2,
          }),
          undefined,
        ]),
        node_exec_time_cpu_only: faker.helpers.arrayElement([
          faker.number.float({
            min: undefined,
            max: undefined,
            fractionDigits: 2,
          }),
          undefined,
        ]),
        node_exec_count: faker.helpers.arrayElement([
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
          undefined,
        ]),
        node_error_count: faker.helpers.arrayElement([
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
          undefined,
        ]),
        error: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            null,
          ]),
          undefined,
        ]),
      },
      null,
    ]),
  }));

export const getGetV1GetAllExecutionsResponseMock200 =
  (): GraphExecutionMeta[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      graph_version: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      preset_id: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
      status: faker.helpers.arrayElement(Object.values(AgentExecutionStatus)),
      started_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      ended_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      stats: faker.helpers.arrayElement([
        {
          cost: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          duration: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          duration_cpu_only: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          node_exec_time: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          node_exec_time_cpu_only: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          node_exec_count: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          node_error_count: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          error: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              null,
            ]),
            undefined,
          ]),
        },
        null,
      ]),
    }));

export const getGetV1GetGraphExecutionsResponseMock =
  (): GraphExecutionMeta[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      graph_version: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      preset_id: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
      status: faker.helpers.arrayElement(Object.values(AgentExecutionStatus)),
      started_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      ended_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      stats: faker.helpers.arrayElement([
        {
          cost: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          duration: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          duration_cpu_only: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          node_exec_time: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          node_exec_time_cpu_only: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          node_exec_count: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          node_error_count: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          error: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              null,
            ]),
            undefined,
          ]),
        },
        null,
      ]),
    }));

export const getGetV1GetGraphExecutionsResponseMock200 =
  (): GraphExecutionMeta[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      graph_version: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      preset_id: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
      status: faker.helpers.arrayElement(Object.values(AgentExecutionStatus)),
      started_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      ended_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      stats: faker.helpers.arrayElement([
        {
          cost: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          duration: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          duration_cpu_only: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          node_exec_time: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          node_exec_time_cpu_only: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          node_exec_count: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          node_error_count: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          error: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              null,
            ]),
            undefined,
          ]),
        },
        null,
      ]),
    }));

export const getGetV1GetGraphExecutionsResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV1GetExecutionDetailsResponseMock =
  (): GetV1GetExecutionDetails200 =>
    faker.helpers.arrayElement([
      {
        id: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
        graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
        graph_version: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        preset_id: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            null,
          ]),
          undefined,
        ]),
        status: faker.helpers.arrayElement(Object.values(AgentExecutionStatus)),
        started_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        ended_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        stats: faker.helpers.arrayElement([
          {
            cost: faker.helpers.arrayElement([
              faker.number.int({
                min: undefined,
                max: undefined,
                multipleOf: undefined,
              }),
              undefined,
            ]),
            duration: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2,
              }),
              undefined,
            ]),
            duration_cpu_only: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2,
              }),
              undefined,
            ]),
            node_exec_time: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2,
              }),
              undefined,
            ]),
            node_exec_time_cpu_only: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2,
              }),
              undefined,
            ]),
            node_exec_count: faker.helpers.arrayElement([
              faker.number.int({
                min: undefined,
                max: undefined,
                multipleOf: undefined,
              }),
              undefined,
            ]),
            node_error_count: faker.helpers.arrayElement([
              faker.number.int({
                min: undefined,
                max: undefined,
                multipleOf: undefined,
              }),
              undefined,
            ]),
            error: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                null,
              ]),
              undefined,
            ]),
          },
          null,
        ]),
        inputs: {},
        outputs: {
          [faker.string.alphanumeric(5)]: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({})),
        },
      },
      {
        id: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
        graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
        graph_version: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        preset_id: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            null,
          ]),
          undefined,
        ]),
        status: faker.helpers.arrayElement(Object.values(AgentExecutionStatus)),
        started_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        ended_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        stats: faker.helpers.arrayElement([
          {
            cost: faker.helpers.arrayElement([
              faker.number.int({
                min: undefined,
                max: undefined,
                multipleOf: undefined,
              }),
              undefined,
            ]),
            duration: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2,
              }),
              undefined,
            ]),
            duration_cpu_only: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2,
              }),
              undefined,
            ]),
            node_exec_time: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2,
              }),
              undefined,
            ]),
            node_exec_time_cpu_only: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2,
              }),
              undefined,
            ]),
            node_exec_count: faker.helpers.arrayElement([
              faker.number.int({
                min: undefined,
                max: undefined,
                multipleOf: undefined,
              }),
              undefined,
            ]),
            node_error_count: faker.helpers.arrayElement([
              faker.number.int({
                min: undefined,
                max: undefined,
                multipleOf: undefined,
              }),
              undefined,
            ]),
            error: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                null,
              ]),
              undefined,
            ]),
          },
          null,
        ]),
        inputs: {},
        outputs: {
          [faker.string.alphanumeric(5)]: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({})),
        },
        node_executions: Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          graph_version: faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
          graph_exec_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          node_exec_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          node_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          block_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          status: faker.helpers.arrayElement(
            Object.values(AgentExecutionStatus),
          ),
          input_data: {},
          output_data: {
            [faker.string.alphanumeric(5)]: Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => ({})),
          },
          add_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
          queue_time: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split(".")[0]}Z`,
            null,
          ]),
          start_time: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split(".")[0]}Z`,
            null,
          ]),
          end_time: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split(".")[0]}Z`,
            null,
          ]),
        })),
      },
    ]);

export const getGetV1GetExecutionDetailsResponseMock200 =
  (): GetV1GetExecutionDetails200 =>
    faker.helpers.arrayElement([
      {
        id: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
        graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
        graph_version: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        preset_id: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            null,
          ]),
          undefined,
        ]),
        status: faker.helpers.arrayElement(Object.values(AgentExecutionStatus)),
        started_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        ended_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        stats: faker.helpers.arrayElement([
          {
            cost: faker.helpers.arrayElement([
              faker.number.int({
                min: undefined,
                max: undefined,
                multipleOf: undefined,
              }),
              undefined,
            ]),
            duration: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2,
              }),
              undefined,
            ]),
            duration_cpu_only: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2,
              }),
              undefined,
            ]),
            node_exec_time: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2,
              }),
              undefined,
            ]),
            node_exec_time_cpu_only: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2,
              }),
              undefined,
            ]),
            node_exec_count: faker.helpers.arrayElement([
              faker.number.int({
                min: undefined,
                max: undefined,
                multipleOf: undefined,
              }),
              undefined,
            ]),
            node_error_count: faker.helpers.arrayElement([
              faker.number.int({
                min: undefined,
                max: undefined,
                multipleOf: undefined,
              }),
              undefined,
            ]),
            error: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                null,
              ]),
              undefined,
            ]),
          },
          null,
        ]),
        inputs: {},
        outputs: {
          [faker.string.alphanumeric(5)]: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({})),
        },
      },
      {
        id: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
        graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
        graph_version: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        preset_id: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            null,
          ]),
          undefined,
        ]),
        status: faker.helpers.arrayElement(Object.values(AgentExecutionStatus)),
        started_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        ended_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        stats: faker.helpers.arrayElement([
          {
            cost: faker.helpers.arrayElement([
              faker.number.int({
                min: undefined,
                max: undefined,
                multipleOf: undefined,
              }),
              undefined,
            ]),
            duration: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2,
              }),
              undefined,
            ]),
            duration_cpu_only: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2,
              }),
              undefined,
            ]),
            node_exec_time: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2,
              }),
              undefined,
            ]),
            node_exec_time_cpu_only: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2,
              }),
              undefined,
            ]),
            node_exec_count: faker.helpers.arrayElement([
              faker.number.int({
                min: undefined,
                max: undefined,
                multipleOf: undefined,
              }),
              undefined,
            ]),
            node_error_count: faker.helpers.arrayElement([
              faker.number.int({
                min: undefined,
                max: undefined,
                multipleOf: undefined,
              }),
              undefined,
            ]),
            error: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                null,
              ]),
              undefined,
            ]),
          },
          null,
        ]),
        inputs: {},
        outputs: {
          [faker.string.alphanumeric(5)]: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({})),
        },
        node_executions: Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          graph_version: faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
          graph_exec_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          node_exec_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          node_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          block_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          status: faker.helpers.arrayElement(
            Object.values(AgentExecutionStatus),
          ),
          input_data: {},
          output_data: {
            [faker.string.alphanumeric(5)]: Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => ({})),
          },
          add_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
          queue_time: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split(".")[0]}Z`,
            null,
          ]),
          start_time: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split(".")[0]}Z`,
            null,
          ]),
          end_time: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split(".")[0]}Z`,
            null,
          ]),
        })),
      },
    ]);

export const getGetV1GetExecutionDetailsResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getDeleteV1DeleteGraphExecutionResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV1ListUserGraphsMockHandler = (
  overrideResponse?:
    | GraphModel[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GraphModel[]> | GraphModel[]),
) => {
  return http.get("*/api/graphs", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1ListUserGraphsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1ListUserGraphsMockHandler200 = (
  overrideResponse?:
    | GraphModel[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GraphModel[]> | GraphModel[]),
) => {
  return http.get("*/api/graphs", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1ListUserGraphsResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV1CreateNewGraphMockHandler = (
  overrideResponse?:
    | GraphModel
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<GraphModel> | GraphModel),
) => {
  return http.post("*/api/graphs", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV1CreateNewGraphResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV1CreateNewGraphMockHandler200 = (
  overrideResponse?:
    | GraphModel
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<GraphModel> | GraphModel),
) => {
  return http.post("*/api/graphs", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV1CreateNewGraphResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV1CreateNewGraphMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.post("*/api/graphs", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV1CreateNewGraphResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1GetGraphVersionMockHandler = (
  overrideResponse?:
    | GraphModel
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GraphModel> | GraphModel),
) => {
  return http.get("*/api/graphs/:graphId/versions/:version", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1GetGraphVersionResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1GetGraphVersionMockHandler200 = (
  overrideResponse?:
    | GraphModel
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GraphModel> | GraphModel),
) => {
  return http.get("*/api/graphs/:graphId/versions/:version", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1GetGraphVersionResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1GetGraphVersionMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.get("*/api/graphs/:graphId/versions/:version", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1GetGraphVersionResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1GetSpecificGraphMockHandler = (
  overrideResponse?:
    | GraphModel
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GraphModel> | GraphModel),
) => {
  return http.get("*/api/graphs/:graphId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1GetSpecificGraphResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1GetSpecificGraphMockHandler200 = (
  overrideResponse?:
    | GraphModel
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GraphModel> | GraphModel),
) => {
  return http.get("*/api/graphs/:graphId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1GetSpecificGraphResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1GetSpecificGraphMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.get("*/api/graphs/:graphId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1GetSpecificGraphResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getDeleteV1DeleteGraphPermanentlyMockHandler = (
  overrideResponse?:
    | DeleteGraphResponse
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<DeleteGraphResponse> | DeleteGraphResponse),
) => {
  return http.delete("*/api/graphs/:graphId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getDeleteV1DeleteGraphPermanentlyResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getDeleteV1DeleteGraphPermanentlyMockHandler200 = (
  overrideResponse?:
    | DeleteGraphResponse
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<DeleteGraphResponse> | DeleteGraphResponse),
) => {
  return http.delete("*/api/graphs/:graphId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getDeleteV1DeleteGraphPermanentlyResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getDeleteV1DeleteGraphPermanentlyMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.delete("*/api/graphs/:graphId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getDeleteV1DeleteGraphPermanentlyResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPutV1UpdateGraphVersionMockHandler = (
  overrideResponse?:
    | GraphModel
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<GraphModel> | GraphModel),
) => {
  return http.put("*/api/graphs/:graphId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPutV1UpdateGraphVersionResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPutV1UpdateGraphVersionMockHandler200 = (
  overrideResponse?:
    | GraphModel
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<GraphModel> | GraphModel),
) => {
  return http.put("*/api/graphs/:graphId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPutV1UpdateGraphVersionResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPutV1UpdateGraphVersionMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.put("*/api/graphs/:graphId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPutV1UpdateGraphVersionResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1GetAllGraphVersionsMockHandler = (
  overrideResponse?:
    | GraphModel[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GraphModel[]> | GraphModel[]),
) => {
  return http.get("*/api/graphs/:graphId/versions", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1GetAllGraphVersionsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1GetAllGraphVersionsMockHandler200 = (
  overrideResponse?:
    | GraphModel[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GraphModel[]> | GraphModel[]),
) => {
  return http.get("*/api/graphs/:graphId/versions", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1GetAllGraphVersionsResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1GetAllGraphVersionsMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.get("*/api/graphs/:graphId/versions", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1GetAllGraphVersionsResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPutV1SetActiveGraphVersionMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.put("*/api/graphs/:graphId/versions/active", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getPutV1SetActiveGraphVersionMockHandler200 = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.put("*/api/graphs/:graphId/versions/active", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getPutV1SetActiveGraphVersionMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.put("*/api/graphs/:graphId/versions/active", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPutV1SetActiveGraphVersionResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV1ExecuteGraphAgentMockHandler = (
  overrideResponse?:
    | ExecuteGraphResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ExecuteGraphResponse> | ExecuteGraphResponse),
) => {
  return http.post(
    "*/api/graphs/:graphId/execute/:graphVersion",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getPostV1ExecuteGraphAgentResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getPostV1ExecuteGraphAgentMockHandler200 = (
  overrideResponse?:
    | ExecuteGraphResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ExecuteGraphResponse> | ExecuteGraphResponse),
) => {
  return http.post(
    "*/api/graphs/:graphId/execute/:graphVersion",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getPostV1ExecuteGraphAgentResponseMock200(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getPostV1ExecuteGraphAgentMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.post(
    "*/api/graphs/:graphId/execute/:graphVersion",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getPostV1ExecuteGraphAgentResponseMock422(),
        ),
        { status: 422, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getPostV1StopGraphExecutionMockHandler = (
  overrideResponse?:
    | GraphExecution
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<GraphExecution> | GraphExecution),
) => {
  return http.post(
    "*/api/graphs/:graphId/executions/:graphExecId/stop",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getPostV1StopGraphExecutionResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getPostV1StopGraphExecutionMockHandler200 = (
  overrideResponse?:
    | GraphExecution
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<GraphExecution> | GraphExecution),
) => {
  return http.post(
    "*/api/graphs/:graphId/executions/:graphExecId/stop",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getPostV1StopGraphExecutionResponseMock200(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getPostV1StopGraphExecutionMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.post(
    "*/api/graphs/:graphId/executions/:graphExecId/stop",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getPostV1StopGraphExecutionResponseMock422(),
        ),
        { status: 422, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getGetV1GetAllExecutionsMockHandler = (
  overrideResponse?:
    | GraphExecutionMeta[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GraphExecutionMeta[]> | GraphExecutionMeta[]),
) => {
  return http.get("*/api/executions", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1GetAllExecutionsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1GetAllExecutionsMockHandler200 = (
  overrideResponse?:
    | GraphExecutionMeta[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GraphExecutionMeta[]> | GraphExecutionMeta[]),
) => {
  return http.get("*/api/executions", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1GetAllExecutionsResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1GetGraphExecutionsMockHandler = (
  overrideResponse?:
    | GraphExecutionMeta[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GraphExecutionMeta[]> | GraphExecutionMeta[]),
) => {
  return http.get("*/api/graphs/:graphId/executions", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1GetGraphExecutionsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1GetGraphExecutionsMockHandler200 = (
  overrideResponse?:
    | GraphExecutionMeta[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GraphExecutionMeta[]> | GraphExecutionMeta[]),
) => {
  return http.get("*/api/graphs/:graphId/executions", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1GetGraphExecutionsResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1GetGraphExecutionsMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.get("*/api/graphs/:graphId/executions", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1GetGraphExecutionsResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1GetExecutionDetailsMockHandler = (
  overrideResponse?:
    | GetV1GetExecutionDetails200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetV1GetExecutionDetails200> | GetV1GetExecutionDetails200),
) => {
  return http.get(
    "*/api/graphs/:graphId/executions/:graphExecId",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetV1GetExecutionDetailsResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getGetV1GetExecutionDetailsMockHandler200 = (
  overrideResponse?:
    | GetV1GetExecutionDetails200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetV1GetExecutionDetails200> | GetV1GetExecutionDetails200),
) => {
  return http.get(
    "*/api/graphs/:graphId/executions/:graphExecId",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetV1GetExecutionDetailsResponseMock200(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getGetV1GetExecutionDetailsMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.get(
    "*/api/graphs/:graphId/executions/:graphExecId",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetV1GetExecutionDetailsResponseMock422(),
        ),
        { status: 422, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getDeleteV1DeleteGraphExecutionMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.delete("*/api/executions/:graphExecId", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 204 });
  });
};

export const getDeleteV1DeleteGraphExecutionMockHandler204 = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.delete("*/api/executions/:graphExecId", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 204 });
  });
};

export const getDeleteV1DeleteGraphExecutionMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.delete("*/api/executions/:graphExecId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getDeleteV1DeleteGraphExecutionResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getGraphsMock = () => [
  getGetV1ListUserGraphsMockHandler(),
  getPostV1CreateNewGraphMockHandler(),
  getGetV1GetGraphVersionMockHandler(),
  getGetV1GetSpecificGraphMockHandler(),
  getDeleteV1DeleteGraphPermanentlyMockHandler(),
  getPutV1UpdateGraphVersionMockHandler(),
  getGetV1GetAllGraphVersionsMockHandler(),
  getPutV1SetActiveGraphVersionMockHandler(),
  getPostV1ExecuteGraphAgentMockHandler(),
  getPostV1StopGraphExecutionMockHandler(),
  getGetV1GetAllExecutionsMockHandler(),
  getGetV1GetGraphExecutionsMockHandler(),
  getGetV1GetExecutionDetailsMockHandler(),
  getDeleteV1DeleteGraphExecutionMockHandler(),
];
