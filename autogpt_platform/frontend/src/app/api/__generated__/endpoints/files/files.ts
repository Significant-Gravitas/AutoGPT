/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * AutoGPT Agent Server
 * This server is used to execute agents that are created by the AutoGPT system.
 * OpenAPI spec version: 0.1
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";

import type { BodyPostV1UploadFileToCloudStorage } from "../../models/bodyPostV1UploadFileToCloudStorage";

import type { HTTPValidationError } from "../../models/hTTPValidationError";

import type { PostV1UploadFileToCloudStorageParams } from "../../models/postV1UploadFileToCloudStorageParams";

import type { UploadFileResponse } from "../../models/uploadFileResponse";

import { customMutator } from "../../../mutators/custom-mutator";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Upload a file to cloud storage and return a storage key that can be used
with FileStoreBlock and AgentFileInputBlock.

Args:
    file: The file to upload
    user_id: The user ID
    provider: Cloud storage provider ("gcs", "s3", "azure")
    expiration_hours: Hours until file expires (1-48)

Returns:
    Dict containing the cloud storage path and signed URL
 * @summary Upload file to cloud storage
 */
export type postV1UploadFileToCloudStorageResponse200 = {
  data: UploadFileResponse;
  status: 200;
};

export type postV1UploadFileToCloudStorageResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type postV1UploadFileToCloudStorageResponseComposite =
  | postV1UploadFileToCloudStorageResponse200
  | postV1UploadFileToCloudStorageResponse422;

export type postV1UploadFileToCloudStorageResponse =
  postV1UploadFileToCloudStorageResponseComposite & {
    headers: Headers;
  };

export const getPostV1UploadFileToCloudStorageUrl = (
  params?: PostV1UploadFileToCloudStorageParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/files/upload?${stringifiedParams}`
    : `/api/files/upload`;
};

export const postV1UploadFileToCloudStorage = async (
  bodyPostV1UploadFileToCloudStorage: BodyPostV1UploadFileToCloudStorage,
  params?: PostV1UploadFileToCloudStorageParams,
  options?: RequestInit,
): Promise<postV1UploadFileToCloudStorageResponse> => {
  const formData = new FormData();
  formData.append(`file`, bodyPostV1UploadFileToCloudStorage.file);

  return customMutator<postV1UploadFileToCloudStorageResponse>(
    getPostV1UploadFileToCloudStorageUrl(params),
    {
      ...options,
      method: "POST",
      body: formData,
    },
  );
};

export const getPostV1UploadFileToCloudStorageMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1UploadFileToCloudStorage>>,
    TError,
    {
      data: BodyPostV1UploadFileToCloudStorage;
      params?: PostV1UploadFileToCloudStorageParams;
    },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1UploadFileToCloudStorage>>,
  TError,
  {
    data: BodyPostV1UploadFileToCloudStorage;
    params?: PostV1UploadFileToCloudStorageParams;
  },
  TContext
> => {
  const mutationKey = ["postV1UploadFileToCloudStorage"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1UploadFileToCloudStorage>>,
    {
      data: BodyPostV1UploadFileToCloudStorage;
      params?: PostV1UploadFileToCloudStorageParams;
    }
  > = (props) => {
    const { data, params } = props ?? {};

    return postV1UploadFileToCloudStorage(data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1UploadFileToCloudStorageMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1UploadFileToCloudStorage>>
>;
export type PostV1UploadFileToCloudStorageMutationBody =
  BodyPostV1UploadFileToCloudStorage;
export type PostV1UploadFileToCloudStorageMutationError = HTTPValidationError;

/**
 * @summary Upload file to cloud storage
 */
export const usePostV1UploadFileToCloudStorage = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1UploadFileToCloudStorage>>,
      TError,
      {
        data: BodyPostV1UploadFileToCloudStorage;
        params?: PostV1UploadFileToCloudStorageParams;
      },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postV1UploadFileToCloudStorage>>,
  TError,
  {
    data: BodyPostV1UploadFileToCloudStorage;
    params?: PostV1UploadFileToCloudStorageParams;
  },
  TContext
> => {
  const mutationOptions =
    getPostV1UploadFileToCloudStorageMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
