/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * AutoGPT Agent Server
 * This server is used to execute agents that are created by the AutoGPT system.
 * OpenAPI spec version: 0.1
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";

import type { BodyPostV1LogRawAnalytics } from "../../models/bodyPostV1LogRawAnalytics";

import type { HTTPValidationError } from "../../models/hTTPValidationError";

import type { LogRawMetricRequest } from "../../models/logRawMetricRequest";

import { customMutator } from "../../../mutators/custom-mutator";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Log Raw Metric
 */
export type postV1LogRawMetricResponse200 = {
  data: unknown;
  status: 200;
};

export type postV1LogRawMetricResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type postV1LogRawMetricResponseComposite =
  | postV1LogRawMetricResponse200
  | postV1LogRawMetricResponse422;

export type postV1LogRawMetricResponse = postV1LogRawMetricResponseComposite & {
  headers: Headers;
};

export const getPostV1LogRawMetricUrl = () => {
  return `/api/analytics/log_raw_metric`;
};

export const postV1LogRawMetric = async (
  logRawMetricRequest: LogRawMetricRequest,
  options?: RequestInit,
): Promise<postV1LogRawMetricResponse> => {
  return customMutator<postV1LogRawMetricResponse>(getPostV1LogRawMetricUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(logRawMetricRequest),
  });
};

export const getPostV1LogRawMetricMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1LogRawMetric>>,
    TError,
    { data: LogRawMetricRequest },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1LogRawMetric>>,
  TError,
  { data: LogRawMetricRequest },
  TContext
> => {
  const mutationKey = ["postV1LogRawMetric"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1LogRawMetric>>,
    { data: LogRawMetricRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postV1LogRawMetric(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1LogRawMetricMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1LogRawMetric>>
>;
export type PostV1LogRawMetricMutationBody = LogRawMetricRequest;
export type PostV1LogRawMetricMutationError = HTTPValidationError;

/**
 * @summary Log Raw Metric
 */
export const usePostV1LogRawMetric = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1LogRawMetric>>,
      TError,
      { data: LogRawMetricRequest },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postV1LogRawMetric>>,
  TError,
  { data: LogRawMetricRequest },
  TContext
> => {
  const mutationOptions = getPostV1LogRawMetricMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Log Raw Analytics
 */
export type postV1LogRawAnalyticsResponse200 = {
  data: unknown;
  status: 200;
};

export type postV1LogRawAnalyticsResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type postV1LogRawAnalyticsResponseComposite =
  | postV1LogRawAnalyticsResponse200
  | postV1LogRawAnalyticsResponse422;

export type postV1LogRawAnalyticsResponse =
  postV1LogRawAnalyticsResponseComposite & {
    headers: Headers;
  };

export const getPostV1LogRawAnalyticsUrl = () => {
  return `/api/analytics/log_raw_analytics`;
};

export const postV1LogRawAnalytics = async (
  bodyPostV1LogRawAnalytics: BodyPostV1LogRawAnalytics,
  options?: RequestInit,
): Promise<postV1LogRawAnalyticsResponse> => {
  return customMutator<postV1LogRawAnalyticsResponse>(
    getPostV1LogRawAnalyticsUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(bodyPostV1LogRawAnalytics),
    },
  );
};

export const getPostV1LogRawAnalyticsMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1LogRawAnalytics>>,
    TError,
    { data: BodyPostV1LogRawAnalytics },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1LogRawAnalytics>>,
  TError,
  { data: BodyPostV1LogRawAnalytics },
  TContext
> => {
  const mutationKey = ["postV1LogRawAnalytics"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1LogRawAnalytics>>,
    { data: BodyPostV1LogRawAnalytics }
  > = (props) => {
    const { data } = props ?? {};

    return postV1LogRawAnalytics(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1LogRawAnalyticsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1LogRawAnalytics>>
>;
export type PostV1LogRawAnalyticsMutationBody = BodyPostV1LogRawAnalytics;
export type PostV1LogRawAnalyticsMutationError = HTTPValidationError;

/**
 * @summary Log Raw Analytics
 */
export const usePostV1LogRawAnalytics = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1LogRawAnalytics>>,
      TError,
      { data: BodyPostV1LogRawAnalytics },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postV1LogRawAnalytics>>,
  TError,
  { data: BodyPostV1LogRawAnalytics },
  TContext
> => {
  const mutationOptions = getPostV1LogRawAnalyticsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
