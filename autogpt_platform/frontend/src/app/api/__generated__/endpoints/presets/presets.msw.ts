/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * AutoGPT Agent Server
 * This server is used to execute agents that are created by the AutoGPT system.
 * OpenAPI spec version: 0.1
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";

import type { HTTPValidationError } from "../../models/hTTPValidationError";

import type { LibraryAgentPreset } from "../../models/libraryAgentPreset";

import type { LibraryAgentPresetResponse } from "../../models/libraryAgentPresetResponse";

import type { PostV2ExecuteAPreset200 } from "../../models/postV2ExecuteAPreset200";

import { ProviderName } from "../../models/providerName";

export const getGetV2ListPresetsResponseMock = (
  overrideResponse: Partial<LibraryAgentPresetResponse> = {},
): LibraryAgentPresetResponse => ({
  presets: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    graph_version: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    inputs: {},
    credentials: {
      [faker.string.alphanumeric(5)]: {
        id: faker.string.alpha({ length: { min: 10, max: 20 } }),
        title: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            null,
          ]),
          undefined,
        ]),
        provider: faker.helpers.arrayElement(Object.values(ProviderName)),
        type: faker.helpers.arrayElement([
          "api_key",
          "oauth2",
          "user_password",
          "host_scoped",
        ] as const),
      },
    },
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    description: faker.string.alpha({ length: { min: 10, max: 20 } }),
    is_active: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    webhook_id: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  })),
  pagination: {
    total_items: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    total_pages: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    current_page: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    page_size: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
  },
  ...overrideResponse,
});

export const getGetV2ListPresetsResponseMock200 = (
  overrideResponse: Partial<LibraryAgentPresetResponse> = {},
): LibraryAgentPresetResponse => ({
  presets: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    graph_version: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    inputs: {},
    credentials: {
      [faker.string.alphanumeric(5)]: {
        id: faker.string.alpha({ length: { min: 10, max: 20 } }),
        title: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            null,
          ]),
          undefined,
        ]),
        provider: faker.helpers.arrayElement(Object.values(ProviderName)),
        type: faker.helpers.arrayElement([
          "api_key",
          "oauth2",
          "user_password",
          "host_scoped",
        ] as const),
      },
    },
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    description: faker.string.alpha({ length: { min: 10, max: 20 } }),
    is_active: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    webhook_id: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  })),
  pagination: {
    total_items: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    total_pages: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    current_page: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    page_size: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
  },
  ...overrideResponse,
});

export const getGetV2ListPresetsResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostV2CreateANewPresetResponseMock = (
  overrideResponse: Partial<LibraryAgentPreset> = {},
): LibraryAgentPreset => ({
  graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  graph_version: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  inputs: {},
  credentials: {
    [faker.string.alphanumeric(5)]: {
      id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      title: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
      provider: faker.helpers.arrayElement(Object.values(ProviderName)),
      type: faker.helpers.arrayElement([
        "api_key",
        "oauth2",
        "user_password",
        "host_scoped",
      ] as const),
    },
  },
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  is_active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  webhook_id: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  ...overrideResponse,
});

export const getPostV2CreateANewPresetResponseMock200 = (
  overrideResponse: Partial<LibraryAgentPreset> = {},
): LibraryAgentPreset => ({
  graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  graph_version: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  inputs: {},
  credentials: {
    [faker.string.alphanumeric(5)]: {
      id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      title: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
      provider: faker.helpers.arrayElement(Object.values(ProviderName)),
      type: faker.helpers.arrayElement([
        "api_key",
        "oauth2",
        "user_password",
        "host_scoped",
      ] as const),
    },
  },
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  is_active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  webhook_id: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  ...overrideResponse,
});

export const getPostV2CreateANewPresetResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV2GetASpecificPresetResponseMock = (
  overrideResponse: Partial<LibraryAgentPreset> = {},
): LibraryAgentPreset => ({
  graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  graph_version: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  inputs: {},
  credentials: {
    [faker.string.alphanumeric(5)]: {
      id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      title: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
      provider: faker.helpers.arrayElement(Object.values(ProviderName)),
      type: faker.helpers.arrayElement([
        "api_key",
        "oauth2",
        "user_password",
        "host_scoped",
      ] as const),
    },
  },
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  is_active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  webhook_id: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  ...overrideResponse,
});

export const getGetV2GetASpecificPresetResponseMock200 = (
  overrideResponse: Partial<LibraryAgentPreset> = {},
): LibraryAgentPreset => ({
  graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  graph_version: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  inputs: {},
  credentials: {
    [faker.string.alphanumeric(5)]: {
      id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      title: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
      provider: faker.helpers.arrayElement(Object.values(ProviderName)),
      type: faker.helpers.arrayElement([
        "api_key",
        "oauth2",
        "user_password",
        "host_scoped",
      ] as const),
    },
  },
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  is_active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  webhook_id: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  ...overrideResponse,
});

export const getGetV2GetASpecificPresetResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPatchV2UpdateAnExistingPresetResponseMock = (
  overrideResponse: Partial<LibraryAgentPreset> = {},
): LibraryAgentPreset => ({
  graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  graph_version: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  inputs: {},
  credentials: {
    [faker.string.alphanumeric(5)]: {
      id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      title: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
      provider: faker.helpers.arrayElement(Object.values(ProviderName)),
      type: faker.helpers.arrayElement([
        "api_key",
        "oauth2",
        "user_password",
        "host_scoped",
      ] as const),
    },
  },
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  is_active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  webhook_id: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  ...overrideResponse,
});

export const getPatchV2UpdateAnExistingPresetResponseMock200 = (
  overrideResponse: Partial<LibraryAgentPreset> = {},
): LibraryAgentPreset => ({
  graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  graph_version: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  inputs: {},
  credentials: {
    [faker.string.alphanumeric(5)]: {
      id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      title: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
      provider: faker.helpers.arrayElement(Object.values(ProviderName)),
      type: faker.helpers.arrayElement([
        "api_key",
        "oauth2",
        "user_password",
        "host_scoped",
      ] as const),
    },
  },
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  is_active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  webhook_id: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  ...overrideResponse,
});

export const getPatchV2UpdateAnExistingPresetResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getDeleteV2DeleteAPresetResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostV2ExecuteAPresetResponseMock =
  (): PostV2ExecuteAPreset200 => ({});

export const getPostV2ExecuteAPresetResponseMock200 =
  (): PostV2ExecuteAPreset200 => ({});

export const getPostV2ExecuteAPresetResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV2ListPresetsMockHandler = (
  overrideResponse?:
    | LibraryAgentPresetResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<LibraryAgentPresetResponse> | LibraryAgentPresetResponse),
) => {
  return http.get("*/api/library/presets", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2ListPresetsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV2ListPresetsMockHandler200 = (
  overrideResponse?:
    | LibraryAgentPresetResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<LibraryAgentPresetResponse> | LibraryAgentPresetResponse),
) => {
  return http.get("*/api/library/presets", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2ListPresetsResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV2ListPresetsMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.get("*/api/library/presets", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2ListPresetsResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV2CreateANewPresetMockHandler = (
  overrideResponse?:
    | LibraryAgentPreset
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<LibraryAgentPreset> | LibraryAgentPreset),
) => {
  return http.post("*/api/library/presets", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV2CreateANewPresetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV2CreateANewPresetMockHandler200 = (
  overrideResponse?:
    | LibraryAgentPreset
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<LibraryAgentPreset> | LibraryAgentPreset),
) => {
  return http.post("*/api/library/presets", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV2CreateANewPresetResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV2CreateANewPresetMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.post("*/api/library/presets", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV2CreateANewPresetResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV2GetASpecificPresetMockHandler = (
  overrideResponse?:
    | LibraryAgentPreset
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<LibraryAgentPreset> | LibraryAgentPreset),
) => {
  return http.get("*/api/library/presets/:presetId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2GetASpecificPresetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV2GetASpecificPresetMockHandler200 = (
  overrideResponse?:
    | LibraryAgentPreset
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<LibraryAgentPreset> | LibraryAgentPreset),
) => {
  return http.get("*/api/library/presets/:presetId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2GetASpecificPresetResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV2GetASpecificPresetMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.get("*/api/library/presets/:presetId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2GetASpecificPresetResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPatchV2UpdateAnExistingPresetMockHandler = (
  overrideResponse?:
    | LibraryAgentPreset
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<LibraryAgentPreset> | LibraryAgentPreset),
) => {
  return http.patch("*/api/library/presets/:presetId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPatchV2UpdateAnExistingPresetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPatchV2UpdateAnExistingPresetMockHandler200 = (
  overrideResponse?:
    | LibraryAgentPreset
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<LibraryAgentPreset> | LibraryAgentPreset),
) => {
  return http.patch("*/api/library/presets/:presetId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPatchV2UpdateAnExistingPresetResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPatchV2UpdateAnExistingPresetMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.patch("*/api/library/presets/:presetId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPatchV2UpdateAnExistingPresetResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getDeleteV2DeleteAPresetMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.delete("*/api/library/presets/:presetId", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 204 });
  });
};

export const getDeleteV2DeleteAPresetMockHandler204 = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.delete("*/api/library/presets/:presetId", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 204 });
  });
};

export const getDeleteV2DeleteAPresetMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.delete("*/api/library/presets/:presetId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getDeleteV2DeleteAPresetResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV2ExecuteAPresetMockHandler = (
  overrideResponse?:
    | PostV2ExecuteAPreset200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<PostV2ExecuteAPreset200> | PostV2ExecuteAPreset200),
) => {
  return http.post("*/api/library/presets/:presetId/execute", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV2ExecuteAPresetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV2ExecuteAPresetMockHandler200 = (
  overrideResponse?:
    | PostV2ExecuteAPreset200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<PostV2ExecuteAPreset200> | PostV2ExecuteAPreset200),
) => {
  return http.post("*/api/library/presets/:presetId/execute", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV2ExecuteAPresetResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV2ExecuteAPresetMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.post("*/api/library/presets/:presetId/execute", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV2ExecuteAPresetResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getPresetsMock = () => [
  getGetV2ListPresetsMockHandler(),
  getPostV2CreateANewPresetMockHandler(),
  getGetV2GetASpecificPresetMockHandler(),
  getPatchV2UpdateAnExistingPresetMockHandler(),
  getDeleteV2DeleteAPresetMockHandler(),
  getPostV2ExecuteAPresetMockHandler(),
];
