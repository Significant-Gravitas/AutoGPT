/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * AutoGPT Agent Server
 * This server is used to execute agents that are created by the AutoGPT system.
 * OpenAPI spec version: 0.1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { BodyPostV2ExecuteAPreset } from "../../models/bodyPostV2ExecuteAPreset";

import type { GetV2ListPresetsParams } from "../../models/getV2ListPresetsParams";

import type { HTTPValidationError } from "../../models/hTTPValidationError";

import type { LibraryAgentPreset } from "../../models/libraryAgentPreset";

import type { LibraryAgentPresetResponse } from "../../models/libraryAgentPresetResponse";

import type { LibraryAgentPresetUpdatable } from "../../models/libraryAgentPresetUpdatable";

import type { PostV2CreateANewPresetBody } from "../../models/postV2CreateANewPresetBody";

import type { PostV2ExecuteAPreset200 } from "../../models/postV2ExecuteAPreset200";

import { customMutator } from "../../../mutators/custom-mutator";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Retrieve a paginated list of presets for the current user.
 * @summary List presets
 */
export type getV2ListPresetsResponse200 = {
  data: LibraryAgentPresetResponse;
  status: 200;
};

export type getV2ListPresetsResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type getV2ListPresetsResponseComposite =
  | getV2ListPresetsResponse200
  | getV2ListPresetsResponse422;

export type getV2ListPresetsResponse = getV2ListPresetsResponseComposite & {
  headers: Headers;
};

export const getGetV2ListPresetsUrl = (params: GetV2ListPresetsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/library/presets?${stringifiedParams}`
    : `/api/library/presets`;
};

export const getV2ListPresets = async (
  params: GetV2ListPresetsParams,
  options?: RequestInit,
): Promise<getV2ListPresetsResponse> => {
  return customMutator<getV2ListPresetsResponse>(
    getGetV2ListPresetsUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV2ListPresetsQueryKey = (params: GetV2ListPresetsParams) => {
  return [`/api/library/presets`, ...(params ? [params] : [])] as const;
};

export const getGetV2ListPresetsQueryOptions = <
  TData = Awaited<ReturnType<typeof getV2ListPresets>>,
  TError = HTTPValidationError,
>(
  params: GetV2ListPresetsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2ListPresets>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetV2ListPresetsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV2ListPresets>>
  > = ({ signal }) => getV2ListPresets(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV2ListPresets>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV2ListPresetsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV2ListPresets>>
>;
export type GetV2ListPresetsQueryError = HTTPValidationError;

export function useGetV2ListPresets<
  TData = Awaited<ReturnType<typeof getV2ListPresets>>,
  TError = HTTPValidationError,
>(
  params: GetV2ListPresetsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2ListPresets>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2ListPresets>>,
          TError,
          Awaited<ReturnType<typeof getV2ListPresets>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2ListPresets<
  TData = Awaited<ReturnType<typeof getV2ListPresets>>,
  TError = HTTPValidationError,
>(
  params: GetV2ListPresetsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2ListPresets>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2ListPresets>>,
          TError,
          Awaited<ReturnType<typeof getV2ListPresets>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2ListPresets<
  TData = Awaited<ReturnType<typeof getV2ListPresets>>,
  TError = HTTPValidationError,
>(
  params: GetV2ListPresetsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2ListPresets>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List presets
 */

export function useGetV2ListPresets<
  TData = Awaited<ReturnType<typeof getV2ListPresets>>,
  TError = HTTPValidationError,
>(
  params: GetV2ListPresetsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2ListPresets>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV2ListPresetsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a new preset for the current user.
 * @summary Create a new preset
 */
export type postV2CreateANewPresetResponse200 = {
  data: LibraryAgentPreset;
  status: 200;
};

export type postV2CreateANewPresetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type postV2CreateANewPresetResponseComposite =
  | postV2CreateANewPresetResponse200
  | postV2CreateANewPresetResponse422;

export type postV2CreateANewPresetResponse =
  postV2CreateANewPresetResponseComposite & {
    headers: Headers;
  };

export const getPostV2CreateANewPresetUrl = () => {
  return `/api/library/presets`;
};

export const postV2CreateANewPreset = async (
  postV2CreateANewPresetBody: PostV2CreateANewPresetBody,
  options?: RequestInit,
): Promise<postV2CreateANewPresetResponse> => {
  return customMutator<postV2CreateANewPresetResponse>(
    getPostV2CreateANewPresetUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(postV2CreateANewPresetBody),
    },
  );
};

export const getPostV2CreateANewPresetMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV2CreateANewPreset>>,
    TError,
    { data: PostV2CreateANewPresetBody },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV2CreateANewPreset>>,
  TError,
  { data: PostV2CreateANewPresetBody },
  TContext
> => {
  const mutationKey = ["postV2CreateANewPreset"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV2CreateANewPreset>>,
    { data: PostV2CreateANewPresetBody }
  > = (props) => {
    const { data } = props ?? {};

    return postV2CreateANewPreset(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV2CreateANewPresetMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV2CreateANewPreset>>
>;
export type PostV2CreateANewPresetMutationBody = PostV2CreateANewPresetBody;
export type PostV2CreateANewPresetMutationError = HTTPValidationError;

/**
 * @summary Create a new preset
 */
export const usePostV2CreateANewPreset = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV2CreateANewPreset>>,
      TError,
      { data: PostV2CreateANewPresetBody },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postV2CreateANewPreset>>,
  TError,
  { data: PostV2CreateANewPresetBody },
  TContext
> => {
  const mutationOptions = getPostV2CreateANewPresetMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Retrieve details for a specific preset by its ID.
 * @summary Get a specific preset
 */
export type getV2GetASpecificPresetResponse200 = {
  data: LibraryAgentPreset;
  status: 200;
};

export type getV2GetASpecificPresetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type getV2GetASpecificPresetResponseComposite =
  | getV2GetASpecificPresetResponse200
  | getV2GetASpecificPresetResponse422;

export type getV2GetASpecificPresetResponse =
  getV2GetASpecificPresetResponseComposite & {
    headers: Headers;
  };

export const getGetV2GetASpecificPresetUrl = (presetId: string) => {
  return `/api/library/presets/${presetId}`;
};

export const getV2GetASpecificPreset = async (
  presetId: string,
  options?: RequestInit,
): Promise<getV2GetASpecificPresetResponse> => {
  return customMutator<getV2GetASpecificPresetResponse>(
    getGetV2GetASpecificPresetUrl(presetId),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV2GetASpecificPresetQueryKey = (presetId: string) => {
  return [`/api/library/presets/${presetId}`] as const;
};

export const getGetV2GetASpecificPresetQueryOptions = <
  TData = Awaited<ReturnType<typeof getV2GetASpecificPreset>>,
  TError = HTTPValidationError,
>(
  presetId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetASpecificPreset>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetV2GetASpecificPresetQueryKey(presetId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV2GetASpecificPreset>>
  > = ({ signal }) =>
    getV2GetASpecificPreset(presetId, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!presetId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getV2GetASpecificPreset>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV2GetASpecificPresetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV2GetASpecificPreset>>
>;
export type GetV2GetASpecificPresetQueryError = HTTPValidationError;

export function useGetV2GetASpecificPreset<
  TData = Awaited<ReturnType<typeof getV2GetASpecificPreset>>,
  TError = HTTPValidationError,
>(
  presetId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetASpecificPreset>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2GetASpecificPreset>>,
          TError,
          Awaited<ReturnType<typeof getV2GetASpecificPreset>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2GetASpecificPreset<
  TData = Awaited<ReturnType<typeof getV2GetASpecificPreset>>,
  TError = HTTPValidationError,
>(
  presetId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetASpecificPreset>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2GetASpecificPreset>>,
          TError,
          Awaited<ReturnType<typeof getV2GetASpecificPreset>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2GetASpecificPreset<
  TData = Awaited<ReturnType<typeof getV2GetASpecificPreset>>,
  TError = HTTPValidationError,
>(
  presetId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetASpecificPreset>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a specific preset
 */

export function useGetV2GetASpecificPreset<
  TData = Awaited<ReturnType<typeof getV2GetASpecificPreset>>,
  TError = HTTPValidationError,
>(
  presetId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetASpecificPreset>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV2GetASpecificPresetQueryOptions(
    presetId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update an existing preset by its ID.
 * @summary Update an existing preset
 */
export type patchV2UpdateAnExistingPresetResponse200 = {
  data: LibraryAgentPreset;
  status: 200;
};

export type patchV2UpdateAnExistingPresetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type patchV2UpdateAnExistingPresetResponseComposite =
  | patchV2UpdateAnExistingPresetResponse200
  | patchV2UpdateAnExistingPresetResponse422;

export type patchV2UpdateAnExistingPresetResponse =
  patchV2UpdateAnExistingPresetResponseComposite & {
    headers: Headers;
  };

export const getPatchV2UpdateAnExistingPresetUrl = (presetId: string) => {
  return `/api/library/presets/${presetId}`;
};

export const patchV2UpdateAnExistingPreset = async (
  presetId: string,
  libraryAgentPresetUpdatable: LibraryAgentPresetUpdatable,
  options?: RequestInit,
): Promise<patchV2UpdateAnExistingPresetResponse> => {
  return customMutator<patchV2UpdateAnExistingPresetResponse>(
    getPatchV2UpdateAnExistingPresetUrl(presetId),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(libraryAgentPresetUpdatable),
    },
  );
};

export const getPatchV2UpdateAnExistingPresetMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchV2UpdateAnExistingPreset>>,
    TError,
    { presetId: string; data: LibraryAgentPresetUpdatable },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchV2UpdateAnExistingPreset>>,
  TError,
  { presetId: string; data: LibraryAgentPresetUpdatable },
  TContext
> => {
  const mutationKey = ["patchV2UpdateAnExistingPreset"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchV2UpdateAnExistingPreset>>,
    { presetId: string; data: LibraryAgentPresetUpdatable }
  > = (props) => {
    const { presetId, data } = props ?? {};

    return patchV2UpdateAnExistingPreset(presetId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchV2UpdateAnExistingPresetMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchV2UpdateAnExistingPreset>>
>;
export type PatchV2UpdateAnExistingPresetMutationBody =
  LibraryAgentPresetUpdatable;
export type PatchV2UpdateAnExistingPresetMutationError = HTTPValidationError;

/**
 * @summary Update an existing preset
 */
export const usePatchV2UpdateAnExistingPreset = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof patchV2UpdateAnExistingPreset>>,
      TError,
      { presetId: string; data: LibraryAgentPresetUpdatable },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof patchV2UpdateAnExistingPreset>>,
  TError,
  { presetId: string; data: LibraryAgentPresetUpdatable },
  TContext
> => {
  const mutationOptions =
    getPatchV2UpdateAnExistingPresetMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Delete an existing preset by its ID.
 * @summary Delete a preset
 */
export type deleteV2DeleteAPresetResponse204 = {
  data: void;
  status: 204;
};

export type deleteV2DeleteAPresetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type deleteV2DeleteAPresetResponseComposite =
  | deleteV2DeleteAPresetResponse204
  | deleteV2DeleteAPresetResponse422;

export type deleteV2DeleteAPresetResponse =
  deleteV2DeleteAPresetResponseComposite & {
    headers: Headers;
  };

export const getDeleteV2DeleteAPresetUrl = (presetId: string) => {
  return `/api/library/presets/${presetId}`;
};

export const deleteV2DeleteAPreset = async (
  presetId: string,
  options?: RequestInit,
): Promise<deleteV2DeleteAPresetResponse> => {
  return customMutator<deleteV2DeleteAPresetResponse>(
    getDeleteV2DeleteAPresetUrl(presetId),
    {
      ...options,
      method: "DELETE",
    },
  );
};

export const getDeleteV2DeleteAPresetMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteV2DeleteAPreset>>,
    TError,
    { presetId: string },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteV2DeleteAPreset>>,
  TError,
  { presetId: string },
  TContext
> => {
  const mutationKey = ["deleteV2DeleteAPreset"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteV2DeleteAPreset>>,
    { presetId: string }
  > = (props) => {
    const { presetId } = props ?? {};

    return deleteV2DeleteAPreset(presetId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteV2DeleteAPresetMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteV2DeleteAPreset>>
>;

export type DeleteV2DeleteAPresetMutationError = HTTPValidationError;

/**
 * @summary Delete a preset
 */
export const useDeleteV2DeleteAPreset = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteV2DeleteAPreset>>,
      TError,
      { presetId: string },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteV2DeleteAPreset>>,
  TError,
  { presetId: string },
  TContext
> => {
  const mutationOptions = getDeleteV2DeleteAPresetMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Execute a preset with the given graph and node input for the current user.
 * @summary Execute a preset
 */
export type postV2ExecuteAPresetResponse200 = {
  data: PostV2ExecuteAPreset200;
  status: 200;
};

export type postV2ExecuteAPresetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type postV2ExecuteAPresetResponseComposite =
  | postV2ExecuteAPresetResponse200
  | postV2ExecuteAPresetResponse422;

export type postV2ExecuteAPresetResponse =
  postV2ExecuteAPresetResponseComposite & {
    headers: Headers;
  };

export const getPostV2ExecuteAPresetUrl = (presetId: string) => {
  return `/api/library/presets/${presetId}/execute`;
};

export const postV2ExecuteAPreset = async (
  presetId: string,
  bodyPostV2ExecuteAPreset: BodyPostV2ExecuteAPreset,
  options?: RequestInit,
): Promise<postV2ExecuteAPresetResponse> => {
  return customMutator<postV2ExecuteAPresetResponse>(
    getPostV2ExecuteAPresetUrl(presetId),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(bodyPostV2ExecuteAPreset),
    },
  );
};

export const getPostV2ExecuteAPresetMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV2ExecuteAPreset>>,
    TError,
    { presetId: string; data: BodyPostV2ExecuteAPreset },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV2ExecuteAPreset>>,
  TError,
  { presetId: string; data: BodyPostV2ExecuteAPreset },
  TContext
> => {
  const mutationKey = ["postV2ExecuteAPreset"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV2ExecuteAPreset>>,
    { presetId: string; data: BodyPostV2ExecuteAPreset }
  > = (props) => {
    const { presetId, data } = props ?? {};

    return postV2ExecuteAPreset(presetId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV2ExecuteAPresetMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV2ExecuteAPreset>>
>;
export type PostV2ExecuteAPresetMutationBody = BodyPostV2ExecuteAPreset;
export type PostV2ExecuteAPresetMutationError = HTTPValidationError;

/**
 * @summary Execute a preset
 */
export const usePostV2ExecuteAPreset = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV2ExecuteAPreset>>,
      TError,
      { presetId: string; data: BodyPostV2ExecuteAPreset },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postV2ExecuteAPreset>>,
  TError,
  { presetId: string; data: BodyPostV2ExecuteAPreset },
  TContext
> => {
  const mutationOptions = getPostV2ExecuteAPresetMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
