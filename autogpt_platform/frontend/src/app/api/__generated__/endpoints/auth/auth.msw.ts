/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * AutoGPT Agent Server
 * This server is used to execute agents that are created by the AutoGPT system.
 * OpenAPI spec version: 0.1
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";

import type { HTTPValidationError } from "../../models/hTTPValidationError";

import type { NotificationPreference } from "../../models/notificationPreference";

import type { PostV1UpdateUserEmail200 } from "../../models/postV1UpdateUserEmail200";

export const getPostV1UpdateUserEmailResponseMock =
  (): PostV1UpdateUserEmail200 => ({
    [faker.string.alphanumeric(5)]: faker.string.alpha({
      length: { min: 10, max: 20 },
    }),
  });

export const getPostV1UpdateUserEmailResponseMock200 =
  (): PostV1UpdateUserEmail200 => ({
    [faker.string.alphanumeric(5)]: faker.string.alpha({
      length: { min: 10, max: 20 },
    }),
  });

export const getPostV1UpdateUserEmailResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV1GetNotificationPreferencesResponseMock = (
  overrideResponse: Partial<NotificationPreference> = {},
): NotificationPreference => ({
  user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  email: faker.internet.email(),
  preferences: faker.helpers.arrayElement([
    {
      [faker.string.alphanumeric(5)]: faker.datatype.boolean(),
    },
    undefined,
  ]),
  daily_limit: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    undefined,
  ]),
  emails_sent_today: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    undefined,
  ]),
  last_reset_date: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV1GetNotificationPreferencesResponseMock200 = (
  overrideResponse: Partial<NotificationPreference> = {},
): NotificationPreference => ({
  user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  email: faker.internet.email(),
  preferences: faker.helpers.arrayElement([
    {
      [faker.string.alphanumeric(5)]: faker.datatype.boolean(),
    },
    undefined,
  ]),
  daily_limit: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    undefined,
  ]),
  emails_sent_today: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    undefined,
  ]),
  last_reset_date: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostV1UpdateNotificationPreferencesResponseMock = (
  overrideResponse: Partial<NotificationPreference> = {},
): NotificationPreference => ({
  user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  email: faker.internet.email(),
  preferences: faker.helpers.arrayElement([
    {
      [faker.string.alphanumeric(5)]: faker.datatype.boolean(),
    },
    undefined,
  ]),
  daily_limit: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    undefined,
  ]),
  emails_sent_today: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    undefined,
  ]),
  last_reset_date: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostV1UpdateNotificationPreferencesResponseMock200 = (
  overrideResponse: Partial<NotificationPreference> = {},
): NotificationPreference => ({
  user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  email: faker.internet.email(),
  preferences: faker.helpers.arrayElement([
    {
      [faker.string.alphanumeric(5)]: faker.datatype.boolean(),
    },
    undefined,
  ]),
  daily_limit: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    undefined,
  ]),
  emails_sent_today: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    undefined,
  ]),
  last_reset_date: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostV1UpdateNotificationPreferencesResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostV1GetOrCreateUserMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post("*/api/auth/user", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getPostV1GetOrCreateUserMockHandler200 = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post("*/api/auth/user", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getPostV1UpdateUserEmailMockHandler = (
  overrideResponse?:
    | PostV1UpdateUserEmail200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<PostV1UpdateUserEmail200> | PostV1UpdateUserEmail200),
) => {
  return http.post("*/api/auth/user/email", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV1UpdateUserEmailResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV1UpdateUserEmailMockHandler200 = (
  overrideResponse?:
    | PostV1UpdateUserEmail200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<PostV1UpdateUserEmail200> | PostV1UpdateUserEmail200),
) => {
  return http.post("*/api/auth/user/email", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV1UpdateUserEmailResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV1UpdateUserEmailMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.post("*/api/auth/user/email", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV1UpdateUserEmailResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1GetNotificationPreferencesMockHandler = (
  overrideResponse?:
    | NotificationPreference
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<NotificationPreference> | NotificationPreference),
) => {
  return http.get("*/api/auth/user/preferences", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1GetNotificationPreferencesResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV1GetNotificationPreferencesMockHandler200 = (
  overrideResponse?:
    | NotificationPreference
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<NotificationPreference> | NotificationPreference),
) => {
  return http.get("*/api/auth/user/preferences", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV1GetNotificationPreferencesResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV1UpdateNotificationPreferencesMockHandler = (
  overrideResponse?:
    | NotificationPreference
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<NotificationPreference> | NotificationPreference),
) => {
  return http.post("*/api/auth/user/preferences", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV1UpdateNotificationPreferencesResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV1UpdateNotificationPreferencesMockHandler200 = (
  overrideResponse?:
    | NotificationPreference
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<NotificationPreference> | NotificationPreference),
) => {
  return http.post("*/api/auth/user/preferences", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV1UpdateNotificationPreferencesResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV1UpdateNotificationPreferencesMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.post("*/api/auth/user/preferences", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV1UpdateNotificationPreferencesResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getAuthMock = () => [
  getPostV1GetOrCreateUserMockHandler(),
  getPostV1UpdateUserEmailMockHandler(),
  getGetV1GetNotificationPreferencesMockHandler(),
  getPostV1UpdateNotificationPreferencesMockHandler(),
];
