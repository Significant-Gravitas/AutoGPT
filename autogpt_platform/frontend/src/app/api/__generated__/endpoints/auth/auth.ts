/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * AutoGPT Agent Server
 * This server is used to execute agents that are created by the AutoGPT system.
 * OpenAPI spec version: 0.1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { HTTPValidationError } from "../../models/hTTPValidationError";

import type { NotificationPreference } from "../../models/notificationPreference";

import type { NotificationPreferenceDTO } from "../../models/notificationPreferenceDTO";

import type { PostV1UpdateUserEmail200 } from "../../models/postV1UpdateUserEmail200";

import { customMutator } from "../../../mutators/custom-mutator";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Get or create user
 */
export type postV1GetOrCreateUserResponse200 = {
  data: unknown;
  status: 200;
};

export type postV1GetOrCreateUserResponseComposite =
  postV1GetOrCreateUserResponse200;

export type postV1GetOrCreateUserResponse =
  postV1GetOrCreateUserResponseComposite & {
    headers: Headers;
  };

export const getPostV1GetOrCreateUserUrl = () => {
  return `/api/auth/user`;
};

export const postV1GetOrCreateUser = async (
  options?: RequestInit,
): Promise<postV1GetOrCreateUserResponse> => {
  return customMutator<postV1GetOrCreateUserResponse>(
    getPostV1GetOrCreateUserUrl(),
    {
      ...options,
      method: "POST",
    },
  );
};

export const getPostV1GetOrCreateUserMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1GetOrCreateUser>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1GetOrCreateUser>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["postV1GetOrCreateUser"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1GetOrCreateUser>>,
    void
  > = () => {
    return postV1GetOrCreateUser(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1GetOrCreateUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1GetOrCreateUser>>
>;

export type PostV1GetOrCreateUserMutationError = unknown;

/**
 * @summary Get or create user
 */
export const usePostV1GetOrCreateUser = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1GetOrCreateUser>>,
      TError,
      void,
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postV1GetOrCreateUser>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostV1GetOrCreateUserMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Update user email
 */
export type postV1UpdateUserEmailResponse200 = {
  data: PostV1UpdateUserEmail200;
  status: 200;
};

export type postV1UpdateUserEmailResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type postV1UpdateUserEmailResponseComposite =
  | postV1UpdateUserEmailResponse200
  | postV1UpdateUserEmailResponse422;

export type postV1UpdateUserEmailResponse =
  postV1UpdateUserEmailResponseComposite & {
    headers: Headers;
  };

export const getPostV1UpdateUserEmailUrl = () => {
  return `/api/auth/user/email`;
};

export const postV1UpdateUserEmail = async (
  postV1UpdateUserEmailBody: string,
  options?: RequestInit,
): Promise<postV1UpdateUserEmailResponse> => {
  return customMutator<postV1UpdateUserEmailResponse>(
    getPostV1UpdateUserEmailUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(postV1UpdateUserEmailBody),
    },
  );
};

export const getPostV1UpdateUserEmailMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1UpdateUserEmail>>,
    TError,
    { data: string },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1UpdateUserEmail>>,
  TError,
  { data: string },
  TContext
> => {
  const mutationKey = ["postV1UpdateUserEmail"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1UpdateUserEmail>>,
    { data: string }
  > = (props) => {
    const { data } = props ?? {};

    return postV1UpdateUserEmail(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1UpdateUserEmailMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1UpdateUserEmail>>
>;
export type PostV1UpdateUserEmailMutationBody = string;
export type PostV1UpdateUserEmailMutationError = HTTPValidationError;

/**
 * @summary Update user email
 */
export const usePostV1UpdateUserEmail = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1UpdateUserEmail>>,
      TError,
      { data: string },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postV1UpdateUserEmail>>,
  TError,
  { data: string },
  TContext
> => {
  const mutationOptions = getPostV1UpdateUserEmailMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get notification preferences
 */
export type getV1GetNotificationPreferencesResponse200 = {
  data: NotificationPreference;
  status: 200;
};

export type getV1GetNotificationPreferencesResponseComposite =
  getV1GetNotificationPreferencesResponse200;

export type getV1GetNotificationPreferencesResponse =
  getV1GetNotificationPreferencesResponseComposite & {
    headers: Headers;
  };

export const getGetV1GetNotificationPreferencesUrl = () => {
  return `/api/auth/user/preferences`;
};

export const getV1GetNotificationPreferences = async (
  options?: RequestInit,
): Promise<getV1GetNotificationPreferencesResponse> => {
  return customMutator<getV1GetNotificationPreferencesResponse>(
    getGetV1GetNotificationPreferencesUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV1GetNotificationPreferencesQueryKey = () => {
  return [`/api/auth/user/preferences`] as const;
};

export const getGetV1GetNotificationPreferencesQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1GetNotificationPreferences>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getV1GetNotificationPreferences>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customMutator>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetV1GetNotificationPreferencesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV1GetNotificationPreferences>>
  > = ({ signal }) =>
    getV1GetNotificationPreferences({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1GetNotificationPreferences>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV1GetNotificationPreferencesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1GetNotificationPreferences>>
>;
export type GetV1GetNotificationPreferencesQueryError = unknown;

export function useGetV1GetNotificationPreferences<
  TData = Awaited<ReturnType<typeof getV1GetNotificationPreferences>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetNotificationPreferences>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1GetNotificationPreferences>>,
          TError,
          Awaited<ReturnType<typeof getV1GetNotificationPreferences>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1GetNotificationPreferences<
  TData = Awaited<ReturnType<typeof getV1GetNotificationPreferences>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetNotificationPreferences>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1GetNotificationPreferences>>,
          TError,
          Awaited<ReturnType<typeof getV1GetNotificationPreferences>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1GetNotificationPreferences<
  TData = Awaited<ReturnType<typeof getV1GetNotificationPreferences>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetNotificationPreferences>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get notification preferences
 */

export function useGetV1GetNotificationPreferences<
  TData = Awaited<ReturnType<typeof getV1GetNotificationPreferences>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetNotificationPreferences>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV1GetNotificationPreferencesQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Update notification preferences
 */
export type postV1UpdateNotificationPreferencesResponse200 = {
  data: NotificationPreference;
  status: 200;
};

export type postV1UpdateNotificationPreferencesResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type postV1UpdateNotificationPreferencesResponseComposite =
  | postV1UpdateNotificationPreferencesResponse200
  | postV1UpdateNotificationPreferencesResponse422;

export type postV1UpdateNotificationPreferencesResponse =
  postV1UpdateNotificationPreferencesResponseComposite & {
    headers: Headers;
  };

export const getPostV1UpdateNotificationPreferencesUrl = () => {
  return `/api/auth/user/preferences`;
};

export const postV1UpdateNotificationPreferences = async (
  notificationPreferenceDTO: NotificationPreferenceDTO,
  options?: RequestInit,
): Promise<postV1UpdateNotificationPreferencesResponse> => {
  return customMutator<postV1UpdateNotificationPreferencesResponse>(
    getPostV1UpdateNotificationPreferencesUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(notificationPreferenceDTO),
    },
  );
};

export const getPostV1UpdateNotificationPreferencesMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1UpdateNotificationPreferences>>,
    TError,
    { data: NotificationPreferenceDTO },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1UpdateNotificationPreferences>>,
  TError,
  { data: NotificationPreferenceDTO },
  TContext
> => {
  const mutationKey = ["postV1UpdateNotificationPreferences"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1UpdateNotificationPreferences>>,
    { data: NotificationPreferenceDTO }
  > = (props) => {
    const { data } = props ?? {};

    return postV1UpdateNotificationPreferences(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1UpdateNotificationPreferencesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1UpdateNotificationPreferences>>
>;
export type PostV1UpdateNotificationPreferencesMutationBody =
  NotificationPreferenceDTO;
export type PostV1UpdateNotificationPreferencesMutationError =
  HTTPValidationError;

/**
 * @summary Update notification preferences
 */
export const usePostV1UpdateNotificationPreferences = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1UpdateNotificationPreferences>>,
      TError,
      { data: NotificationPreferenceDTO },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postV1UpdateNotificationPreferences>>,
  TError,
  { data: NotificationPreferenceDTO },
  TContext
> => {
  const mutationOptions =
    getPostV1UpdateNotificationPreferencesMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
