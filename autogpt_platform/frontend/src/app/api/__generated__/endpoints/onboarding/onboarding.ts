/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * AutoGPT Agent Server
 * This server is used to execute agents that are created by the AutoGPT system.
 * OpenAPI spec version: 0.1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { HTTPValidationError } from "../../models/hTTPValidationError";

import type { UserOnboardingUpdate } from "../../models/userOnboardingUpdate";

import { customMutator } from "../../../mutators/custom-mutator";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Get onboarding status
 */
export type getV1GetOnboardingStatusResponse200 = {
  data: unknown;
  status: 200;
};

export type getV1GetOnboardingStatusResponseComposite =
  getV1GetOnboardingStatusResponse200;

export type getV1GetOnboardingStatusResponse =
  getV1GetOnboardingStatusResponseComposite & {
    headers: Headers;
  };

export const getGetV1GetOnboardingStatusUrl = () => {
  return `/api/onboarding`;
};

export const getV1GetOnboardingStatus = async (
  options?: RequestInit,
): Promise<getV1GetOnboardingStatusResponse> => {
  return customMutator<getV1GetOnboardingStatusResponse>(
    getGetV1GetOnboardingStatusUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV1GetOnboardingStatusQueryKey = () => {
  return [`/api/onboarding`] as const;
};

export const getGetV1GetOnboardingStatusQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1GetOnboardingStatus>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getV1GetOnboardingStatus>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customMutator>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetV1GetOnboardingStatusQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV1GetOnboardingStatus>>
  > = ({ signal }) => getV1GetOnboardingStatus({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1GetOnboardingStatus>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV1GetOnboardingStatusQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1GetOnboardingStatus>>
>;
export type GetV1GetOnboardingStatusQueryError = unknown;

export function useGetV1GetOnboardingStatus<
  TData = Awaited<ReturnType<typeof getV1GetOnboardingStatus>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetOnboardingStatus>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1GetOnboardingStatus>>,
          TError,
          Awaited<ReturnType<typeof getV1GetOnboardingStatus>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1GetOnboardingStatus<
  TData = Awaited<ReturnType<typeof getV1GetOnboardingStatus>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetOnboardingStatus>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1GetOnboardingStatus>>,
          TError,
          Awaited<ReturnType<typeof getV1GetOnboardingStatus>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1GetOnboardingStatus<
  TData = Awaited<ReturnType<typeof getV1GetOnboardingStatus>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetOnboardingStatus>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get onboarding status
 */

export function useGetV1GetOnboardingStatus<
  TData = Awaited<ReturnType<typeof getV1GetOnboardingStatus>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetOnboardingStatus>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV1GetOnboardingStatusQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Update onboarding progress
 */
export type patchV1UpdateOnboardingProgressResponse200 = {
  data: unknown;
  status: 200;
};

export type patchV1UpdateOnboardingProgressResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type patchV1UpdateOnboardingProgressResponseComposite =
  | patchV1UpdateOnboardingProgressResponse200
  | patchV1UpdateOnboardingProgressResponse422;

export type patchV1UpdateOnboardingProgressResponse =
  patchV1UpdateOnboardingProgressResponseComposite & {
    headers: Headers;
  };

export const getPatchV1UpdateOnboardingProgressUrl = () => {
  return `/api/onboarding`;
};

export const patchV1UpdateOnboardingProgress = async (
  userOnboardingUpdate: UserOnboardingUpdate,
  options?: RequestInit,
): Promise<patchV1UpdateOnboardingProgressResponse> => {
  return customMutator<patchV1UpdateOnboardingProgressResponse>(
    getPatchV1UpdateOnboardingProgressUrl(),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(userOnboardingUpdate),
    },
  );
};

export const getPatchV1UpdateOnboardingProgressMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchV1UpdateOnboardingProgress>>,
    TError,
    { data: UserOnboardingUpdate },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchV1UpdateOnboardingProgress>>,
  TError,
  { data: UserOnboardingUpdate },
  TContext
> => {
  const mutationKey = ["patchV1UpdateOnboardingProgress"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchV1UpdateOnboardingProgress>>,
    { data: UserOnboardingUpdate }
  > = (props) => {
    const { data } = props ?? {};

    return patchV1UpdateOnboardingProgress(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchV1UpdateOnboardingProgressMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchV1UpdateOnboardingProgress>>
>;
export type PatchV1UpdateOnboardingProgressMutationBody = UserOnboardingUpdate;
export type PatchV1UpdateOnboardingProgressMutationError = HTTPValidationError;

/**
 * @summary Update onboarding progress
 */
export const usePatchV1UpdateOnboardingProgress = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof patchV1UpdateOnboardingProgress>>,
      TError,
      { data: UserOnboardingUpdate },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof patchV1UpdateOnboardingProgress>>,
  TError,
  { data: UserOnboardingUpdate },
  TContext
> => {
  const mutationOptions =
    getPatchV1UpdateOnboardingProgressMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get recommended agents
 */
export type getV1GetRecommendedAgentsResponse200 = {
  data: unknown;
  status: 200;
};

export type getV1GetRecommendedAgentsResponseComposite =
  getV1GetRecommendedAgentsResponse200;

export type getV1GetRecommendedAgentsResponse =
  getV1GetRecommendedAgentsResponseComposite & {
    headers: Headers;
  };

export const getGetV1GetRecommendedAgentsUrl = () => {
  return `/api/onboarding/agents`;
};

export const getV1GetRecommendedAgents = async (
  options?: RequestInit,
): Promise<getV1GetRecommendedAgentsResponse> => {
  return customMutator<getV1GetRecommendedAgentsResponse>(
    getGetV1GetRecommendedAgentsUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV1GetRecommendedAgentsQueryKey = () => {
  return [`/api/onboarding/agents`] as const;
};

export const getGetV1GetRecommendedAgentsQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1GetRecommendedAgents>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getV1GetRecommendedAgents>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customMutator>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetV1GetRecommendedAgentsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV1GetRecommendedAgents>>
  > = ({ signal }) => getV1GetRecommendedAgents({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1GetRecommendedAgents>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV1GetRecommendedAgentsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1GetRecommendedAgents>>
>;
export type GetV1GetRecommendedAgentsQueryError = unknown;

export function useGetV1GetRecommendedAgents<
  TData = Awaited<ReturnType<typeof getV1GetRecommendedAgents>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetRecommendedAgents>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1GetRecommendedAgents>>,
          TError,
          Awaited<ReturnType<typeof getV1GetRecommendedAgents>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1GetRecommendedAgents<
  TData = Awaited<ReturnType<typeof getV1GetRecommendedAgents>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetRecommendedAgents>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1GetRecommendedAgents>>,
          TError,
          Awaited<ReturnType<typeof getV1GetRecommendedAgents>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1GetRecommendedAgents<
  TData = Awaited<ReturnType<typeof getV1GetRecommendedAgents>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetRecommendedAgents>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get recommended agents
 */

export function useGetV1GetRecommendedAgents<
  TData = Awaited<ReturnType<typeof getV1GetRecommendedAgents>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1GetRecommendedAgents>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV1GetRecommendedAgentsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Check onboarding enabled
 */
export type getV1CheckOnboardingEnabledResponse200 = {
  data: unknown;
  status: 200;
};

export type getV1CheckOnboardingEnabledResponseComposite =
  getV1CheckOnboardingEnabledResponse200;

export type getV1CheckOnboardingEnabledResponse =
  getV1CheckOnboardingEnabledResponseComposite & {
    headers: Headers;
  };

export const getGetV1CheckOnboardingEnabledUrl = () => {
  return `/api/onboarding/enabled`;
};

export const getV1CheckOnboardingEnabled = async (
  options?: RequestInit,
): Promise<getV1CheckOnboardingEnabledResponse> => {
  return customMutator<getV1CheckOnboardingEnabledResponse>(
    getGetV1CheckOnboardingEnabledUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV1CheckOnboardingEnabledQueryKey = () => {
  return [`/api/onboarding/enabled`] as const;
};

export const getGetV1CheckOnboardingEnabledQueryOptions = <
  TData = Awaited<ReturnType<typeof getV1CheckOnboardingEnabled>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getV1CheckOnboardingEnabled>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customMutator>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetV1CheckOnboardingEnabledQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV1CheckOnboardingEnabled>>
  > = ({ signal }) =>
    getV1CheckOnboardingEnabled({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV1CheckOnboardingEnabled>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV1CheckOnboardingEnabledQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1CheckOnboardingEnabled>>
>;
export type GetV1CheckOnboardingEnabledQueryError = unknown;

export function useGetV1CheckOnboardingEnabled<
  TData = Awaited<ReturnType<typeof getV1CheckOnboardingEnabled>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1CheckOnboardingEnabled>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1CheckOnboardingEnabled>>,
          TError,
          Awaited<ReturnType<typeof getV1CheckOnboardingEnabled>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1CheckOnboardingEnabled<
  TData = Awaited<ReturnType<typeof getV1CheckOnboardingEnabled>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1CheckOnboardingEnabled>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV1CheckOnboardingEnabled>>,
          TError,
          Awaited<ReturnType<typeof getV1CheckOnboardingEnabled>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV1CheckOnboardingEnabled<
  TData = Awaited<ReturnType<typeof getV1CheckOnboardingEnabled>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1CheckOnboardingEnabled>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Check onboarding enabled
 */

export function useGetV1CheckOnboardingEnabled<
  TData = Awaited<ReturnType<typeof getV1CheckOnboardingEnabled>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV1CheckOnboardingEnabled>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV1CheckOnboardingEnabledQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
