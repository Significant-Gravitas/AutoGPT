/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * AutoGPT Agent Server
 * This server is used to execute agents that are created by the AutoGPT system.
 * OpenAPI spec version: 0.1
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";

import type { ApiResponse } from "../../models/apiResponse";

import type { HTTPValidationError } from "../../models/hTTPValidationError";

export const getPostV2ProxyOttoChatRequestResponseMock = (
  overrideResponse: Partial<ApiResponse> = {},
): ApiResponse => ({
  answer: faker.string.alpha({ length: { min: 10, max: 20 } }),
  documents: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    url: faker.string.alpha({ length: { min: 10, max: 20 } }),
    relevance_score: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
  })),
  success: faker.datatype.boolean(),
  ...overrideResponse,
});

export const getPostV2ProxyOttoChatRequestResponseMock200 = (
  overrideResponse: Partial<ApiResponse> = {},
): ApiResponse => ({
  answer: faker.string.alpha({ length: { min: 10, max: 20 } }),
  documents: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    url: faker.string.alpha({ length: { min: 10, max: 20 } }),
    relevance_score: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
  })),
  success: faker.datatype.boolean(),
  ...overrideResponse,
});

export const getPostV2ProxyOttoChatRequestResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostV2ProxyOttoChatRequestMockHandler = (
  overrideResponse?:
    | ApiResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ApiResponse> | ApiResponse),
) => {
  return http.post("*/api/otto/ask", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV2ProxyOttoChatRequestResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV2ProxyOttoChatRequestMockHandler200 = (
  overrideResponse?:
    | ApiResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ApiResponse> | ApiResponse),
) => {
  return http.post("*/api/otto/ask", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV2ProxyOttoChatRequestResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV2ProxyOttoChatRequestMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.post("*/api/otto/ask", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV2ProxyOttoChatRequestResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getOttoMock = () => [getPostV2ProxyOttoChatRequestMockHandler()];
