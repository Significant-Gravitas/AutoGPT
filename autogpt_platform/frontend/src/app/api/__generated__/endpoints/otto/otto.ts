/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * AutoGPT Agent Server
 * This server is used to execute agents that are created by the AutoGPT system.
 * OpenAPI spec version: 0.1
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";

import type { ApiResponse } from "../../models/apiResponse";

import type { ChatRequest } from "../../models/chatRequest";

import type { HTTPValidationError } from "../../models/hTTPValidationError";

import { customMutator } from "../../../mutators/custom-mutator";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Proxy requests to Otto API while adding necessary security headers and logging.
Requires an authenticated user.
 * @summary Proxy Otto Chat Request
 */
export type postV2ProxyOttoChatRequestResponse200 = {
  data: ApiResponse;
  status: 200;
};

export type postV2ProxyOttoChatRequestResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type postV2ProxyOttoChatRequestResponseComposite =
  | postV2ProxyOttoChatRequestResponse200
  | postV2ProxyOttoChatRequestResponse422;

export type postV2ProxyOttoChatRequestResponse =
  postV2ProxyOttoChatRequestResponseComposite & {
    headers: Headers;
  };

export const getPostV2ProxyOttoChatRequestUrl = () => {
  return `/api/otto/ask`;
};

export const postV2ProxyOttoChatRequest = async (
  chatRequest: ChatRequest,
  options?: RequestInit,
): Promise<postV2ProxyOttoChatRequestResponse> => {
  return customMutator<postV2ProxyOttoChatRequestResponse>(
    getPostV2ProxyOttoChatRequestUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(chatRequest),
    },
  );
};

export const getPostV2ProxyOttoChatRequestMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV2ProxyOttoChatRequest>>,
    TError,
    { data: ChatRequest },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV2ProxyOttoChatRequest>>,
  TError,
  { data: ChatRequest },
  TContext
> => {
  const mutationKey = ["postV2ProxyOttoChatRequest"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV2ProxyOttoChatRequest>>,
    { data: ChatRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postV2ProxyOttoChatRequest(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV2ProxyOttoChatRequestMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV2ProxyOttoChatRequest>>
>;
export type PostV2ProxyOttoChatRequestMutationBody = ChatRequest;
export type PostV2ProxyOttoChatRequestMutationError = HTTPValidationError;

/**
 * @summary Proxy Otto Chat Request
 */
export const usePostV2ProxyOttoChatRequest = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV2ProxyOttoChatRequest>>,
      TError,
      { data: ChatRequest },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postV2ProxyOttoChatRequest>>,
  TError,
  { data: ChatRequest },
  TContext
> => {
  const mutationOptions = getPostV2ProxyOttoChatRequestMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
