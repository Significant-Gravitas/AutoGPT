/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * AutoGPT Agent Server
 * This server is used to execute agents that are created by the AutoGPT system.
 * OpenAPI spec version: 0.1
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { BodyPostV2AddMarketplaceAgent } from "../../models/bodyPostV2AddMarketplaceAgent";

import type { GetV2GetAgentByStoreId200 } from "../../models/getV2GetAgentByStoreId200";

import type { GetV2GetLibraryAgentByGraphIdParams } from "../../models/getV2GetLibraryAgentByGraphIdParams";

import type { GetV2ListLibraryAgentsParams } from "../../models/getV2ListLibraryAgentsParams";

import type { HTTPValidationError } from "../../models/hTTPValidationError";

import type { LibraryAgent } from "../../models/libraryAgent";

import type { LibraryAgentPreset } from "../../models/libraryAgentPreset";

import type { LibraryAgentResponse } from "../../models/libraryAgentResponse";

import type { LibraryAgentUpdateRequest } from "../../models/libraryAgentUpdateRequest";

import type { TriggeredPresetSetupParams } from "../../models/triggeredPresetSetupParams";

import { customMutator } from "../../../mutators/custom-mutator";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Get all agents in the user's library (both created and saved).

Args:
    user_id: ID of the authenticated user.
    search_term: Optional search term to filter agents by name/description.
    filter_by: List of filters to apply (favorites, created by user).
    sort_by: List of sorting criteria (created date, updated date).
    page: Page number to retrieve.
    page_size: Number of agents per page.

Returns:
    A LibraryAgentResponse containing agents and pagination metadata.

Raises:
    HTTPException: If a server/database error occurs.
 * @summary List Library Agents
 */
export type getV2ListLibraryAgentsResponse200 = {
  data: LibraryAgentResponse;
  status: 200;
};

export type getV2ListLibraryAgentsResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type getV2ListLibraryAgentsResponseComposite =
  | getV2ListLibraryAgentsResponse200
  | getV2ListLibraryAgentsResponse422;

export type getV2ListLibraryAgentsResponse =
  getV2ListLibraryAgentsResponseComposite & {
    headers: Headers;
  };

export const getGetV2ListLibraryAgentsUrl = (
  params?: GetV2ListLibraryAgentsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/library/agents?${stringifiedParams}`
    : `/api/library/agents`;
};

export const getV2ListLibraryAgents = async (
  params?: GetV2ListLibraryAgentsParams,
  options?: RequestInit,
): Promise<getV2ListLibraryAgentsResponse> => {
  return customMutator<getV2ListLibraryAgentsResponse>(
    getGetV2ListLibraryAgentsUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV2ListLibraryAgentsQueryKey = (
  params?: GetV2ListLibraryAgentsParams,
) => {
  return [`/api/library/agents`, ...(params ? [params] : [])] as const;
};

export const getGetV2ListLibraryAgentsInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof getV2ListLibraryAgents>>,
    GetV2ListLibraryAgentsParams["page"]
  >,
  TError = HTTPValidationError,
>(
  params?: GetV2ListLibraryAgentsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getV2ListLibraryAgents>>,
        TError,
        TData,
        QueryKey,
        GetV2ListLibraryAgentsParams["page"]
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetV2ListLibraryAgentsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV2ListLibraryAgents>>,
    QueryKey,
    GetV2ListLibraryAgentsParams["page"]
  > = ({ signal, pageParam }) =>
    getV2ListLibraryAgents(
      { ...params, page: pageParam || params?.["page"] },
      { signal, ...requestOptions },
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getV2ListLibraryAgents>>,
    TError,
    TData,
    QueryKey,
    GetV2ListLibraryAgentsParams["page"]
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV2ListLibraryAgentsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV2ListLibraryAgents>>
>;
export type GetV2ListLibraryAgentsInfiniteQueryError = HTTPValidationError;

export function useGetV2ListLibraryAgentsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getV2ListLibraryAgents>>,
    GetV2ListLibraryAgentsParams["page"]
  >,
  TError = HTTPValidationError,
>(
  params: undefined | GetV2ListLibraryAgentsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getV2ListLibraryAgents>>,
        TError,
        TData,
        QueryKey,
        GetV2ListLibraryAgentsParams["page"]
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2ListLibraryAgents>>,
          TError,
          Awaited<ReturnType<typeof getV2ListLibraryAgents>>,
          QueryKey
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2ListLibraryAgentsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getV2ListLibraryAgents>>,
    GetV2ListLibraryAgentsParams["page"]
  >,
  TError = HTTPValidationError,
>(
  params?: GetV2ListLibraryAgentsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getV2ListLibraryAgents>>,
        TError,
        TData,
        QueryKey,
        GetV2ListLibraryAgentsParams["page"]
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2ListLibraryAgents>>,
          TError,
          Awaited<ReturnType<typeof getV2ListLibraryAgents>>,
          QueryKey
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2ListLibraryAgentsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getV2ListLibraryAgents>>,
    GetV2ListLibraryAgentsParams["page"]
  >,
  TError = HTTPValidationError,
>(
  params?: GetV2ListLibraryAgentsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getV2ListLibraryAgents>>,
        TError,
        TData,
        QueryKey,
        GetV2ListLibraryAgentsParams["page"]
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List Library Agents
 */

export function useGetV2ListLibraryAgentsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getV2ListLibraryAgents>>,
    GetV2ListLibraryAgentsParams["page"]
  >,
  TError = HTTPValidationError,
>(
  params?: GetV2ListLibraryAgentsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getV2ListLibraryAgents>>,
        TError,
        TData,
        QueryKey,
        GetV2ListLibraryAgentsParams["page"]
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV2ListLibraryAgentsInfiniteQueryOptions(
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetV2ListLibraryAgentsQueryOptions = <
  TData = Awaited<ReturnType<typeof getV2ListLibraryAgents>>,
  TError = HTTPValidationError,
>(
  params?: GetV2ListLibraryAgentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2ListLibraryAgents>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetV2ListLibraryAgentsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV2ListLibraryAgents>>
  > = ({ signal }) =>
    getV2ListLibraryAgents(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV2ListLibraryAgents>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV2ListLibraryAgentsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV2ListLibraryAgents>>
>;
export type GetV2ListLibraryAgentsQueryError = HTTPValidationError;

export function useGetV2ListLibraryAgents<
  TData = Awaited<ReturnType<typeof getV2ListLibraryAgents>>,
  TError = HTTPValidationError,
>(
  params: undefined | GetV2ListLibraryAgentsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2ListLibraryAgents>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2ListLibraryAgents>>,
          TError,
          Awaited<ReturnType<typeof getV2ListLibraryAgents>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2ListLibraryAgents<
  TData = Awaited<ReturnType<typeof getV2ListLibraryAgents>>,
  TError = HTTPValidationError,
>(
  params?: GetV2ListLibraryAgentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2ListLibraryAgents>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2ListLibraryAgents>>,
          TError,
          Awaited<ReturnType<typeof getV2ListLibraryAgents>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2ListLibraryAgents<
  TData = Awaited<ReturnType<typeof getV2ListLibraryAgents>>,
  TError = HTTPValidationError,
>(
  params?: GetV2ListLibraryAgentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2ListLibraryAgents>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List Library Agents
 */

export function useGetV2ListLibraryAgents<
  TData = Awaited<ReturnType<typeof getV2ListLibraryAgents>>,
  TError = HTTPValidationError,
>(
  params?: GetV2ListLibraryAgentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2ListLibraryAgents>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV2ListLibraryAgentsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Add an agent from the marketplace to the user's library.

Args:
    store_listing_version_id: ID of the store listing version to add.
    user_id: ID of the authenticated user.

Returns:
    library_model.LibraryAgent: Agent added to the library

Raises:
    HTTPException(404): If the listing version is not found.
    HTTPException(500): If a server/database error occurs.
 * @summary Add Marketplace Agent
 */
export type postV2AddMarketplaceAgentResponse201 = {
  data: LibraryAgent;
  status: 201;
};

export type postV2AddMarketplaceAgentResponse404 = {
  data: void;
  status: 404;
};

export type postV2AddMarketplaceAgentResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type postV2AddMarketplaceAgentResponseComposite =
  | postV2AddMarketplaceAgentResponse201
  | postV2AddMarketplaceAgentResponse404
  | postV2AddMarketplaceAgentResponse422;

export type postV2AddMarketplaceAgentResponse =
  postV2AddMarketplaceAgentResponseComposite & {
    headers: Headers;
  };

export const getPostV2AddMarketplaceAgentUrl = () => {
  return `/api/library/agents`;
};

export const postV2AddMarketplaceAgent = async (
  bodyPostV2AddMarketplaceAgent: BodyPostV2AddMarketplaceAgent,
  options?: RequestInit,
): Promise<postV2AddMarketplaceAgentResponse> => {
  return customMutator<postV2AddMarketplaceAgentResponse>(
    getPostV2AddMarketplaceAgentUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(bodyPostV2AddMarketplaceAgent),
    },
  );
};

export const getPostV2AddMarketplaceAgentMutationOptions = <
  TError = void | HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV2AddMarketplaceAgent>>,
    TError,
    { data: BodyPostV2AddMarketplaceAgent },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV2AddMarketplaceAgent>>,
  TError,
  { data: BodyPostV2AddMarketplaceAgent },
  TContext
> => {
  const mutationKey = ["postV2AddMarketplaceAgent"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV2AddMarketplaceAgent>>,
    { data: BodyPostV2AddMarketplaceAgent }
  > = (props) => {
    const { data } = props ?? {};

    return postV2AddMarketplaceAgent(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV2AddMarketplaceAgentMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV2AddMarketplaceAgent>>
>;
export type PostV2AddMarketplaceAgentMutationBody =
  BodyPostV2AddMarketplaceAgent;
export type PostV2AddMarketplaceAgentMutationError = void | HTTPValidationError;

/**
 * @summary Add Marketplace Agent
 */
export const usePostV2AddMarketplaceAgent = <
  TError = void | HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV2AddMarketplaceAgent>>,
      TError,
      { data: BodyPostV2AddMarketplaceAgent },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postV2AddMarketplaceAgent>>,
  TError,
  { data: BodyPostV2AddMarketplaceAgent },
  TContext
> => {
  const mutationOptions = getPostV2AddMarketplaceAgentMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get Library Agent
 */
export type getV2GetLibraryAgentResponse200 = {
  data: LibraryAgent;
  status: 200;
};

export type getV2GetLibraryAgentResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type getV2GetLibraryAgentResponseComposite =
  | getV2GetLibraryAgentResponse200
  | getV2GetLibraryAgentResponse422;

export type getV2GetLibraryAgentResponse =
  getV2GetLibraryAgentResponseComposite & {
    headers: Headers;
  };

export const getGetV2GetLibraryAgentUrl = (libraryAgentId: string) => {
  return `/api/library/agents/${libraryAgentId}`;
};

export const getV2GetLibraryAgent = async (
  libraryAgentId: string,
  options?: RequestInit,
): Promise<getV2GetLibraryAgentResponse> => {
  return customMutator<getV2GetLibraryAgentResponse>(
    getGetV2GetLibraryAgentUrl(libraryAgentId),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV2GetLibraryAgentQueryKey = (libraryAgentId: string) => {
  return [`/api/library/agents/${libraryAgentId}`] as const;
};

export const getGetV2GetLibraryAgentQueryOptions = <
  TData = Awaited<ReturnType<typeof getV2GetLibraryAgent>>,
  TError = HTTPValidationError,
>(
  libraryAgentId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetLibraryAgent>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetV2GetLibraryAgentQueryKey(libraryAgentId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV2GetLibraryAgent>>
  > = ({ signal }) =>
    getV2GetLibraryAgent(libraryAgentId, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!libraryAgentId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getV2GetLibraryAgent>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV2GetLibraryAgentQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV2GetLibraryAgent>>
>;
export type GetV2GetLibraryAgentQueryError = HTTPValidationError;

export function useGetV2GetLibraryAgent<
  TData = Awaited<ReturnType<typeof getV2GetLibraryAgent>>,
  TError = HTTPValidationError,
>(
  libraryAgentId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetLibraryAgent>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2GetLibraryAgent>>,
          TError,
          Awaited<ReturnType<typeof getV2GetLibraryAgent>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2GetLibraryAgent<
  TData = Awaited<ReturnType<typeof getV2GetLibraryAgent>>,
  TError = HTTPValidationError,
>(
  libraryAgentId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetLibraryAgent>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2GetLibraryAgent>>,
          TError,
          Awaited<ReturnType<typeof getV2GetLibraryAgent>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2GetLibraryAgent<
  TData = Awaited<ReturnType<typeof getV2GetLibraryAgent>>,
  TError = HTTPValidationError,
>(
  libraryAgentId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetLibraryAgent>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Library Agent
 */

export function useGetV2GetLibraryAgent<
  TData = Awaited<ReturnType<typeof getV2GetLibraryAgent>>,
  TError = HTTPValidationError,
>(
  libraryAgentId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetLibraryAgent>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV2GetLibraryAgentQueryOptions(
    libraryAgentId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update the library agent with the given fields.

Args:
    library_agent_id: ID of the library agent to update.
    payload: Fields to update (auto_update_version, is_favorite, etc.).
    user_id: ID of the authenticated user.

Raises:
    HTTPException(500): If a server/database error occurs.
 * @summary Update Library Agent
 */
export type patchV2UpdateLibraryAgentResponse200 = {
  data: LibraryAgent;
  status: 200;
};

export type patchV2UpdateLibraryAgentResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type patchV2UpdateLibraryAgentResponse500 = {
  data: void;
  status: 500;
};

export type patchV2UpdateLibraryAgentResponseComposite =
  | patchV2UpdateLibraryAgentResponse200
  | patchV2UpdateLibraryAgentResponse422
  | patchV2UpdateLibraryAgentResponse500;

export type patchV2UpdateLibraryAgentResponse =
  patchV2UpdateLibraryAgentResponseComposite & {
    headers: Headers;
  };

export const getPatchV2UpdateLibraryAgentUrl = (libraryAgentId: string) => {
  return `/api/library/agents/${libraryAgentId}`;
};

export const patchV2UpdateLibraryAgent = async (
  libraryAgentId: string,
  libraryAgentUpdateRequest: LibraryAgentUpdateRequest,
  options?: RequestInit,
): Promise<patchV2UpdateLibraryAgentResponse> => {
  return customMutator<patchV2UpdateLibraryAgentResponse>(
    getPatchV2UpdateLibraryAgentUrl(libraryAgentId),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(libraryAgentUpdateRequest),
    },
  );
};

export const getPatchV2UpdateLibraryAgentMutationOptions = <
  TError = HTTPValidationError | void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchV2UpdateLibraryAgent>>,
    TError,
    { libraryAgentId: string; data: LibraryAgentUpdateRequest },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchV2UpdateLibraryAgent>>,
  TError,
  { libraryAgentId: string; data: LibraryAgentUpdateRequest },
  TContext
> => {
  const mutationKey = ["patchV2UpdateLibraryAgent"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchV2UpdateLibraryAgent>>,
    { libraryAgentId: string; data: LibraryAgentUpdateRequest }
  > = (props) => {
    const { libraryAgentId, data } = props ?? {};

    return patchV2UpdateLibraryAgent(libraryAgentId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchV2UpdateLibraryAgentMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchV2UpdateLibraryAgent>>
>;
export type PatchV2UpdateLibraryAgentMutationBody = LibraryAgentUpdateRequest;
export type PatchV2UpdateLibraryAgentMutationError = HTTPValidationError | void;

/**
 * @summary Update Library Agent
 */
export const usePatchV2UpdateLibraryAgent = <
  TError = HTTPValidationError | void,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof patchV2UpdateLibraryAgent>>,
      TError,
      { libraryAgentId: string; data: LibraryAgentUpdateRequest },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof patchV2UpdateLibraryAgent>>,
  TError,
  { libraryAgentId: string; data: LibraryAgentUpdateRequest },
  TContext
> => {
  const mutationOptions = getPatchV2UpdateLibraryAgentMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Soft-delete the specified library agent.

Args:
    library_agent_id: ID of the library agent to delete.
    user_id: ID of the authenticated user.

Returns:
    204 No Content if successful.

Raises:
    HTTPException(404): If the agent does not exist.
    HTTPException(500): If a server/database error occurs.
 * @summary Delete Library Agent
 */
export type deleteV2DeleteLibraryAgentResponse200 = {
  data: unknown;
  status: 200;
};

export type deleteV2DeleteLibraryAgentResponse204 = {
  data: void;
  status: 204;
};

export type deleteV2DeleteLibraryAgentResponse404 = {
  data: void;
  status: 404;
};

export type deleteV2DeleteLibraryAgentResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type deleteV2DeleteLibraryAgentResponseComposite =
  | deleteV2DeleteLibraryAgentResponse200
  | deleteV2DeleteLibraryAgentResponse204
  | deleteV2DeleteLibraryAgentResponse404
  | deleteV2DeleteLibraryAgentResponse422;

export type deleteV2DeleteLibraryAgentResponse =
  deleteV2DeleteLibraryAgentResponseComposite & {
    headers: Headers;
  };

export const getDeleteV2DeleteLibraryAgentUrl = (libraryAgentId: string) => {
  return `/api/library/agents/${libraryAgentId}`;
};

export const deleteV2DeleteLibraryAgent = async (
  libraryAgentId: string,
  options?: RequestInit,
): Promise<deleteV2DeleteLibraryAgentResponse> => {
  return customMutator<deleteV2DeleteLibraryAgentResponse>(
    getDeleteV2DeleteLibraryAgentUrl(libraryAgentId),
    {
      ...options,
      method: "DELETE",
    },
  );
};

export const getDeleteV2DeleteLibraryAgentMutationOptions = <
  TError = void | HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteV2DeleteLibraryAgent>>,
    TError,
    { libraryAgentId: string },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteV2DeleteLibraryAgent>>,
  TError,
  { libraryAgentId: string },
  TContext
> => {
  const mutationKey = ["deleteV2DeleteLibraryAgent"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteV2DeleteLibraryAgent>>,
    { libraryAgentId: string }
  > = (props) => {
    const { libraryAgentId } = props ?? {};

    return deleteV2DeleteLibraryAgent(libraryAgentId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteV2DeleteLibraryAgentMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteV2DeleteLibraryAgent>>
>;

export type DeleteV2DeleteLibraryAgentMutationError =
  void | HTTPValidationError;

/**
 * @summary Delete Library Agent
 */
export const useDeleteV2DeleteLibraryAgent = <
  TError = void | HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteV2DeleteLibraryAgent>>,
      TError,
      { libraryAgentId: string },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteV2DeleteLibraryAgent>>,
  TError,
  { libraryAgentId: string },
  TContext
> => {
  const mutationOptions = getDeleteV2DeleteLibraryAgentMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get Library Agent By Graph Id
 */
export type getV2GetLibraryAgentByGraphIdResponse200 = {
  data: LibraryAgent;
  status: 200;
};

export type getV2GetLibraryAgentByGraphIdResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type getV2GetLibraryAgentByGraphIdResponseComposite =
  | getV2GetLibraryAgentByGraphIdResponse200
  | getV2GetLibraryAgentByGraphIdResponse422;

export type getV2GetLibraryAgentByGraphIdResponse =
  getV2GetLibraryAgentByGraphIdResponseComposite & {
    headers: Headers;
  };

export const getGetV2GetLibraryAgentByGraphIdUrl = (
  graphId: string,
  params?: GetV2GetLibraryAgentByGraphIdParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/library/agents/by-graph/${graphId}?${stringifiedParams}`
    : `/api/library/agents/by-graph/${graphId}`;
};

export const getV2GetLibraryAgentByGraphId = async (
  graphId: string,
  params?: GetV2GetLibraryAgentByGraphIdParams,
  options?: RequestInit,
): Promise<getV2GetLibraryAgentByGraphIdResponse> => {
  return customMutator<getV2GetLibraryAgentByGraphIdResponse>(
    getGetV2GetLibraryAgentByGraphIdUrl(graphId, params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV2GetLibraryAgentByGraphIdQueryKey = (
  graphId: string,
  params?: GetV2GetLibraryAgentByGraphIdParams,
) => {
  return [
    `/api/library/agents/by-graph/${graphId}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetV2GetLibraryAgentByGraphIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getV2GetLibraryAgentByGraphId>>,
  TError = HTTPValidationError,
>(
  graphId: string,
  params?: GetV2GetLibraryAgentByGraphIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetLibraryAgentByGraphId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetV2GetLibraryAgentByGraphIdQueryKey(graphId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV2GetLibraryAgentByGraphId>>
  > = ({ signal }) =>
    getV2GetLibraryAgentByGraphId(graphId, params, {
      signal,
      ...requestOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!graphId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getV2GetLibraryAgentByGraphId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV2GetLibraryAgentByGraphIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV2GetLibraryAgentByGraphId>>
>;
export type GetV2GetLibraryAgentByGraphIdQueryError = HTTPValidationError;

export function useGetV2GetLibraryAgentByGraphId<
  TData = Awaited<ReturnType<typeof getV2GetLibraryAgentByGraphId>>,
  TError = HTTPValidationError,
>(
  graphId: string,
  params: undefined | GetV2GetLibraryAgentByGraphIdParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetLibraryAgentByGraphId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2GetLibraryAgentByGraphId>>,
          TError,
          Awaited<ReturnType<typeof getV2GetLibraryAgentByGraphId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2GetLibraryAgentByGraphId<
  TData = Awaited<ReturnType<typeof getV2GetLibraryAgentByGraphId>>,
  TError = HTTPValidationError,
>(
  graphId: string,
  params?: GetV2GetLibraryAgentByGraphIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetLibraryAgentByGraphId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2GetLibraryAgentByGraphId>>,
          TError,
          Awaited<ReturnType<typeof getV2GetLibraryAgentByGraphId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2GetLibraryAgentByGraphId<
  TData = Awaited<ReturnType<typeof getV2GetLibraryAgentByGraphId>>,
  TError = HTTPValidationError,
>(
  graphId: string,
  params?: GetV2GetLibraryAgentByGraphIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetLibraryAgentByGraphId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Library Agent By Graph Id
 */

export function useGetV2GetLibraryAgentByGraphId<
  TData = Awaited<ReturnType<typeof getV2GetLibraryAgentByGraphId>>,
  TError = HTTPValidationError,
>(
  graphId: string,
  params?: GetV2GetLibraryAgentByGraphIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetLibraryAgentByGraphId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV2GetLibraryAgentByGraphIdQueryOptions(
    graphId,
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get Library Agent from Store Listing Version ID.
 * @summary Get Agent By Store ID
 */
export type getV2GetAgentByStoreIdResponse200 = {
  data: GetV2GetAgentByStoreId200;
  status: 200;
};

export type getV2GetAgentByStoreIdResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type getV2GetAgentByStoreIdResponseComposite =
  | getV2GetAgentByStoreIdResponse200
  | getV2GetAgentByStoreIdResponse422;

export type getV2GetAgentByStoreIdResponse =
  getV2GetAgentByStoreIdResponseComposite & {
    headers: Headers;
  };

export const getGetV2GetAgentByStoreIdUrl = (storeListingVersionId: string) => {
  return `/api/library/agents/marketplace/${storeListingVersionId}`;
};

export const getV2GetAgentByStoreId = async (
  storeListingVersionId: string,
  options?: RequestInit,
): Promise<getV2GetAgentByStoreIdResponse> => {
  return customMutator<getV2GetAgentByStoreIdResponse>(
    getGetV2GetAgentByStoreIdUrl(storeListingVersionId),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV2GetAgentByStoreIdQueryKey = (
  storeListingVersionId: string,
) => {
  return [`/api/library/agents/marketplace/${storeListingVersionId}`] as const;
};

export const getGetV2GetAgentByStoreIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getV2GetAgentByStoreId>>,
  TError = HTTPValidationError,
>(
  storeListingVersionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetAgentByStoreId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetV2GetAgentByStoreIdQueryKey(storeListingVersionId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV2GetAgentByStoreId>>
  > = ({ signal }) =>
    getV2GetAgentByStoreId(storeListingVersionId, {
      signal,
      ...requestOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!storeListingVersionId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getV2GetAgentByStoreId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV2GetAgentByStoreIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV2GetAgentByStoreId>>
>;
export type GetV2GetAgentByStoreIdQueryError = HTTPValidationError;

export function useGetV2GetAgentByStoreId<
  TData = Awaited<ReturnType<typeof getV2GetAgentByStoreId>>,
  TError = HTTPValidationError,
>(
  storeListingVersionId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetAgentByStoreId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2GetAgentByStoreId>>,
          TError,
          Awaited<ReturnType<typeof getV2GetAgentByStoreId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2GetAgentByStoreId<
  TData = Awaited<ReturnType<typeof getV2GetAgentByStoreId>>,
  TError = HTTPValidationError,
>(
  storeListingVersionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetAgentByStoreId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2GetAgentByStoreId>>,
          TError,
          Awaited<ReturnType<typeof getV2GetAgentByStoreId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2GetAgentByStoreId<
  TData = Awaited<ReturnType<typeof getV2GetAgentByStoreId>>,
  TError = HTTPValidationError,
>(
  storeListingVersionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetAgentByStoreId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Agent By Store ID
 */

export function useGetV2GetAgentByStoreId<
  TData = Awaited<ReturnType<typeof getV2GetAgentByStoreId>>,
  TError = HTTPValidationError,
>(
  storeListingVersionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetAgentByStoreId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV2GetAgentByStoreIdQueryOptions(
    storeListingVersionId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Fork Library Agent
 */
export type postV2ForkLibraryAgentResponse200 = {
  data: LibraryAgent;
  status: 200;
};

export type postV2ForkLibraryAgentResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type postV2ForkLibraryAgentResponseComposite =
  | postV2ForkLibraryAgentResponse200
  | postV2ForkLibraryAgentResponse422;

export type postV2ForkLibraryAgentResponse =
  postV2ForkLibraryAgentResponseComposite & {
    headers: Headers;
  };

export const getPostV2ForkLibraryAgentUrl = (libraryAgentId: string) => {
  return `/api/library/agents/${libraryAgentId}/fork`;
};

export const postV2ForkLibraryAgent = async (
  libraryAgentId: string,
  options?: RequestInit,
): Promise<postV2ForkLibraryAgentResponse> => {
  return customMutator<postV2ForkLibraryAgentResponse>(
    getPostV2ForkLibraryAgentUrl(libraryAgentId),
    {
      ...options,
      method: "POST",
    },
  );
};

export const getPostV2ForkLibraryAgentMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV2ForkLibraryAgent>>,
    TError,
    { libraryAgentId: string },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV2ForkLibraryAgent>>,
  TError,
  { libraryAgentId: string },
  TContext
> => {
  const mutationKey = ["postV2ForkLibraryAgent"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV2ForkLibraryAgent>>,
    { libraryAgentId: string }
  > = (props) => {
    const { libraryAgentId } = props ?? {};

    return postV2ForkLibraryAgent(libraryAgentId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV2ForkLibraryAgentMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV2ForkLibraryAgent>>
>;

export type PostV2ForkLibraryAgentMutationError = HTTPValidationError;

/**
 * @summary Fork Library Agent
 */
export const usePostV2ForkLibraryAgent = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV2ForkLibraryAgent>>,
      TError,
      { libraryAgentId: string },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postV2ForkLibraryAgent>>,
  TError,
  { libraryAgentId: string },
  TContext
> => {
  const mutationOptions = getPostV2ForkLibraryAgentMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Sets up a webhook-triggered `LibraryAgentPreset` for a `LibraryAgent`.
Returns the correspondingly created `LibraryAgentPreset` with `webhook_id` set.
 * @summary Setup Trigger
 */
export type postV2SetupTriggerResponse200 = {
  data: LibraryAgentPreset;
  status: 200;
};

export type postV2SetupTriggerResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type postV2SetupTriggerResponseComposite =
  | postV2SetupTriggerResponse200
  | postV2SetupTriggerResponse422;

export type postV2SetupTriggerResponse = postV2SetupTriggerResponseComposite & {
  headers: Headers;
};

export const getPostV2SetupTriggerUrl = (libraryAgentId: string) => {
  return `/api/library/agents/${libraryAgentId}/setup-trigger`;
};

export const postV2SetupTrigger = async (
  libraryAgentId: string,
  triggeredPresetSetupParams: TriggeredPresetSetupParams,
  options?: RequestInit,
): Promise<postV2SetupTriggerResponse> => {
  return customMutator<postV2SetupTriggerResponse>(
    getPostV2SetupTriggerUrl(libraryAgentId),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(triggeredPresetSetupParams),
    },
  );
};

export const getPostV2SetupTriggerMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV2SetupTrigger>>,
    TError,
    { libraryAgentId: string; data: TriggeredPresetSetupParams },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV2SetupTrigger>>,
  TError,
  { libraryAgentId: string; data: TriggeredPresetSetupParams },
  TContext
> => {
  const mutationKey = ["postV2SetupTrigger"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV2SetupTrigger>>,
    { libraryAgentId: string; data: TriggeredPresetSetupParams }
  > = (props) => {
    const { libraryAgentId, data } = props ?? {};

    return postV2SetupTrigger(libraryAgentId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV2SetupTriggerMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV2SetupTrigger>>
>;
export type PostV2SetupTriggerMutationBody = TriggeredPresetSetupParams;
export type PostV2SetupTriggerMutationError = HTTPValidationError;

/**
 * @summary Setup Trigger
 */
export const usePostV2SetupTrigger = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV2SetupTrigger>>,
      TError,
      { libraryAgentId: string; data: TriggeredPresetSetupParams },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postV2SetupTrigger>>,
  TError,
  { libraryAgentId: string; data: TriggeredPresetSetupParams },
  TContext
> => {
  const mutationOptions = getPostV2SetupTriggerMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
