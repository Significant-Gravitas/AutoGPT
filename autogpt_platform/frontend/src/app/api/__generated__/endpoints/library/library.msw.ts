/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * AutoGPT Agent Server
 * This server is used to execute agents that are created by the AutoGPT system.
 * OpenAPI spec version: 0.1
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";

import type { GetV2GetAgentByStoreId200 } from "../../models/getV2GetAgentByStoreId200";

import type { HTTPValidationError } from "../../models/hTTPValidationError";

import type { LibraryAgent } from "../../models/libraryAgent";

import type { LibraryAgentPreset } from "../../models/libraryAgentPreset";

import type { LibraryAgentResponse } from "../../models/libraryAgentResponse";

import { LibraryAgentStatus } from "../../models/libraryAgentStatus";

import { ProviderName } from "../../models/providerName";

export const getGetV2ListLibraryAgentsResponseMock = (
  overrideResponse: Partial<LibraryAgentResponse> = {},
): LibraryAgentResponse => ({
  agents: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    graph_version: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    image_url: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    creator_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    creator_image_url: faker.string.alpha({ length: { min: 10, max: 20 } }),
    status: faker.helpers.arrayElement(Object.values(LibraryAgentStatus)),
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    description: faker.string.alpha({ length: { min: 10, max: 20 } }),
    input_schema: {},
    credentials_input_schema: {},
    has_external_trigger: faker.datatype.boolean(),
    trigger_setup_info: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        {
          provider: faker.helpers.arrayElement(Object.values(ProviderName)),
          config_schema: {},
          credentials_input_name: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            null,
          ]),
        },
        null,
      ]),
      undefined,
    ]),
    new_output: faker.datatype.boolean(),
    can_access_graph: faker.datatype.boolean(),
    is_latest_version: faker.datatype.boolean(),
  })),
  pagination: {
    total_items: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    total_pages: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    current_page: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    page_size: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
  },
  ...overrideResponse,
});

export const getGetV2ListLibraryAgentsResponseMock200 = (
  overrideResponse: Partial<LibraryAgentResponse> = {},
): LibraryAgentResponse => ({
  agents: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    graph_version: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    image_url: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    creator_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    creator_image_url: faker.string.alpha({ length: { min: 10, max: 20 } }),
    status: faker.helpers.arrayElement(Object.values(LibraryAgentStatus)),
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    description: faker.string.alpha({ length: { min: 10, max: 20 } }),
    input_schema: {},
    credentials_input_schema: {},
    has_external_trigger: faker.datatype.boolean(),
    trigger_setup_info: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        {
          provider: faker.helpers.arrayElement(Object.values(ProviderName)),
          config_schema: {},
          credentials_input_name: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            null,
          ]),
        },
        null,
      ]),
      undefined,
    ]),
    new_output: faker.datatype.boolean(),
    can_access_graph: faker.datatype.boolean(),
    is_latest_version: faker.datatype.boolean(),
  })),
  pagination: {
    total_items: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    total_pages: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    current_page: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    page_size: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
  },
  ...overrideResponse,
});

export const getGetV2ListLibraryAgentsResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostV2AddMarketplaceAgentResponseMock = (
  overrideResponse: Partial<LibraryAgent> = {},
): LibraryAgent => ({
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  graph_version: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  image_url: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  creator_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  creator_image_url: faker.string.alpha({ length: { min: 10, max: 20 } }),
  status: faker.helpers.arrayElement(Object.values(LibraryAgentStatus)),
  updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  input_schema: {},
  credentials_input_schema: {},
  has_external_trigger: faker.datatype.boolean(),
  trigger_setup_info: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        provider: faker.helpers.arrayElement(Object.values(ProviderName)),
        config_schema: {},
        credentials_input_name: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
      },
      null,
    ]),
    undefined,
  ]),
  new_output: faker.datatype.boolean(),
  can_access_graph: faker.datatype.boolean(),
  is_latest_version: faker.datatype.boolean(),
  ...overrideResponse,
});

export const getPostV2AddMarketplaceAgentResponseMock201 = (
  overrideResponse: Partial<LibraryAgent> = {},
): LibraryAgent => ({
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  graph_version: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  image_url: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  creator_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  creator_image_url: faker.string.alpha({ length: { min: 10, max: 20 } }),
  status: faker.helpers.arrayElement(Object.values(LibraryAgentStatus)),
  updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  input_schema: {},
  credentials_input_schema: {},
  has_external_trigger: faker.datatype.boolean(),
  trigger_setup_info: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        provider: faker.helpers.arrayElement(Object.values(ProviderName)),
        config_schema: {},
        credentials_input_name: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
      },
      null,
    ]),
    undefined,
  ]),
  new_output: faker.datatype.boolean(),
  can_access_graph: faker.datatype.boolean(),
  is_latest_version: faker.datatype.boolean(),
  ...overrideResponse,
});

export const getPostV2AddMarketplaceAgentResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV2GetLibraryAgentResponseMock = (
  overrideResponse: Partial<LibraryAgent> = {},
): LibraryAgent => ({
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  graph_version: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  image_url: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  creator_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  creator_image_url: faker.string.alpha({ length: { min: 10, max: 20 } }),
  status: faker.helpers.arrayElement(Object.values(LibraryAgentStatus)),
  updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  input_schema: {},
  credentials_input_schema: {},
  has_external_trigger: faker.datatype.boolean(),
  trigger_setup_info: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        provider: faker.helpers.arrayElement(Object.values(ProviderName)),
        config_schema: {},
        credentials_input_name: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
      },
      null,
    ]),
    undefined,
  ]),
  new_output: faker.datatype.boolean(),
  can_access_graph: faker.datatype.boolean(),
  is_latest_version: faker.datatype.boolean(),
  ...overrideResponse,
});

export const getGetV2GetLibraryAgentResponseMock200 = (
  overrideResponse: Partial<LibraryAgent> = {},
): LibraryAgent => ({
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  graph_version: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  image_url: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  creator_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  creator_image_url: faker.string.alpha({ length: { min: 10, max: 20 } }),
  status: faker.helpers.arrayElement(Object.values(LibraryAgentStatus)),
  updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  input_schema: {},
  credentials_input_schema: {},
  has_external_trigger: faker.datatype.boolean(),
  trigger_setup_info: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        provider: faker.helpers.arrayElement(Object.values(ProviderName)),
        config_schema: {},
        credentials_input_name: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
      },
      null,
    ]),
    undefined,
  ]),
  new_output: faker.datatype.boolean(),
  can_access_graph: faker.datatype.boolean(),
  is_latest_version: faker.datatype.boolean(),
  ...overrideResponse,
});

export const getGetV2GetLibraryAgentResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPatchV2UpdateLibraryAgentResponseMock = (
  overrideResponse: Partial<LibraryAgent> = {},
): LibraryAgent => ({
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  graph_version: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  image_url: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  creator_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  creator_image_url: faker.string.alpha({ length: { min: 10, max: 20 } }),
  status: faker.helpers.arrayElement(Object.values(LibraryAgentStatus)),
  updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  input_schema: {},
  credentials_input_schema: {},
  has_external_trigger: faker.datatype.boolean(),
  trigger_setup_info: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        provider: faker.helpers.arrayElement(Object.values(ProviderName)),
        config_schema: {},
        credentials_input_name: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
      },
      null,
    ]),
    undefined,
  ]),
  new_output: faker.datatype.boolean(),
  can_access_graph: faker.datatype.boolean(),
  is_latest_version: faker.datatype.boolean(),
  ...overrideResponse,
});

export const getPatchV2UpdateLibraryAgentResponseMock200 = (
  overrideResponse: Partial<LibraryAgent> = {},
): LibraryAgent => ({
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  graph_version: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  image_url: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  creator_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  creator_image_url: faker.string.alpha({ length: { min: 10, max: 20 } }),
  status: faker.helpers.arrayElement(Object.values(LibraryAgentStatus)),
  updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  input_schema: {},
  credentials_input_schema: {},
  has_external_trigger: faker.datatype.boolean(),
  trigger_setup_info: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        provider: faker.helpers.arrayElement(Object.values(ProviderName)),
        config_schema: {},
        credentials_input_name: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
      },
      null,
    ]),
    undefined,
  ]),
  new_output: faker.datatype.boolean(),
  can_access_graph: faker.datatype.boolean(),
  is_latest_version: faker.datatype.boolean(),
  ...overrideResponse,
});

export const getPatchV2UpdateLibraryAgentResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getDeleteV2DeleteLibraryAgentResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV2GetLibraryAgentByGraphIdResponseMock = (
  overrideResponse: Partial<LibraryAgent> = {},
): LibraryAgent => ({
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  graph_version: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  image_url: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  creator_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  creator_image_url: faker.string.alpha({ length: { min: 10, max: 20 } }),
  status: faker.helpers.arrayElement(Object.values(LibraryAgentStatus)),
  updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  input_schema: {},
  credentials_input_schema: {},
  has_external_trigger: faker.datatype.boolean(),
  trigger_setup_info: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        provider: faker.helpers.arrayElement(Object.values(ProviderName)),
        config_schema: {},
        credentials_input_name: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
      },
      null,
    ]),
    undefined,
  ]),
  new_output: faker.datatype.boolean(),
  can_access_graph: faker.datatype.boolean(),
  is_latest_version: faker.datatype.boolean(),
  ...overrideResponse,
});

export const getGetV2GetLibraryAgentByGraphIdResponseMock200 = (
  overrideResponse: Partial<LibraryAgent> = {},
): LibraryAgent => ({
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  graph_version: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  image_url: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  creator_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  creator_image_url: faker.string.alpha({ length: { min: 10, max: 20 } }),
  status: faker.helpers.arrayElement(Object.values(LibraryAgentStatus)),
  updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  input_schema: {},
  credentials_input_schema: {},
  has_external_trigger: faker.datatype.boolean(),
  trigger_setup_info: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        provider: faker.helpers.arrayElement(Object.values(ProviderName)),
        config_schema: {},
        credentials_input_name: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
      },
      null,
    ]),
    undefined,
  ]),
  new_output: faker.datatype.boolean(),
  can_access_graph: faker.datatype.boolean(),
  is_latest_version: faker.datatype.boolean(),
  ...overrideResponse,
});

export const getGetV2GetLibraryAgentByGraphIdResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV2GetAgentByStoreIdResponseMock =
  (): GetV2GetAgentByStoreId200 =>
    faker.helpers.arrayElement([
      {
        id: faker.string.alpha({ length: { min: 10, max: 20 } }),
        graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
        graph_version: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        image_url: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        creator_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        creator_image_url: faker.string.alpha({ length: { min: 10, max: 20 } }),
        status: faker.helpers.arrayElement(Object.values(LibraryAgentStatus)),
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        description: faker.string.alpha({ length: { min: 10, max: 20 } }),
        input_schema: {},
        credentials_input_schema: {},
        has_external_trigger: faker.datatype.boolean(),
        trigger_setup_info: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            {
              provider: faker.helpers.arrayElement(Object.values(ProviderName)),
              config_schema: {},
              credentials_input_name: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                null,
              ]),
            },
            null,
          ]),
          undefined,
        ]),
        new_output: faker.datatype.boolean(),
        can_access_graph: faker.datatype.boolean(),
        is_latest_version: faker.datatype.boolean(),
      },
      null,
    ]);

export const getGetV2GetAgentByStoreIdResponseMock200 =
  (): GetV2GetAgentByStoreId200 =>
    faker.helpers.arrayElement([
      {
        id: faker.string.alpha({ length: { min: 10, max: 20 } }),
        graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
        graph_version: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        image_url: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        creator_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        creator_image_url: faker.string.alpha({ length: { min: 10, max: 20 } }),
        status: faker.helpers.arrayElement(Object.values(LibraryAgentStatus)),
        updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        description: faker.string.alpha({ length: { min: 10, max: 20 } }),
        input_schema: {},
        credentials_input_schema: {},
        has_external_trigger: faker.datatype.boolean(),
        trigger_setup_info: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            {
              provider: faker.helpers.arrayElement(Object.values(ProviderName)),
              config_schema: {},
              credentials_input_name: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                null,
              ]),
            },
            null,
          ]),
          undefined,
        ]),
        new_output: faker.datatype.boolean(),
        can_access_graph: faker.datatype.boolean(),
        is_latest_version: faker.datatype.boolean(),
      },
      null,
    ]);

export const getGetV2GetAgentByStoreIdResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostV2ForkLibraryAgentResponseMock = (
  overrideResponse: Partial<LibraryAgent> = {},
): LibraryAgent => ({
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  graph_version: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  image_url: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  creator_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  creator_image_url: faker.string.alpha({ length: { min: 10, max: 20 } }),
  status: faker.helpers.arrayElement(Object.values(LibraryAgentStatus)),
  updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  input_schema: {},
  credentials_input_schema: {},
  has_external_trigger: faker.datatype.boolean(),
  trigger_setup_info: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        provider: faker.helpers.arrayElement(Object.values(ProviderName)),
        config_schema: {},
        credentials_input_name: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
      },
      null,
    ]),
    undefined,
  ]),
  new_output: faker.datatype.boolean(),
  can_access_graph: faker.datatype.boolean(),
  is_latest_version: faker.datatype.boolean(),
  ...overrideResponse,
});

export const getPostV2ForkLibraryAgentResponseMock200 = (
  overrideResponse: Partial<LibraryAgent> = {},
): LibraryAgent => ({
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  graph_version: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  image_url: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  creator_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  creator_image_url: faker.string.alpha({ length: { min: 10, max: 20 } }),
  status: faker.helpers.arrayElement(Object.values(LibraryAgentStatus)),
  updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  input_schema: {},
  credentials_input_schema: {},
  has_external_trigger: faker.datatype.boolean(),
  trigger_setup_info: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        provider: faker.helpers.arrayElement(Object.values(ProviderName)),
        config_schema: {},
        credentials_input_name: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
      },
      null,
    ]),
    undefined,
  ]),
  new_output: faker.datatype.boolean(),
  can_access_graph: faker.datatype.boolean(),
  is_latest_version: faker.datatype.boolean(),
  ...overrideResponse,
});

export const getPostV2ForkLibraryAgentResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostV2SetupTriggerResponseMock = (
  overrideResponse: Partial<LibraryAgentPreset> = {},
): LibraryAgentPreset => ({
  graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  graph_version: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  inputs: {},
  credentials: {
    [faker.string.alphanumeric(5)]: {
      id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      title: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
      provider: faker.helpers.arrayElement(Object.values(ProviderName)),
      type: faker.helpers.arrayElement([
        "api_key",
        "oauth2",
        "user_password",
        "host_scoped",
      ] as const),
    },
  },
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  is_active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  webhook_id: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  ...overrideResponse,
});

export const getPostV2SetupTriggerResponseMock200 = (
  overrideResponse: Partial<LibraryAgentPreset> = {},
): LibraryAgentPreset => ({
  graph_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  graph_version: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  inputs: {},
  credentials: {
    [faker.string.alphanumeric(5)]: {
      id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      title: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
      provider: faker.helpers.arrayElement(Object.values(ProviderName)),
      type: faker.helpers.arrayElement([
        "api_key",
        "oauth2",
        "user_password",
        "host_scoped",
      ] as const),
    },
  },
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  is_active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  webhook_id: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  ...overrideResponse,
});

export const getPostV2SetupTriggerResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV2ListLibraryAgentsMockHandler = (
  overrideResponse?:
    | LibraryAgentResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<LibraryAgentResponse> | LibraryAgentResponse),
) => {
  return http.get("*/api/library/agents", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2ListLibraryAgentsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV2ListLibraryAgentsMockHandler200 = (
  overrideResponse?:
    | LibraryAgentResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<LibraryAgentResponse> | LibraryAgentResponse),
) => {
  return http.get("*/api/library/agents", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2ListLibraryAgentsResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV2ListLibraryAgentsMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.get("*/api/library/agents", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2ListLibraryAgentsResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV2AddMarketplaceAgentMockHandler = (
  overrideResponse?:
    | LibraryAgent
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<LibraryAgent> | LibraryAgent),
) => {
  return http.post("*/api/library/agents", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV2AddMarketplaceAgentResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV2AddMarketplaceAgentMockHandler201 = (
  overrideResponse?:
    | LibraryAgent
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<LibraryAgent> | LibraryAgent),
) => {
  return http.post("*/api/library/agents", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV2AddMarketplaceAgentResponseMock201(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV2AddMarketplaceAgentMockHandler404 = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.post("*/api/library/agents", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 404 });
  });
};

export const getPostV2AddMarketplaceAgentMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.post("*/api/library/agents", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV2AddMarketplaceAgentResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV2GetLibraryAgentMockHandler = (
  overrideResponse?:
    | LibraryAgent
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<LibraryAgent> | LibraryAgent),
) => {
  return http.get("*/api/library/agents/:libraryAgentId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2GetLibraryAgentResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV2GetLibraryAgentMockHandler200 = (
  overrideResponse?:
    | LibraryAgent
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<LibraryAgent> | LibraryAgent),
) => {
  return http.get("*/api/library/agents/:libraryAgentId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2GetLibraryAgentResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV2GetLibraryAgentMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.get("*/api/library/agents/:libraryAgentId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2GetLibraryAgentResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPatchV2UpdateLibraryAgentMockHandler = (
  overrideResponse?:
    | LibraryAgent
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<LibraryAgent> | LibraryAgent),
) => {
  return http.patch("*/api/library/agents/:libraryAgentId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPatchV2UpdateLibraryAgentResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPatchV2UpdateLibraryAgentMockHandler200 = (
  overrideResponse?:
    | LibraryAgent
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<LibraryAgent> | LibraryAgent),
) => {
  return http.patch("*/api/library/agents/:libraryAgentId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPatchV2UpdateLibraryAgentResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPatchV2UpdateLibraryAgentMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.patch("*/api/library/agents/:libraryAgentId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPatchV2UpdateLibraryAgentResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPatchV2UpdateLibraryAgentMockHandler500 = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.patch("*/api/library/agents/:libraryAgentId", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 500 });
  });
};

export const getDeleteV2DeleteLibraryAgentMockHandler = (
  overrideResponse?:
    | unknown
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<unknown | void> | unknown | void),
) => {
  return http.delete("*/api/library/agents/:libraryAgentId", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getDeleteV2DeleteLibraryAgentMockHandler200 = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.delete("*/api/library/agents/:libraryAgentId", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getDeleteV2DeleteLibraryAgentMockHandler204 = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.delete("*/api/library/agents/:libraryAgentId", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 204 });
  });
};

export const getDeleteV2DeleteLibraryAgentMockHandler404 = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.delete("*/api/library/agents/:libraryAgentId", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 404 });
  });
};

export const getDeleteV2DeleteLibraryAgentMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.delete("*/api/library/agents/:libraryAgentId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getDeleteV2DeleteLibraryAgentResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV2GetLibraryAgentByGraphIdMockHandler = (
  overrideResponse?:
    | LibraryAgent
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<LibraryAgent> | LibraryAgent),
) => {
  return http.get("*/api/library/agents/by-graph/:graphId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2GetLibraryAgentByGraphIdResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV2GetLibraryAgentByGraphIdMockHandler200 = (
  overrideResponse?:
    | LibraryAgent
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<LibraryAgent> | LibraryAgent),
) => {
  return http.get("*/api/library/agents/by-graph/:graphId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2GetLibraryAgentByGraphIdResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV2GetLibraryAgentByGraphIdMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.get("*/api/library/agents/by-graph/:graphId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2GetLibraryAgentByGraphIdResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV2GetAgentByStoreIdMockHandler = (
  overrideResponse?:
    | GetV2GetAgentByStoreId200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetV2GetAgentByStoreId200> | GetV2GetAgentByStoreId200),
) => {
  return http.get(
    "*/api/library/agents/marketplace/:storeListingVersionId",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetV2GetAgentByStoreIdResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getGetV2GetAgentByStoreIdMockHandler200 = (
  overrideResponse?:
    | GetV2GetAgentByStoreId200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetV2GetAgentByStoreId200> | GetV2GetAgentByStoreId200),
) => {
  return http.get(
    "*/api/library/agents/marketplace/:storeListingVersionId",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetV2GetAgentByStoreIdResponseMock200(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getGetV2GetAgentByStoreIdMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.get(
    "*/api/library/agents/marketplace/:storeListingVersionId",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetV2GetAgentByStoreIdResponseMock422(),
        ),
        { status: 422, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getPostV2ForkLibraryAgentMockHandler = (
  overrideResponse?:
    | LibraryAgent
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<LibraryAgent> | LibraryAgent),
) => {
  return http.post(
    "*/api/library/agents/:libraryAgentId/fork",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getPostV2ForkLibraryAgentResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getPostV2ForkLibraryAgentMockHandler200 = (
  overrideResponse?:
    | LibraryAgent
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<LibraryAgent> | LibraryAgent),
) => {
  return http.post(
    "*/api/library/agents/:libraryAgentId/fork",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getPostV2ForkLibraryAgentResponseMock200(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getPostV2ForkLibraryAgentMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.post(
    "*/api/library/agents/:libraryAgentId/fork",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getPostV2ForkLibraryAgentResponseMock422(),
        ),
        { status: 422, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getPostV2SetupTriggerMockHandler = (
  overrideResponse?:
    | LibraryAgentPreset
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<LibraryAgentPreset> | LibraryAgentPreset),
) => {
  return http.post(
    "*/api/library/agents/:libraryAgentId/setup-trigger",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getPostV2SetupTriggerResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getPostV2SetupTriggerMockHandler200 = (
  overrideResponse?:
    | LibraryAgentPreset
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<LibraryAgentPreset> | LibraryAgentPreset),
) => {
  return http.post(
    "*/api/library/agents/:libraryAgentId/setup-trigger",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getPostV2SetupTriggerResponseMock200(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getPostV2SetupTriggerMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.post(
    "*/api/library/agents/:libraryAgentId/setup-trigger",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getPostV2SetupTriggerResponseMock422(),
        ),
        { status: 422, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};
export const getLibraryMock = () => [
  getGetV2ListLibraryAgentsMockHandler(),
  getPostV2AddMarketplaceAgentMockHandler(),
  getGetV2GetLibraryAgentMockHandler(),
  getPatchV2UpdateLibraryAgentMockHandler(),
  getDeleteV2DeleteLibraryAgentMockHandler(),
  getGetV2GetLibraryAgentByGraphIdMockHandler(),
  getGetV2GetAgentByStoreIdMockHandler(),
  getPostV2ForkLibraryAgentMockHandler(),
  getPostV2SetupTriggerMockHandler(),
];
