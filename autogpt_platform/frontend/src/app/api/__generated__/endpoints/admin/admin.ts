/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * AutoGPT Agent Server
 * This server is used to execute agents that are created by the AutoGPT system.
 * OpenAPI spec version: 0.1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { AddUserCreditsResponse } from "../../models/addUserCreditsResponse";

import type { BodyPostV2AddCreditsToUser } from "../../models/bodyPostV2AddCreditsToUser";

import type { GetV2GetAdminListingsHistoryParams } from "../../models/getV2GetAdminListingsHistoryParams";

import type { GetV2GetAllUsersHistoryParams } from "../../models/getV2GetAllUsersHistoryParams";

import type { HTTPValidationError } from "../../models/hTTPValidationError";

import type { ReviewSubmissionRequest } from "../../models/reviewSubmissionRequest";

import type { StoreListingsWithVersionsResponse } from "../../models/storeListingsWithVersionsResponse";

import type { StoreSubmission } from "../../models/storeSubmission";

import type { UserHistoryResponse } from "../../models/userHistoryResponse";

import { customMutator } from "../../../mutators/custom-mutator";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Get store listings with their version history for admins.

This provides a consolidated view of listings with their versions,
allowing for an expandable UI in the admin dashboard.

Args:
    status: Filter by submission status (PENDING, APPROVED, REJECTED)
    search: Search by name, description, or user email
    page: Page number for pagination
    page_size: Number of items per page

Returns:
    StoreListingsWithVersionsResponse with listings and their versions
 * @summary Get Admin Listings History
 */
export type getV2GetAdminListingsHistoryResponse200 = {
  data: StoreListingsWithVersionsResponse;
  status: 200;
};

export type getV2GetAdminListingsHistoryResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type getV2GetAdminListingsHistoryResponseComposite =
  | getV2GetAdminListingsHistoryResponse200
  | getV2GetAdminListingsHistoryResponse422;

export type getV2GetAdminListingsHistoryResponse =
  getV2GetAdminListingsHistoryResponseComposite & {
    headers: Headers;
  };

export const getGetV2GetAdminListingsHistoryUrl = (
  params?: GetV2GetAdminListingsHistoryParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/store/admin/listings?${stringifiedParams}`
    : `/api/store/admin/listings`;
};

export const getV2GetAdminListingsHistory = async (
  params?: GetV2GetAdminListingsHistoryParams,
  options?: RequestInit,
): Promise<getV2GetAdminListingsHistoryResponse> => {
  return customMutator<getV2GetAdminListingsHistoryResponse>(
    getGetV2GetAdminListingsHistoryUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV2GetAdminListingsHistoryQueryKey = (
  params?: GetV2GetAdminListingsHistoryParams,
) => {
  return [`/api/store/admin/listings`, ...(params ? [params] : [])] as const;
};

export const getGetV2GetAdminListingsHistoryQueryOptions = <
  TData = Awaited<ReturnType<typeof getV2GetAdminListingsHistory>>,
  TError = HTTPValidationError,
>(
  params?: GetV2GetAdminListingsHistoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetAdminListingsHistory>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetV2GetAdminListingsHistoryQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV2GetAdminListingsHistory>>
  > = ({ signal }) =>
    getV2GetAdminListingsHistory(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV2GetAdminListingsHistory>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV2GetAdminListingsHistoryQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV2GetAdminListingsHistory>>
>;
export type GetV2GetAdminListingsHistoryQueryError = HTTPValidationError;

export function useGetV2GetAdminListingsHistory<
  TData = Awaited<ReturnType<typeof getV2GetAdminListingsHistory>>,
  TError = HTTPValidationError,
>(
  params: undefined | GetV2GetAdminListingsHistoryParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetAdminListingsHistory>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2GetAdminListingsHistory>>,
          TError,
          Awaited<ReturnType<typeof getV2GetAdminListingsHistory>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2GetAdminListingsHistory<
  TData = Awaited<ReturnType<typeof getV2GetAdminListingsHistory>>,
  TError = HTTPValidationError,
>(
  params?: GetV2GetAdminListingsHistoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetAdminListingsHistory>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2GetAdminListingsHistory>>,
          TError,
          Awaited<ReturnType<typeof getV2GetAdminListingsHistory>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2GetAdminListingsHistory<
  TData = Awaited<ReturnType<typeof getV2GetAdminListingsHistory>>,
  TError = HTTPValidationError,
>(
  params?: GetV2GetAdminListingsHistoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetAdminListingsHistory>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Admin Listings History
 */

export function useGetV2GetAdminListingsHistory<
  TData = Awaited<ReturnType<typeof getV2GetAdminListingsHistory>>,
  TError = HTTPValidationError,
>(
  params?: GetV2GetAdminListingsHistoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetAdminListingsHistory>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV2GetAdminListingsHistoryQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Review a store listing submission.

Args:
    store_listing_version_id: ID of the submission to review
    request: Review details including approval status and comments
    user: Authenticated admin user performing the review

Returns:
    StoreSubmission with updated review information
 * @summary Review Store Submission
 */
export type postV2ReviewStoreSubmissionResponse200 = {
  data: StoreSubmission;
  status: 200;
};

export type postV2ReviewStoreSubmissionResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type postV2ReviewStoreSubmissionResponseComposite =
  | postV2ReviewStoreSubmissionResponse200
  | postV2ReviewStoreSubmissionResponse422;

export type postV2ReviewStoreSubmissionResponse =
  postV2ReviewStoreSubmissionResponseComposite & {
    headers: Headers;
  };

export const getPostV2ReviewStoreSubmissionUrl = (
  storeListingVersionId: string,
) => {
  return `/api/store/admin/submissions/${storeListingVersionId}/review`;
};

export const postV2ReviewStoreSubmission = async (
  storeListingVersionId: string,
  reviewSubmissionRequest: ReviewSubmissionRequest,
  options?: RequestInit,
): Promise<postV2ReviewStoreSubmissionResponse> => {
  return customMutator<postV2ReviewStoreSubmissionResponse>(
    getPostV2ReviewStoreSubmissionUrl(storeListingVersionId),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(reviewSubmissionRequest),
    },
  );
};

export const getPostV2ReviewStoreSubmissionMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV2ReviewStoreSubmission>>,
    TError,
    { storeListingVersionId: string; data: ReviewSubmissionRequest },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV2ReviewStoreSubmission>>,
  TError,
  { storeListingVersionId: string; data: ReviewSubmissionRequest },
  TContext
> => {
  const mutationKey = ["postV2ReviewStoreSubmission"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV2ReviewStoreSubmission>>,
    { storeListingVersionId: string; data: ReviewSubmissionRequest }
  > = (props) => {
    const { storeListingVersionId, data } = props ?? {};

    return postV2ReviewStoreSubmission(
      storeListingVersionId,
      data,
      requestOptions,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV2ReviewStoreSubmissionMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV2ReviewStoreSubmission>>
>;
export type PostV2ReviewStoreSubmissionMutationBody = ReviewSubmissionRequest;
export type PostV2ReviewStoreSubmissionMutationError = HTTPValidationError;

/**
 * @summary Review Store Submission
 */
export const usePostV2ReviewStoreSubmission = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV2ReviewStoreSubmission>>,
      TError,
      { storeListingVersionId: string; data: ReviewSubmissionRequest },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postV2ReviewStoreSubmission>>,
  TError,
  { storeListingVersionId: string; data: ReviewSubmissionRequest },
  TContext
> => {
  const mutationOptions =
    getPostV2ReviewStoreSubmissionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Download the agent file by streaming its content.

Args:
    store_listing_version_id (str): The ID of the agent to download

Returns:
    StreamingResponse: A streaming response containing the agent's graph data.

Raises:
    HTTPException: If the agent is not found or an unexpected error occurs.
 * @summary Admin Download Agent File
 */
export type getV2AdminDownloadAgentFileResponse200 = {
  data: unknown;
  status: 200;
};

export type getV2AdminDownloadAgentFileResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type getV2AdminDownloadAgentFileResponseComposite =
  | getV2AdminDownloadAgentFileResponse200
  | getV2AdminDownloadAgentFileResponse422;

export type getV2AdminDownloadAgentFileResponse =
  getV2AdminDownloadAgentFileResponseComposite & {
    headers: Headers;
  };

export const getGetV2AdminDownloadAgentFileUrl = (
  storeListingVersionId: string,
) => {
  return `/api/store/admin/submissions/download/${storeListingVersionId}`;
};

export const getV2AdminDownloadAgentFile = async (
  storeListingVersionId: string,
  options?: RequestInit,
): Promise<getV2AdminDownloadAgentFileResponse> => {
  return customMutator<getV2AdminDownloadAgentFileResponse>(
    getGetV2AdminDownloadAgentFileUrl(storeListingVersionId),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV2AdminDownloadAgentFileQueryKey = (
  storeListingVersionId: string,
) => {
  return [
    `/api/store/admin/submissions/download/${storeListingVersionId}`,
  ] as const;
};

export const getGetV2AdminDownloadAgentFileQueryOptions = <
  TData = Awaited<ReturnType<typeof getV2AdminDownloadAgentFile>>,
  TError = HTTPValidationError,
>(
  storeListingVersionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2AdminDownloadAgentFile>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetV2AdminDownloadAgentFileQueryKey(storeListingVersionId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV2AdminDownloadAgentFile>>
  > = ({ signal }) =>
    getV2AdminDownloadAgentFile(storeListingVersionId, {
      signal,
      ...requestOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!storeListingVersionId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getV2AdminDownloadAgentFile>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV2AdminDownloadAgentFileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV2AdminDownloadAgentFile>>
>;
export type GetV2AdminDownloadAgentFileQueryError = HTTPValidationError;

export function useGetV2AdminDownloadAgentFile<
  TData = Awaited<ReturnType<typeof getV2AdminDownloadAgentFile>>,
  TError = HTTPValidationError,
>(
  storeListingVersionId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2AdminDownloadAgentFile>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2AdminDownloadAgentFile>>,
          TError,
          Awaited<ReturnType<typeof getV2AdminDownloadAgentFile>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2AdminDownloadAgentFile<
  TData = Awaited<ReturnType<typeof getV2AdminDownloadAgentFile>>,
  TError = HTTPValidationError,
>(
  storeListingVersionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2AdminDownloadAgentFile>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2AdminDownloadAgentFile>>,
          TError,
          Awaited<ReturnType<typeof getV2AdminDownloadAgentFile>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2AdminDownloadAgentFile<
  TData = Awaited<ReturnType<typeof getV2AdminDownloadAgentFile>>,
  TError = HTTPValidationError,
>(
  storeListingVersionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2AdminDownloadAgentFile>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Admin Download Agent File
 */

export function useGetV2AdminDownloadAgentFile<
  TData = Awaited<ReturnType<typeof getV2AdminDownloadAgentFile>>,
  TError = HTTPValidationError,
>(
  storeListingVersionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2AdminDownloadAgentFile>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV2AdminDownloadAgentFileQueryOptions(
    storeListingVersionId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Add Credits to User
 */
export type postV2AddCreditsToUserResponse200 = {
  data: AddUserCreditsResponse;
  status: 200;
};

export type postV2AddCreditsToUserResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type postV2AddCreditsToUserResponseComposite =
  | postV2AddCreditsToUserResponse200
  | postV2AddCreditsToUserResponse422;

export type postV2AddCreditsToUserResponse =
  postV2AddCreditsToUserResponseComposite & {
    headers: Headers;
  };

export const getPostV2AddCreditsToUserUrl = () => {
  return `/api/credits/admin/add_credits`;
};

export const postV2AddCreditsToUser = async (
  bodyPostV2AddCreditsToUser: BodyPostV2AddCreditsToUser,
  options?: RequestInit,
): Promise<postV2AddCreditsToUserResponse> => {
  return customMutator<postV2AddCreditsToUserResponse>(
    getPostV2AddCreditsToUserUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(bodyPostV2AddCreditsToUser),
    },
  );
};

export const getPostV2AddCreditsToUserMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV2AddCreditsToUser>>,
    TError,
    { data: BodyPostV2AddCreditsToUser },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV2AddCreditsToUser>>,
  TError,
  { data: BodyPostV2AddCreditsToUser },
  TContext
> => {
  const mutationKey = ["postV2AddCreditsToUser"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV2AddCreditsToUser>>,
    { data: BodyPostV2AddCreditsToUser }
  > = (props) => {
    const { data } = props ?? {};

    return postV2AddCreditsToUser(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV2AddCreditsToUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV2AddCreditsToUser>>
>;
export type PostV2AddCreditsToUserMutationBody = BodyPostV2AddCreditsToUser;
export type PostV2AddCreditsToUserMutationError = HTTPValidationError;

/**
 * @summary Add Credits to User
 */
export const usePostV2AddCreditsToUser = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV2AddCreditsToUser>>,
      TError,
      { data: BodyPostV2AddCreditsToUser },
      TContext
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postV2AddCreditsToUser>>,
  TError,
  { data: BodyPostV2AddCreditsToUser },
  TContext
> => {
  const mutationOptions = getPostV2AddCreditsToUserMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get All Users History
 */
export type getV2GetAllUsersHistoryResponse200 = {
  data: UserHistoryResponse;
  status: 200;
};

export type getV2GetAllUsersHistoryResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type getV2GetAllUsersHistoryResponseComposite =
  | getV2GetAllUsersHistoryResponse200
  | getV2GetAllUsersHistoryResponse422;

export type getV2GetAllUsersHistoryResponse =
  getV2GetAllUsersHistoryResponseComposite & {
    headers: Headers;
  };

export const getGetV2GetAllUsersHistoryUrl = (
  params?: GetV2GetAllUsersHistoryParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/credits/admin/users_history?${stringifiedParams}`
    : `/api/credits/admin/users_history`;
};

export const getV2GetAllUsersHistory = async (
  params?: GetV2GetAllUsersHistoryParams,
  options?: RequestInit,
): Promise<getV2GetAllUsersHistoryResponse> => {
  return customMutator<getV2GetAllUsersHistoryResponse>(
    getGetV2GetAllUsersHistoryUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV2GetAllUsersHistoryQueryKey = (
  params?: GetV2GetAllUsersHistoryParams,
) => {
  return [
    `/api/credits/admin/users_history`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetV2GetAllUsersHistoryQueryOptions = <
  TData = Awaited<ReturnType<typeof getV2GetAllUsersHistory>>,
  TError = HTTPValidationError,
>(
  params?: GetV2GetAllUsersHistoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetAllUsersHistory>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetV2GetAllUsersHistoryQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV2GetAllUsersHistory>>
  > = ({ signal }) =>
    getV2GetAllUsersHistory(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV2GetAllUsersHistory>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV2GetAllUsersHistoryQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV2GetAllUsersHistory>>
>;
export type GetV2GetAllUsersHistoryQueryError = HTTPValidationError;

export function useGetV2GetAllUsersHistory<
  TData = Awaited<ReturnType<typeof getV2GetAllUsersHistory>>,
  TError = HTTPValidationError,
>(
  params: undefined | GetV2GetAllUsersHistoryParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetAllUsersHistory>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2GetAllUsersHistory>>,
          TError,
          Awaited<ReturnType<typeof getV2GetAllUsersHistory>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2GetAllUsersHistory<
  TData = Awaited<ReturnType<typeof getV2GetAllUsersHistory>>,
  TError = HTTPValidationError,
>(
  params?: GetV2GetAllUsersHistoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetAllUsersHistory>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2GetAllUsersHistory>>,
          TError,
          Awaited<ReturnType<typeof getV2GetAllUsersHistory>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2GetAllUsersHistory<
  TData = Awaited<ReturnType<typeof getV2GetAllUsersHistory>>,
  TError = HTTPValidationError,
>(
  params?: GetV2GetAllUsersHistoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetAllUsersHistory>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get All Users History
 */

export function useGetV2GetAllUsersHistory<
  TData = Awaited<ReturnType<typeof getV2GetAllUsersHistory>>,
  TError = HTTPValidationError,
>(
  params?: GetV2GetAllUsersHistoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetAllUsersHistory>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV2GetAllUsersHistoryQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
