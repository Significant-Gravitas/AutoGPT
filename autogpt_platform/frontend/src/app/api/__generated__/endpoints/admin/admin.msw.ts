/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * AutoGPT Agent Server
 * This server is used to execute agents that are created by the AutoGPT system.
 * OpenAPI spec version: 0.1
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";

import type { AddUserCreditsResponse } from "../../models/addUserCreditsResponse";

import { CreditTransactionType } from "../../models/creditTransactionType";

import type { HTTPValidationError } from "../../models/hTTPValidationError";

import type { StoreListingsWithVersionsResponse } from "../../models/storeListingsWithVersionsResponse";

import type { StoreSubmission } from "../../models/storeSubmission";

import { SubmissionStatus } from "../../models/submissionStatus";

import type { UserHistoryResponse } from "../../models/userHistoryResponse";

export const getGetV2GetAdminListingsHistoryResponseMock = (
  overrideResponse: Partial<StoreListingsWithVersionsResponse> = {},
): StoreListingsWithVersionsResponse => ({
  listings: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    listing_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    slug: faker.string.alpha({ length: { min: 10, max: 20 } }),
    agent_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    agent_version: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    active_version_id: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    has_approved_version: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    creator_email: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    latest_version: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        {
          agent_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          agent_version: faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
          name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sub_heading: faker.string.alpha({ length: { min: 10, max: 20 } }),
          slug: faker.string.alpha({ length: { min: 10, max: 20 } }),
          description: faker.string.alpha({ length: { min: 10, max: 20 } }),
          image_urls: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
          date_submitted: `${faker.date.past().toISOString().split(".")[0]}Z`,
          status: faker.helpers.arrayElement(Object.values(SubmissionStatus)),
          runs: faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
          rating: faker.number.float({
            min: undefined,
            max: undefined,
            fractionDigits: 2,
          }),
          store_listing_version_id: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              null,
            ]),
            undefined,
          ]),
          version: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.number.int({
                min: undefined,
                max: undefined,
                multipleOf: undefined,
              }),
              null,
            ]),
            undefined,
          ]),
          reviewer_id: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              null,
            ]),
            undefined,
          ]),
          review_comments: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              null,
            ]),
            undefined,
          ]),
          internal_comments: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              null,
            ]),
            undefined,
          ]),
          reviewed_at: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              `${faker.date.past().toISOString().split(".")[0]}Z`,
              null,
            ]),
            undefined,
          ]),
          changes_summary: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              null,
            ]),
            undefined,
          ]),
        },
        null,
      ]),
      undefined,
    ]),
    versions: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        agent_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
        agent_version: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        sub_heading: faker.string.alpha({ length: { min: 10, max: 20 } }),
        slug: faker.string.alpha({ length: { min: 10, max: 20 } }),
        description: faker.string.alpha({ length: { min: 10, max: 20 } }),
        image_urls: Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
        date_submitted: `${faker.date.past().toISOString().split(".")[0]}Z`,
        status: faker.helpers.arrayElement(Object.values(SubmissionStatus)),
        runs: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        rating: faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        store_listing_version_id: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            null,
          ]),
          undefined,
        ]),
        version: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            null,
          ]),
          undefined,
        ]),
        reviewer_id: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            null,
          ]),
          undefined,
        ]),
        review_comments: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            null,
          ]),
          undefined,
        ]),
        internal_comments: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            null,
          ]),
          undefined,
        ]),
        reviewed_at: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split(".")[0]}Z`,
            null,
          ]),
          undefined,
        ]),
        changes_summary: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            null,
          ]),
          undefined,
        ]),
      })),
      undefined,
    ]),
  })),
  pagination: {
    total_items: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    total_pages: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    current_page: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    page_size: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
  },
  ...overrideResponse,
});

export const getGetV2GetAdminListingsHistoryResponseMock200 = (
  overrideResponse: Partial<StoreListingsWithVersionsResponse> = {},
): StoreListingsWithVersionsResponse => ({
  listings: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    listing_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    slug: faker.string.alpha({ length: { min: 10, max: 20 } }),
    agent_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    agent_version: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    active_version_id: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    has_approved_version: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    creator_email: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    latest_version: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        {
          agent_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          agent_version: faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
          name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          sub_heading: faker.string.alpha({ length: { min: 10, max: 20 } }),
          slug: faker.string.alpha({ length: { min: 10, max: 20 } }),
          description: faker.string.alpha({ length: { min: 10, max: 20 } }),
          image_urls: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
          date_submitted: `${faker.date.past().toISOString().split(".")[0]}Z`,
          status: faker.helpers.arrayElement(Object.values(SubmissionStatus)),
          runs: faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
          rating: faker.number.float({
            min: undefined,
            max: undefined,
            fractionDigits: 2,
          }),
          store_listing_version_id: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              null,
            ]),
            undefined,
          ]),
          version: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.number.int({
                min: undefined,
                max: undefined,
                multipleOf: undefined,
              }),
              null,
            ]),
            undefined,
          ]),
          reviewer_id: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              null,
            ]),
            undefined,
          ]),
          review_comments: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              null,
            ]),
            undefined,
          ]),
          internal_comments: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              null,
            ]),
            undefined,
          ]),
          reviewed_at: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              `${faker.date.past().toISOString().split(".")[0]}Z`,
              null,
            ]),
            undefined,
          ]),
          changes_summary: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              null,
            ]),
            undefined,
          ]),
        },
        null,
      ]),
      undefined,
    ]),
    versions: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        agent_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
        agent_version: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        sub_heading: faker.string.alpha({ length: { min: 10, max: 20 } }),
        slug: faker.string.alpha({ length: { min: 10, max: 20 } }),
        description: faker.string.alpha({ length: { min: 10, max: 20 } }),
        image_urls: Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
        date_submitted: `${faker.date.past().toISOString().split(".")[0]}Z`,
        status: faker.helpers.arrayElement(Object.values(SubmissionStatus)),
        runs: faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        rating: faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        store_listing_version_id: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            null,
          ]),
          undefined,
        ]),
        version: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            null,
          ]),
          undefined,
        ]),
        reviewer_id: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            null,
          ]),
          undefined,
        ]),
        review_comments: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            null,
          ]),
          undefined,
        ]),
        internal_comments: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            null,
          ]),
          undefined,
        ]),
        reviewed_at: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split(".")[0]}Z`,
            null,
          ]),
          undefined,
        ]),
        changes_summary: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            null,
          ]),
          undefined,
        ]),
      })),
      undefined,
    ]),
  })),
  pagination: {
    total_items: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    total_pages: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    current_page: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    page_size: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
  },
  ...overrideResponse,
});

export const getGetV2GetAdminListingsHistoryResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostV2ReviewStoreSubmissionResponseMock = (
  overrideResponse: Partial<StoreSubmission> = {},
): StoreSubmission => ({
  agent_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  agent_version: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  sub_heading: faker.string.alpha({ length: { min: 10, max: 20 } }),
  slug: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  image_urls: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
  date_submitted: `${faker.date.past().toISOString().split(".")[0]}Z`,
  status: faker.helpers.arrayElement(Object.values(SubmissionStatus)),
  runs: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  rating: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  store_listing_version_id: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  version: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      null,
    ]),
    undefined,
  ]),
  reviewer_id: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  review_comments: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  internal_comments: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  reviewed_at: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      null,
    ]),
    undefined,
  ]),
  changes_summary: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostV2ReviewStoreSubmissionResponseMock200 = (
  overrideResponse: Partial<StoreSubmission> = {},
): StoreSubmission => ({
  agent_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  agent_version: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  sub_heading: faker.string.alpha({ length: { min: 10, max: 20 } }),
  slug: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  image_urls: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
  date_submitted: `${faker.date.past().toISOString().split(".")[0]}Z`,
  status: faker.helpers.arrayElement(Object.values(SubmissionStatus)),
  runs: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  rating: faker.number.float({
    min: undefined,
    max: undefined,
    fractionDigits: 2,
  }),
  store_listing_version_id: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  version: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      null,
    ]),
    undefined,
  ]),
  reviewer_id: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  review_comments: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  internal_comments: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  reviewed_at: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      null,
    ]),
    undefined,
  ]),
  changes_summary: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostV2ReviewStoreSubmissionResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV2AdminDownloadAgentFileResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostV2AddCreditsToUserResponseMock = (
  overrideResponse: Partial<AddUserCreditsResponse> = {},
): AddUserCreditsResponse => ({
  new_balance: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  transaction_key: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getPostV2AddCreditsToUserResponseMock200 = (
  overrideResponse: Partial<AddUserCreditsResponse> = {},
): AddUserCreditsResponse => ({
  new_balance: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  transaction_key: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getPostV2AddCreditsToUserResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV2GetAllUsersHistoryResponseMock = (
  overrideResponse: Partial<UserHistoryResponse> = {},
): UserHistoryResponse => ({
  history: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    transaction_key: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    transaction_time: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      undefined,
    ]),
    transaction_type: faker.helpers.arrayElement([
      faker.helpers.arrayElement(Object.values(CreditTransactionType)),
      undefined,
    ]),
    amount: faker.helpers.arrayElement([
      faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      undefined,
    ]),
    running_balance: faker.helpers.arrayElement([
      faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      undefined,
    ]),
    current_balance: faker.helpers.arrayElement([
      faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      undefined,
    ]),
    description: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    usage_graph_id: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    usage_execution_id: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    usage_node_count: faker.helpers.arrayElement([
      faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      undefined,
    ]),
    usage_start_time: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      undefined,
    ]),
    user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    user_email: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    reason: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    admin_email: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    extra_data: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
  })),
  pagination: {
    total_items: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    total_pages: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    current_page: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    page_size: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
  },
  ...overrideResponse,
});

export const getGetV2GetAllUsersHistoryResponseMock200 = (
  overrideResponse: Partial<UserHistoryResponse> = {},
): UserHistoryResponse => ({
  history: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    transaction_key: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    transaction_time: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      undefined,
    ]),
    transaction_type: faker.helpers.arrayElement([
      faker.helpers.arrayElement(Object.values(CreditTransactionType)),
      undefined,
    ]),
    amount: faker.helpers.arrayElement([
      faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      undefined,
    ]),
    running_balance: faker.helpers.arrayElement([
      faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      undefined,
    ]),
    current_balance: faker.helpers.arrayElement([
      faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      undefined,
    ]),
    description: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    usage_graph_id: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    usage_execution_id: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    usage_node_count: faker.helpers.arrayElement([
      faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      undefined,
    ]),
    usage_start_time: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      undefined,
    ]),
    user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    user_email: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    reason: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    admin_email: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    extra_data: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
  })),
  pagination: {
    total_items: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    total_pages: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    current_page: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    page_size: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
  },
  ...overrideResponse,
});

export const getGetV2GetAllUsersHistoryResponseMock422 = (
  overrideResponse: Partial<HTTPValidationError> = {},
): HTTPValidationError => ({
  detail: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      loc: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          faker.number.int({
            min: undefined,
            max: undefined,
            multipleOf: undefined,
          }),
        ]),
      ),
      msg: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetV2GetAdminListingsHistoryMockHandler = (
  overrideResponse?:
    | StoreListingsWithVersionsResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<StoreListingsWithVersionsResponse>
        | StoreListingsWithVersionsResponse),
) => {
  return http.get("*/api/store/admin/listings", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2GetAdminListingsHistoryResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV2GetAdminListingsHistoryMockHandler200 = (
  overrideResponse?:
    | StoreListingsWithVersionsResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<StoreListingsWithVersionsResponse>
        | StoreListingsWithVersionsResponse),
) => {
  return http.get("*/api/store/admin/listings", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2GetAdminListingsHistoryResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV2GetAdminListingsHistoryMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.get("*/api/store/admin/listings", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2GetAdminListingsHistoryResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV2ReviewStoreSubmissionMockHandler = (
  overrideResponse?:
    | StoreSubmission
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<StoreSubmission> | StoreSubmission),
) => {
  return http.post(
    "*/api/store/admin/submissions/:storeListingVersionId/review",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getPostV2ReviewStoreSubmissionResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getPostV2ReviewStoreSubmissionMockHandler200 = (
  overrideResponse?:
    | StoreSubmission
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<StoreSubmission> | StoreSubmission),
) => {
  return http.post(
    "*/api/store/admin/submissions/:storeListingVersionId/review",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getPostV2ReviewStoreSubmissionResponseMock200(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getPostV2ReviewStoreSubmissionMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.post(
    "*/api/store/admin/submissions/:storeListingVersionId/review",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getPostV2ReviewStoreSubmissionResponseMock422(),
        ),
        { status: 422, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getGetV2AdminDownloadAgentFileMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get(
    "*/api/store/admin/submissions/download/:storeListingVersionId",
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 200 });
    },
  );
};

export const getGetV2AdminDownloadAgentFileMockHandler200 = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get(
    "*/api/store/admin/submissions/download/:storeListingVersionId",
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 200 });
    },
  );
};

export const getGetV2AdminDownloadAgentFileMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.get(
    "*/api/store/admin/submissions/download/:storeListingVersionId",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetV2AdminDownloadAgentFileResponseMock422(),
        ),
        { status: 422, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getPostV2AddCreditsToUserMockHandler = (
  overrideResponse?:
    | AddUserCreditsResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<AddUserCreditsResponse> | AddUserCreditsResponse),
) => {
  return http.post("*/api/credits/admin/add_credits", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV2AddCreditsToUserResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV2AddCreditsToUserMockHandler200 = (
  overrideResponse?:
    | AddUserCreditsResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<AddUserCreditsResponse> | AddUserCreditsResponse),
) => {
  return http.post("*/api/credits/admin/add_credits", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV2AddCreditsToUserResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostV2AddCreditsToUserMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.post("*/api/credits/admin/add_credits", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV2AddCreditsToUserResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV2GetAllUsersHistoryMockHandler = (
  overrideResponse?:
    | UserHistoryResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<UserHistoryResponse> | UserHistoryResponse),
) => {
  return http.get("*/api/credits/admin/users_history", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2GetAllUsersHistoryResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV2GetAllUsersHistoryMockHandler200 = (
  overrideResponse?:
    | UserHistoryResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<UserHistoryResponse> | UserHistoryResponse),
) => {
  return http.get("*/api/credits/admin/users_history", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2GetAllUsersHistoryResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetV2GetAllUsersHistoryMockHandler422 = (
  overrideResponse?:
    | HTTPValidationError
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<HTTPValidationError> | HTTPValidationError),
) => {
  return http.get("*/api/credits/admin/users_history", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetV2GetAllUsersHistoryResponseMock422(),
      ),
      { status: 422, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getAdminMock = () => [
  getGetV2GetAdminListingsHistoryMockHandler(),
  getPostV2ReviewStoreSubmissionMockHandler(),
  getGetV2AdminDownloadAgentFileMockHandler(),
  getPostV2AddCreditsToUserMockHandler(),
  getGetV2GetAllUsersHistoryMockHandler(),
];
