# Shared backend environment variables
x-backend-env: &backend-env
  PYRO_HOST: "0.0.0.0"
  AGENTSERVER_HOST: rest_server
  SCHEDULER_HOST: scheduler_server
  DATABASEMANAGER_HOST: database_manager
  EXECUTIONMANAGER_HOST: executor
  NOTIFICATIONMANAGER_HOST: notification_server
  CLAMAV_SERVICE_HOST: clamav
  ENABLE_AUTH: "true"
  ENCRYPTION_KEY: "dvziYgz0KSK8FENhju0ZYi8-fRTfAdlz6YLhdB_jhNw=" # DO NOT USE IN PRODUCTION!!

services:
  migrate:
    build:
      context: ../
      dockerfile: autogpt_platform/backend/Dockerfile
      target: server
    command: ["sh", "-c", "poetry run prisma migrate deploy"]
    develop:
      watch:
        - path: ./
          target: autogpt_platform/backend/migrations
          action: rebuild
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:your-super-secret-and-long-postgres-password@db:5432/postgres?connect_timeout=60&schema=platform
      - DIRECT_URL=postgresql://postgres:your-super-secret-and-long-postgres-password@db:5432/postgres?connect_timeout=60&schema=platform
    networks:
      - app-network
    restart: on-failure
    healthcheck:
      test: ["CMD", "poetry", "run", "prisma", "migrate", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    command: redis-server --requirepass password
    ports:
      - "6379:6379"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    environment:
      - RABBITMQ_DEFAULT_USER=rabbitmq_user_default
      - RABBITMQ_DEFAULT_PASS=k0VMxyIJF9S35f3x2uaw5IWAl6Y536O7 # CHANGE THIS TO A RANDOM PASSWORD IN PRODUCTION -- everywhere lol
    ports:
      - "5672:5672"
      - "15672:15672"

  rest_server:
    build:
      context: ../
      dockerfile: autogpt_platform/backend/Dockerfile
      target: server
    command: ["python", "-m", "backend.rest"]
    develop:
      watch:
        - path: ./
          target: autogpt_platform/backend/
          action: rebuild
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
    environment:
      <<: *backend-env
      SUPABASE_URL: http://kong:8000
      SUPABASE_JWT_SECRET: your-super-secret-jwt-token-with-at-least-32-characters-long
      SUPABASE_SERVICE_ROLE_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyAgCiAgICAicm9sZSI6ICJzZXJ2aWNlX3JvbGUiLAogICAgImlzcyI6ICJzdXBhYmFzZS1kZW1vIiwKICAgICJpYXQiOiAxNjQxNzY5MjAwLAogICAgImV4cCI6IDE3OTk1MzU2MDAKfQ.DaYlNEoUrrEn2Ig7tqibS-PHK5vgusbcbo7X36XVt4Q
      DATABASE_URL: postgresql://postgres:your-super-secret-and-long-postgres-password@db:5432/postgres?connect_timeout=60&schema=platform
      DIRECT_URL: postgresql://postgres:your-super-secret-and-long-postgres-password@db:5432/postgres?connect_timeout=60&schema=platform
      REDIS_HOST: redis
      REDIS_PORT: 6379
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_DEFAULT_USER: rabbitmq_user_default
      RABBITMQ_DEFAULT_PASS: k0VMxyIJF9S35f3x2uaw5IWAl6Y536O7
      REDIS_PASSWORD: password
      NEXT_PUBLIC_FRONTEND_BASE_URL: http://localhost:3000
      UNSUBSCRIBE_SECRET_KEY: HlP8ivStJjmbf6NKi78m_3FnOogut0t5ckzjsIqeaio= # DO NOT USE IN PRODUCTION!!
    ports:
      - "8006:8006"
    networks:
      - app-network

  executor:
    build:
      context: ../
      dockerfile: autogpt_platform/backend/Dockerfile
      target: server
    command: ["python", "-m", "backend.exec"]
    develop:
      watch:
        - path: ./
          target: autogpt_platform/backend/
          action: rebuild
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
      database_manager:
        condition: service_started
    environment:
      <<: *backend-env
      SUPABASE_URL: http://kong:8000
      SUPABASE_JWT_SECRET: your-super-secret-jwt-token-with-at-least-32-characters-long
      SUPABASE_SERVICE_ROLE_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyAgCiAgICAicm9sZSI6ICJzZXJ2aWNlX3JvbGUiLAogICAgImlzcyI6ICJzdXBhYmFzZS1kZW1vIiwKICAgICJpYXQiOiAxNjQxNzY5MjAwLAogICAgImV4cCI6IDE3OTk1MzU2MDAKfQ.DaYlNEoUrrEn2Ig7tqibS-PHK5vgusbcbo7X36XVt4Q
      DATABASE_URL: postgresql://postgres:your-super-secret-and-long-postgres-password@db:5432/postgres?connect_timeout=60&schema=platform
      DIRECT_URL: postgresql://postgres:your-super-secret-and-long-postgres-password@db:5432/postgres?connect_timeout=60&schema=platform
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: password
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_DEFAULT_USER: rabbitmq_user_default
      RABBITMQ_DEFAULT_PASS: k0VMxyIJF9S35f3x2uaw5IWAl6Y536O7
    ports:
      - "8002:8002"
    networks:
      - app-network

  websocket_server:
    build:
      context: ../
      dockerfile: autogpt_platform/backend/Dockerfile
      target: server
    command: ["python", "-m", "backend.ws"]
    develop:
      watch:
        - path: ./
          target: autogpt_platform/backend/
          action: rebuild
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
      database_manager:
        condition: service_started
    environment:
      <<: *backend-env
      SUPABASE_JWT_SECRET: your-super-secret-jwt-token-with-at-least-32-characters-long
      DATABASE_URL: postgresql://postgres:your-super-secret-and-long-postgres-password@db:5432/postgres?connect_timeout=60&schema=platform
      DIRECT_URL: postgresql://postgres:your-super-secret-and-long-postgres-password@db:5432/postgres?connect_timeout=60&schema=platform
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: password
      # - RABBITMQ_HOST=rabbitmq
      # - RABBITMQ_PORT=5672
      # - RABBITMQ_DEFAULT_USER=rabbitmq_user_default
      # - RABBITMQ_DEFAULT_PASS=k0VMxyIJF9S35f3x2uaw5IWAl6Y536O7

    ports:
      - "8001:8001"
    networks:
      - app-network

  database_manager:
    build:
      context: ../
      dockerfile: autogpt_platform/backend/Dockerfile
      target: server
    command: ["python", "-m", "backend.db"]
    develop:
      watch:
        - path: ./
          target: autogpt_platform/backend/
          action: rebuild
    depends_on:
      db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    environment:
      <<: *backend-env
      DATABASE_URL: postgresql://postgres:your-super-secret-and-long-postgres-password@db:5432/postgres?connect_timeout=60&schema=platform
      DIRECT_URL: postgresql://postgres:your-super-secret-and-long-postgres-password@db:5432/postgres?connect_timeout=60&schema=platform
    ports:
      - "8005:8005"
    networks:
      - app-network

  scheduler_server:
    build:
      context: ../
      dockerfile: autogpt_platform/backend/Dockerfile
      target: server
    command: ["python", "-m", "backend.scheduler"]
    develop:
      watch:
        - path: ./
          target: autogpt_platform/backend/
          action: rebuild
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
      database_manager:
        condition: service_started
    # healthcheck:
    #   test:
    #     [
    #       "CMD",
    #       "curl",
    #       "-f",
    #       "-X",
    #       "POST",
    #       "http://localhost:8003/health_check",
    #     ]
    #   interval: 10s
    #   timeout: 10s
    #   retries: 5
    environment:
      <<: *backend-env
      SUPABASE_JWT_SECRET: your-super-secret-jwt-token-with-at-least-32-characters-long
      DATABASE_URL: postgresql://postgres:your-super-secret-and-long-postgres-password@db:5432/postgres?connect_timeout=60&schema=platform
      DIRECT_URL: postgresql://postgres:your-super-secret-and-long-postgres-password@db:5432/postgres?connect_timeout=60&schema=platform
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: password
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_DEFAULT_USER: rabbitmq_user_default
      RABBITMQ_DEFAULT_PASS: k0VMxyIJF9S35f3x2uaw5IWAl6Y536O7

    ports:
      - "8003:8003"
    networks:
      - app-network

  notification_server:
    build:
      context: ../
      dockerfile: autogpt_platform/backend/Dockerfile
      target: server
    command: ["python", "-m", "backend.notification"]
    develop:
      watch:
        - path: ./
          target: autogpt_platform/backend/
          action: rebuild
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
      database_manager:
        condition: service_started
    environment:
      <<: *backend-env
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: password
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_DEFAULT_USER: rabbitmq_user_default
      RABBITMQ_DEFAULT_PASS: k0VMxyIJF9S35f3x2uaw5IWAl6Y536O7

    ports:
      - "8007:8007"
    networks:
      - app-network
  frontend:
    build:
      context: ../
      dockerfile: autogpt_platform/frontend/Dockerfile
      target: prod
      # No build args needed - Dockerfile will use the .env file directly
    depends_on:
      db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    ports:
      - "3000:3000"
    networks:
      - app-network
    # Load environment variables from .env file
    env_file:
      - ./frontend/.env
    environment:
      # Server-side environment variables (Docker service names)
      # These override the localhost URLs from .env file when running in Docker
      AUTH_CALLBACK_URL: http://rest_server:8006/auth/callback
      SUPABASE_URL: http://kong:8000
      AGPT_SERVER_URL: http://rest_server:8006/api
      AGPT_WS_SERVER_URL: ws://websocket_server:8001/ws
networks:
  app-network:
    driver: bridge
