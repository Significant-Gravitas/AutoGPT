name: Python CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

concurrency:
  group: ${{ format('ci-{0}', format('pr-{0}', github.event.pull_request.number) || github.sha) }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  lint:
    runs-on: ubuntu-latest
    env:
      min-python-version: '3.10'

    steps:
    - name: Check out repository
      uses: actions/checkout@v3

    - name: Set up Python ${{ env.min-python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.min-python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint with flake8
      run: flake8

    - name: Check black formatting
      run: black . --check
      if: success() || failure()

    - name: Check isort formatting
      run: isort . --check
      if: success() || failure()

  test:
    permissions:
      # Gives the action the necessary permissions for publishing new
      # comments in pull requests.
      pull-requests: write
      # Gives the action the necessary permissions for pushing data to the
      # python-coverage-comment-action branch, and for editing existing
      # comments (to avoid publishing multiple comments in the same PR)
      contents: write
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11']

    steps:
    - name: Check out repository
      uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run unittest tests with coverage
      run: |
        pytest --cov=autogpt --without-integration --without-slow-integration

    - name: Generate coverage report
      run: |
        coverage report
        coverage xml
      if: success() || failure()

    - name: Coverage comment
      id: coverage_comment
      uses: py-cov-action/python-coverage-comment-action@v3
      with:
          GITHUB_TOKEN: ${{ github.token }}

    - name: Store Pull Request comment to be posted
      uses: actions/upload-artifact@v3
      if: steps.coverage_comment.outputs.COMMENT_FILE_WRITTEN == 'true'
      with:
        # If you use a different name, update COMMENT_ARTIFACT_NAME accordingly
        name: python-coverage-comment-action
        # If you use a different name, update COMMENT_FILENAME accordingly
        path: python-coverage-comment-action.txt
