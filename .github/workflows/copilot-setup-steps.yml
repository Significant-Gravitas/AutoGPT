name: "Copilot Setup Steps"

# Automatically run the setup steps when they are changed to allow for easy validation, and
# allow manual testing through the repository's "Actions" tab
on:
  workflow_dispatch:
  push:
    paths:
      - .github/workflows/copilot-setup-steps.yml
  pull_request:
    paths:
      - .github/workflows/copilot-setup-steps.yml

jobs:
  # The job MUST be called `copilot-setup-steps` or it will not be picked up by Copilot.
  copilot-setup-steps:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    # Set the permissions to the lowest permissions possible needed for your steps.
    # Copilot will be given its own token for its operations.
    permissions:
      # If you want to clone the repository as part of your setup steps, for example to install dependencies, you'll need the `contents: read` permission. If you don't clone the repository in your setup steps, Copilot will do this for you automatically after the steps complete.
      contents: read

    # You can define any steps you want, and they will run before the agent starts.
    # If you do not check out your code, Copilot will do this for you.
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      # Backend Python/Poetry setup (mirrors platform-backend-ci.yml)
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"  # Use standard version matching CI

      - name: Set up Python dependency cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: poetry-${{ runner.os }}-${{ hashFiles('autogpt_platform/backend/poetry.lock') }}

      - name: Install Poetry
        run: |
          # Extract Poetry version from backend/poetry.lock (matches CI)
          cd autogpt_platform/backend
          HEAD_POETRY_VERSION=$(python3 ../../.github/workflows/scripts/get_package_version_from_lockfile.py poetry)
          echo "Found Poetry version ${HEAD_POETRY_VERSION} in backend/poetry.lock"
          
          # Install Poetry
          curl -sSL https://install.python-poetry.org | POETRY_VERSION=$HEAD_POETRY_VERSION python3 -
          
          # Add Poetry to PATH
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Check poetry.lock
        working-directory: autogpt_platform/backend
        run: |
          poetry lock
          if ! git diff --quiet --ignore-matching-lines="^# " poetry.lock; then
            echo "Warning: poetry.lock not up to date, but continuing for setup"
            git checkout poetry.lock  # Reset for clean setup
          fi

      - name: Install Python dependencies
        working-directory: autogpt_platform/backend
        run: poetry install

      - name: Generate Prisma Client
        working-directory: autogpt_platform/backend
        run: poetry run prisma generate

      # Frontend Node.js/pnpm setup (mirrors platform-frontend-ci.yml)
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "21"

      - name: Enable corepack
        run: corepack enable

      - name: Set pnpm store directory
        run: |
          pnpm config set store-dir ~/.pnpm-store
          echo "PNPM_HOME=$HOME/.pnpm-store" >> $GITHUB_ENV

      - name: Cache frontend dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('autogpt_platform/frontend/pnpm-lock.yaml', 'autogpt_platform/frontend/package.json') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-${{ hashFiles('autogpt_platform/frontend/pnpm-lock.yaml') }}
            ${{ runner.os }}-pnpm-

      - name: Install JavaScript dependencies
        working-directory: autogpt_platform/frontend
        run: pnpm install --frozen-lockfile

      # Setup additional development tools
      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: 1.178.1

      - name: Setup GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y

      # Install Playwright browsers for frontend testing
      # NOTE: Disabled to save ~1 minute of setup time. Re-enable if Copilot needs browser automation (e.g., for MCP)
      # - name: Install Playwright browsers
      #   working-directory: autogpt_platform/frontend
      #   run: pnpm playwright install --with-deps chromium

      # Docker setup for development environment
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Copy default environment files
        working-directory: autogpt_platform
        run: |
          # Copy default environment files for development
          cp .env.default .env
          cp backend/.env.default backend/.env
          cp frontend/.env.default frontend/.env

      # Phase 1: Pull external images in parallel for faster setup
      - name: Pull external Docker images
        working-directory: autogpt_platform
        run: |
          echo "Pulling external images in parallel..."
          docker pull redis:latest &
          docker pull rabbitmq:management &
          docker pull clamav/clamav-debian:latest &
          docker pull busybox:latest &
          wait
          echo "External images pulled successfully"

      # Phase 2: Build migrate service with GitHub Actions cache
      - name: Build migrate Docker image with cache
        working-directory: autogpt_platform
        run: |
          # Build the migrate image with buildx for GHA caching
          docker buildx build \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            --target migrate \
            --tag autogpt_platform-migrate:latest \
            --load \
            -f backend/Dockerfile \
            ..

      # Start services using pre-built images
      - name: Start Docker services for development
        working-directory: autogpt_platform
        run: |
          # Start essential services (migrate image already built with correct tag)
          docker compose --profile local up deps --no-build --detach
          echo "Waiting for services to be ready..."
          # Wait for database to be ready (reduced timeout)
          timeout 30 sh -c 'until docker compose exec -T db pg_isready -U postgres 2>/dev/null; do sleep 1; done' || echo "Database ready check timeout, continuing..."
          # Wait for migrate service to complete (reduced timeout)
          timeout 30 sh -c 'until docker compose ps migrate | grep -q "Exit 0"; do sleep 1; done' || echo "Migration check timeout, continuing..."
          # Reduced wait for other services
          sleep 5

      # Verify installations and provide environment info
      - name: Verify setup and show environment info
        run: |
          echo "=== Python Setup ==="
          python --version
          poetry --version
          
          echo "=== Node.js Setup ==="
          node --version
          pnpm --version
          
          echo "=== Additional Tools ==="
          supabase --version
          docker --version
          docker compose version
          
          echo "=== Services Status ==="
          cd autogpt_platform
          docker compose ps || true
          
          echo "=== Backend Dependencies ==="
          cd backend
          poetry show | head -10 || true
          
          echo "=== Frontend Dependencies ==="
          cd ../frontend
          pnpm list --depth=0 | head -10 || true
          
          echo "=== Environment Files ==="
          ls -la ../.env* || true
          ls -la .env* || true
          ls -la ../backend/.env* || true
          
          echo "‚úÖ AutoGPT Platform development environment setup complete!"
          echo "üöÄ Ready for development with Docker services running"
          echo "üìù Backend server: poetry run serve (port 8000)"
          echo "üåê Frontend server: pnpm dev (port 3000)"