interactions:
- request:
    body: '{"messages": [{"content": "You are write_to_file-GPT, an AI designed to
      use the write_to_file command to write ''Hello World'' into a file named \"hello_world.txt\"
      and then use the task_complete command to complete the task.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the write_to_file command to write ''Hello World'' into a file named \"hello_world.txt\".\n2.
      Use the task_complete command to complete the task.\n3. Do not use any other
      commands.\n\n\nConstraints:\n1. ~4000 word limit for short term memory. Your
      short term memory is short, so immediately save important information to files.\n2.
      If you are unsure how you previously did something or want to recall past events,
      thinking about similar events will help you remember.\n3. No user assistance\n4.
      Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. write_to_file:
      Write to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n6.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n9. list_agents: List
      GPT Agents, args: () -> str\n10. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n11. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n12.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads", "role": "system"},
      {"content": "The current time and date is Tue Jan  1 00:00:00 2000", "role":
      "system"}, {"content": "Determine which next command to use, and respond using
      the format specified above:", "role": "user"}], "model": "gpt-3.5-turbo", "temperature":
      0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3391'
      Content-Type:
      - application/json
      X-Content-Hash:
      - 265b975f6ebdc42e5fea67adbdbb02ba51784bb15a1b7a255f0dfc4b7a1cdf4a
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7yTQY/TMBCF7/yK0Vx6cau023a7uQESsEICCbECiaDKdaaJqWMHe6IuVPnvyEm6
        3Q3ihOA6b/LeN+PJCXWOKapSsqpqM71+e6cX737aZFl/eM7vd8vXL6rm1edi93I536NAt/tGiocv
        ZspVtSHWzqJA5Uky5ZjO15vVfL65WS8EVi4ngykWNU+vZqspN37npslVMkeBTZAFYXrC2ruq5i27
        A9mA6fVqI/Di/VBfJAuB7Fiah9LNOmkFqtJpRQHTLyesKJxtvTOEKcoQdGBpOUI6y2TjAKfMAgBk
        yKVripJDhikMxUGge47FDG/BEuXADppAwCXB0WumLbvtXhsC5apK2q6hE2Dyhoxx8Ml5k09AW3Yg
        oWu1sqIcJmXUt8eoz/ieJ7MMxeNsTzI4q23RA3wsCViGA3j63mhPASr6izQBHe0f59ChE2Vde1d7
        Lfki7Z0HLmODDIcxdW2k7YGncPefNqW8Zq10qMZPRTY0PjJIhluQFTRB26JjUs57UnzJGfYhuZPj
        w8cdREIme243P8bZoSZ5OOcetTH/8j764Fac73Yw/e1so0PP9ARihC59Mb74Xoi9F4sRxxOT8V/y
        aKYzbUc8gGe2xVbgXlsdym1/4JhiYFejQG1zusc0ab+2z34BAAD//wMASj5S/5UEAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd76f4e1f00811f-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 16:36:25 GMT
      Function-Execution-Id:
      - avx8b88pjq23
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '22788'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 997ebedeaf612731d388a171b505881f;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86497'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.335s
      X-Request-Id:
      - c2cebf84f286b52da3f37d2a8fdf354e
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are write_to_file-GPT, an AI designed to
      use the write_to_file command to write ''Hello World'' into a file named \"hello_world.txt\"
      and then use the task_complete command to complete the task.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the write_to_file command to write ''Hello World'' into a file named \"hello_world.txt\".\n2.
      Use the task_complete command to complete the task.\n3. Do not use any other
      commands.\n\n\nConstraints:\n1. ~4000 word limit for short term memory. Your
      short term memory is short, so immediately save important information to files.\n2.
      If you are unsure how you previously did something or want to recall past events,
      thinking about similar events will help you remember.\n3. No user assistance\n4.
      Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. write_to_file:
      Write to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n6.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n9. list_agents: List
      GPT Agents, args: () -> str\n10. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n11. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n12.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads", "role": "system"},
      {"content": "The current time and date is Tue Jan  1 00:00:00 2000", "role":
      "system"}, {"content": "This reminds you of these events from your past: \nI
      was created", "role": "system"}, {"content": "Determine which next command to
      use, and respond using the format specified above:", "role": "user"}, {"content":
      "{\n    \"thoughts\": {\n        \"text\": \"I need to use the write_to_file
      command to write ''Hello World'' into a file named ''hello_world.txt''.\",\n        \"reasoning\":
      \"The task requires me to write ''Hello World'' into a file named ''hello_world.txt'',
      and the write_to_file command is the appropriate command for this task.\",\n        \"plan\":
      \"- Use the write_to_file command to write ''Hello World'' into a file named
      ''hello_world.txt''.\",\n        \"criticism\": \"I need to ensure that I am
      using the correct file name and that the text is written correctly.\",\n        \"speak\":
      \"I will use the write_to_file command to write ''Hello World'' into a file
      named ''hello_world.txt''.\"\n    },\n    \"command\": {\n        \"name\":
      \"write_to_file\",\n        \"args\": {\n            \"filename\": \"hello_world.txt\",\n            \"text\":
      \"Hello World\"\n        }\n    }\n}", "role": "assistant"}, {"content": "Command
      write_to_file returned: File written to successfully.", "role": "system"}, {"content":
      "Determine which next command to use, and respond using the format specified
      above:", "role": "user"}], "model": "gpt-3.5-turbo", "temperature": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4623'
      Content-Type:
      - application/json
      X-Content-Hash:
      - 397b6d3aeb26212aaa649c74f8af32d42dfd7502662be60623350cb10faad8e6
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7SSTW/TQBCG7/yK0Vxy2UR2q4bER6RKtFwQNCCBUbRZT+wl691ld9wGRf7vyLFN
        QmkPgLjO5/vMvAfUBWaoKsmq9mb68s1Kr+TtK1PUN/MPzfVy/t69e3v9SYbN8hYFus1XUjx0zJSr
        vSHWzqJAFUgyFZil88VVmi6Wy0Rg7QoymGHpeXo5u5pyEzZumlwmKQpsoiwJswP64GrPa3Y7shGz
        NLlIBZ6GnxKLhUB2LM0pdJEsW4GqclpRxOzzAWuK4+DgDGGGMkYdWVruZDrLZDuEQ24BAHLkyjVl
        xTHHDIbgkKA9d8Ecb6CS9wSxUYpi3DbGfIeHoJnJwuQ1GePgowummIC27EDCVhsCK2sqYFJ1+fVD
        l5/xniczuKsILO0ZIpMHHYEdNJGAKwKWcbce4AmUq2tpi67gZ2ysmuUozuUGktFZbcte891QBoG+
        NTpQhJqenANyyxSOPNqWf84j4KjwWe0dX0UgvQ/OBy3PUlsXgKuu4Akeb6TtUaaw+ufrqA5P6ViP
        H7VEx06ysQldn2QY/uyDu9cFFSChP+pR6OhIWz67JHqSu3HBgzbm797aj2zF6NCh/DeDdg/pt/0y
        /pEoGcrH3j43zP9w+IhwxBhocttiK3CrrY7Vut+NGUZ2HgVqW9Aes6T90r74AQAA//8DAGA/y4mW
        BAAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd76ff8c80c1136-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 16:36:52 GMT
      Function-Execution-Id:
      - avx8tp0avbli
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '22115'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 50e3dcee3952c9683588ee097e607cf6;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86002'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.664s
      X-Request-Id:
      - aacaa64be2a10adf401f93f880e9fe53
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "Write a concise summary of the following text:\n\n\nLITERAL
      TEXT: \"\"\"Hello World\"\"\"\n\n\nCONCISE SUMMARY: The text is best summarized
      as", "role": "user"}], "model": "gpt-3.5-turbo", "temperature": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '252'
      Content-Type:
      - application/json
      X-Content-Hash:
      - 731fb1a9a7420e17ee6ea136ba89ccfbd2b71a81ba3d55b9661e8ac77eb47184
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0SOzUrDQBRG9z5F+NaTkJj+ztaNoq40CFop08ltMnUyN8zcUqHk3aWgdXvgHM4Z
        roWG7Y3YYfT58rE5vD89NC9lI3Jq6nW8s83tcHrt0zNBgXcHsvJrFJaH0ZM4DlCwkYxQC10tVvOq
        WpfzpcLALXlodKPkdTHP5Rh3nJd1WUHhmExH0GeMkYdRtsJfFBJ0vVD4T1/xSkFYjL+C2WxSsD07
        Swn644yB0l8ysidomJRcEhPkMshBKFzmTZbcJZ91kUhc6DLeZxvck/ecvXH0bbEBJoW9Cy7120gm
        cYBGEh6h4EJL39Dl9Dnd/AAAAP//AwBwuQCLQgEAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd7719addf31cff-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 16:37:38 GMT
      Function-Execution-Id:
      - avx8elsv7fot
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '1483'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - c4cb27420e2863291e72376db30447b8;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89466'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 356ms
      X-Request-Id:
      - ad4ac6f206c7d1c99dd81220213025ea
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are write_to_file-GPT, an AI designed to
      use the write_to_file command to write ''Hello World'' into a file named \"hello_world.txt\"
      and then use the task_complete command to complete the task.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the write_to_file command to write ''Hello World'' into a file named \"hello_world.txt\".\n2.
      Use the task_complete command to complete the task.\n3. Do not use any other
      commands.\n\n\nConstraints:\n1. ~4000 word limit for short term memory. Your
      short term memory is short, so immediately save important information to files.\n2.
      If you are unsure how you previously did something or want to recall past events,
      thinking about similar events will help you remember.\n3. No user assistance\n4.
      Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. write_to_file:
      Write to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n6.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n9. list_agents: List
      GPT Agents, args: () -> str\n10. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n11. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n12.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads", "role": "system"},
      {"content": "The current time and date is Tue Jan  1 00:00:00 2000", "role":
      "system"}, {"content": "Determine which next command to use, and respond using
      the format specified above:", "role": "user"}], "model": "gpt-3.5-turbo", "temperature":
      0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3388'
      Content-Type:
      - application/json
      X-Content-Hash:
      - 8662006119e7c70b0a7fab0edb496d435b8b1f7d42bc0d0a28fb498cf416efe8
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7SUwW7bMAyG73sKgpdcnCBu1mbzfcCKDcMOXYthHgJVZmy1sihITBMsyLsPsp2k
        8bBjr/ypnx8pSns0FRaoGyW69Xa6/HL/EJrF1z95/fLN36p69/3+7uXpk81vfnrMkB+fSMtwYqa5
        9ZbEsMMMdSAlVGGR33y4zq+u8nyRYcsVWSyw9jJdzK6nsgmPPJ0v5jlmuImqJiz26AO3XlbCz+Qi
        FsvrZYZn71P8ar7MUFiUPYU+3rw/ZKgbNpoiFr/22FI82ga2hAWqGE0U5SRBshNyqYF96QAASpSG
        N3UjscQChuAg0E5SsMRbcEQVCMMmEkhDsA1GaCW8WhtLoLltlesSOgEmn8lahgcOtpqAccKgoEt1
        qqUKJk3SV9ukz2Qnk1mJ2evagVRkZ1zdA9z9t6SJHU/LUUB5H9gHo+SsrzmANClLxWdQEYyAspa3
        EVo6A6de4Uy5NdKAguhJm7WhqsMeM3qrXI83hR9vNpfSnd1TD6thMS7cT7Fj1phVByNGm9iOL5Rc
        3IR0Tgncnq5XcwikpUNLZNDVGWY0TIy7zJQxLhY9qedjoa2x9i3Xpi98yI7rPJj+s83JoWe6gBih
        q1CPH0IvHCfRW4w4LkzGj+dVT0fajngAL90BDxmujTOxWfV7jwVG4fTfGFfRDov54ffh3V8AAAD/
        /wMAPIAo/awEAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd7bc377e0910e5-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 17:28:56 GMT
      Function-Execution-Id:
      - h2muu78hnvnz
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '23507'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 4d5dd1ad6c9c2d857c0a84e8a37d0769;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86497'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.335s
      X-Request-Id:
      - 249e67594458ef55a31db9db01945251
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are write_to_file-GPT, an AI designed to
      use the write_to_file command to write ''Hello World'' into a file named \"hello_world.txt\"
      and then use the task_complete command to complete the task.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the write_to_file command to write ''Hello World'' into a file named \"hello_world.txt\".\n2.
      Use the task_complete command to complete the task.\n3. Do not use any other
      commands.\n\n\nConstraints:\n1. ~4000 word limit for short term memory. Your
      short term memory is short, so immediately save important information to files.\n2.
      If you are unsure how you previously did something or want to recall past events,
      thinking about similar events will help you remember.\n3. No user assistance\n4.
      Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. write_to_file:
      Write to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n6.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n9. list_agents: List
      GPT Agents, args: () -> str\n10. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n11. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n12.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads", "role": "system"},
      {"content": "The current time and date is Tue Jan  1 00:00:00 2000", "role":
      "system"}, {"content": "This reminds you of these events from your past: \nI
      was created", "role": "system"}, {"content": "Determine which next command to
      use, and respond using the format specified above:", "role": "user"}, {"content":
      "{\n    \"thoughts\": {\n        \"text\": \"I need to use the write_to_file
      command to write ''Hello World'' into a file named ''hello_world.txt''.\",\n        \"reasoning\":
      \"The write_to_file command is the most appropriate command for this task as
      it allows me to write text to a file with a specified name.\",\n        \"plan\":
      \"- Use the write_to_file command to write ''Hello World'' into a file named
      ''hello_world.txt''.\\n- Use the task_complete command to complete the task.\",\n        \"criticism\":
      \"I need to ensure that I use the correct filename and text to write to the
      file.\",\n        \"speak\": \"I will use the write_to_file command to write
      ''Hello World'' into a file named ''hello_world.txt''.\"\n    },\n    \"command\":
      {\n        \"name\": \"write_to_file\",\n        \"args\": {\n            \"filename\":
      \"hello_world.txt\",\n            \"text\": \"Hello World\"\n        }\n    }\n}",
      "role": "assistant"}, {"content": "Command write_to_file returned: File written
      to successfully.", "role": "system"}, {"content": "Determine which next command
      to use, and respond using the format specified above:", "role": "user"}], "model":
      "gpt-3.5-turbo", "temperature": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4643'
      Content-Type:
      - application/json
      X-Content-Hash:
      - 1422ee2ea315c7c96f538b8a6b803e2970dcf74fab2c73a951e18d5ad15d470e
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6SSTW/bMAyG7/sVBC+5OEac1lvnYw9BgwHDgHUfxTwEqsxYWmTJk+glReD/Xvgj
        SZu12GFHkdTL5yW5R11ghlIJllVtpu8+fP2+XDx8TFS5S6/v3CfvPic3d+lyUS6uMUJ3/4skjz9i
        6araEGtnMULpSTAVmCVvr9JkPk8uZxFWriCDGZY1Ty/idMqNv3fT2cUswQibIErCbI+1d1XNK3Yb
        sgGzZDZPIzyJnxLp+wjZsTCnUHJ12UYoldOSAmY/9lhROAh7ZwgzFCHowMJyh+ksk+0s7HMLAJAj
        K9eUikOOGYzBMUE77oI5LkGJPwShkZJCWDfGPMDWa2ayMLkhYxx8c94UE2AHrAjW2hBMVJdZbbtM
        zDuexLAEKSxYt4UmUF/JImxWo1kC6apK2KKTOcYOVXGO0VM8TyI4q205MN6OZaDD6W+vpcgTCE9g
        Hawb371ByG60ATz9brSnIobbV2G22hgIqmEo3Nb2PKIky706DR1eJKyNsAPcFL78t1/pNWupQ3X0
        e7J1zAVYOw+sdHhRI9QkNq/Pq1tQ7/af2zmzPfRoo8NNjZV/nZQVFQ3tnymfUQpfnl/j05WP/B37
        QaB4dptHoB5qZMtti22Ea211UKtBCTMM7GqMUNuCdpjN2p/tm0cAAAD//wMAMg3FGhYEAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd7bce029ce0252-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 17:29:15 GMT
      Function-Execution-Id:
      - rj7taejgfw5p
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '15072'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 931ad234b94d2a400a5c15fff0a338e2;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86002'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.665s
      X-Request-Id:
      - 418d05ba7da82f0ab0d945d491a27e48
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are write_to_file-GPT, an AI designed to
      use the write_to_file command to write ''Hello World'' into a file named \"hello_world.txt\"
      and then use the task_complete command to complete the task.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the write_to_file command to write ''Hello World'' into a file named \"hello_world.txt\".\n2.
      Use the task_complete command to complete the task.\n3. Do not use any other
      commands.\n\n\nConstraints:\n1. ~4000 word limit for short term memory. Your
      short term memory is short, so immediately save important information to files.\n2.
      If you are unsure how you previously did something or want to recall past events,
      thinking about similar events will help you remember.\n3. No user assistance\n4.
      Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. write_to_file:
      Write to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n6.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n9. list_agents: List
      GPT Agents, args: () -> str\n10. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n11. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n12.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks!\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads", "role": "system"},
      {"content": "The current time and date is Tue Jan  1 00:00:00 2000", "role":
      "system"}, {"content": "Determine which next command to use, and respond using
      the format specified above:", "role": "user"}], "model": "gpt-3.5-turbo", "temperature":
      0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3391'
      Content-Type:
      - application/json
      X-Content-Hash:
      - 7fd7d1f692662d029a072b2f7113d771a336bb18cbd2db09f5441a5b6f60570c
    method: POST
    uri: https://api.openai.com/test/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA8SUwW7bMAyG73sKgpdcnCBJmyXzbRiGrdthlxUtMA+BIjO2VlkyRBopFuTdB9lx
        krpoD8OAHU2KP7+forVHk2OKulSiq9qOl1/v36uiWt5/ub3PuaQPc7X49tt9vPsUKo8J+s0v0nKs
        mGhf1ZbEeIcJ6kBKKMd09na1mM1X1/NpgpXPyWKKRS3jq8liLE3Y+PH0ajrDBBtWBWG6xzr4qpa1
        +AdyjOlysUrwrH2Kz1fvEhQvyp5Cs+n18pCgLr3RxJj+2GNF3OsGbwlTVMyGRTmJlN4JuehgnzkA
        gAyl9E1RCmeYwjF4TNCjxGCGN+CIchAPu2CEYPSZrPVw54PNR2CceFCwNZbAqYpyGJUxv97F/EQe
        ZQTK5SAlOTj6ovgFovhhAt9LglErvBa/jjKjeKyKNVo52BA0fNk+gsGp5wRuYGesjYdASsOn4hd4
        xbfNW95npJMMk8shBFLsnXFFN4nXWA23upVnAVXXwdfBKKFLnIi49aHDjO5BMRgBZa3fMVT0f0zW
        VrnO3xhuububl1z+Tb8scxfC0fe634Mnws+WY8CpgxGjDVfDtSTHTYhlSuAGVAUNG1e0MtqHQFrO
        63ncRSWv2jQM3GhNzNvGgnGt6aj5su0NbX2g3kTfv93xgQ+uST30Hi6u9d9O/bWfLsOO55D0z8Cx
        07NXII6sQ32CNnCkQjF8QLpEPHuWGCA+ERk+OhdGe9qW+AieuQMeEtwaZ7hcd78ppsjia0zQuJwe
        MZ0efh7e/AEAAP//AwCwEGSC5QUAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd8562fcd02115f-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 19:14:08 GMT
      Function-Execution-Id:
      - vae2vljex8vr
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '28379'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - e431bf8fae1e340a1d948c138e4d0242;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86497'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.335s
      X-Request-Id:
      - 940bd1e525d990696f77d7f53fe4fcc7
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are write_to_file-GPT, an AI designed to
      use the write_to_file command to write ''Hello World'' into a file named \"hello_world.txt\"
      and then use the task_complete command to complete the task.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the write_to_file command to write ''Hello World'' into a file named \"hello_world.txt\".\n2.
      Use the task_complete command to complete the task.\n3. Do not use any other
      commands.\n\n\nConstraints:\n1. ~4000 word limit for short term memory. Your
      short term memory is short, so immediately save important information to files.\n2.
      If you are unsure how you previously did something or want to recall past events,
      thinking about similar events will help you remember.\n3. No user assistance\n4.
      Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. write_to_file:
      Write to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n6.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n9. list_agents: List
      GPT Agents, args: () -> str\n10. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n11. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n12.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks!\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads", "role": "system"},
      {"content": "The current time and date is Tue Jan  1 00:00:00 2000", "role":
      "system"}, {"content": "This reminds you of these events from your past: \nI
      was created", "role": "system"}, {"content": "Determine which next command to
      use, and respond using the format specified above:", "role": "user"}, {"content":
      "{\n    \"thoughts\": {\n        \"text\": \"I need to write ''Hello World''
      into a file named ''hello_world.txt'' and then complete the task. The ''write_to_file''
      command can be used to write text to a file. I will use this command to write
      ''Hello World'' to the file ''hello_world.txt''.\",\n        \"reasoning\":
      \"The ''write_to_file'' command is the most appropriate command to use for this
      task as it allows me to write text to a file. I will use this command to write
      ''Hello World'' to the file ''hello_world.txt''.\",\n        \"plan\": \"- Use
      the ''write_to_file'' command to write ''Hello World'' to the file ''hello_world.txt''\\n-
      Use the ''task_complete'' command to complete the task\",\n        \"criticism\":
      \"I need to ensure that I am using the correct file name and that the ''write_to_file''
      command is successful in writing ''Hello World'' to the file before completing
      the task.\",\n        \"speak\": \"I will use the ''write_to_file'' command
      to write ''Hello World'' to the file ''hello_world.txt'' and then complete the
      task.\"\n    },\n    \"command\": {\n        \"name\": \"write_to_file\",\n        \"args\":
      {\n            \"filename\": \"hello_world.txt\",\n            \"text\": \"Hello
      World\"\n        }\n    }\n}", "role": "assistant"}, {"content": "Command write_to_file
      returned: File written to successfully.", "role": "system"}, {"content": "Determine
      which next command to use, and respond using the format specified above:", "role":
      "user"}], "model": "gpt-3.5-turbo", "temperature": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4958'
      Content-Type:
      - application/json
      X-Content-Hash:
      - fcc6322bcaedbf1f2bd0703225fb0a9ad554df51c095eeed0469514352ebb046
    method: POST
    uri: https://api.openai.com/test/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7RTTW/bMAy971cQvOTiGHaytoGPO7XoTl27dZiHQJUZW6sseSK9ZAjy3wcldj/S
        ocAK7CbxkY/vEeQWTYUF6kaJbjs7Pbu8/XB605h89fFzvVb5LLuYn7e3+uvl2dUVJujvfpCWoSLV
        vu0sifEOE9SBlFCFRX66OMlni/cnswRbX5HFAutOpvP0ZCp9uPPTbJ7lmGDPqiYsttgF33ayFH9P
        jrHI82yR4CP5AzDLZgmKF2Ufc+d5tktQN95oYiy+bbElHomDt4QFKmbDopxEmd4JuWhhWzoAgBKl
        8X3dCJdYwBAcANpIDJZ4AY36RcC91sS86q39DetgRMjB5Jys9fDFB1tNQDxIQ7AylmDSRGS5jkgq
        G5mkcN0QONoIsFAHhmP+4JT2haL4Hno2rt5/J/G/HDMmMbdVrkpLTJ4qDaTYO+Pqg9zrkSjQz94E
        YmgpdoqS6V8Eg3JVhN1LkSl8Mk4TvGk0yf71HwbRWeUOM5jCDdNrpX/teESngxGjDbfjGjiifSE5
        7kMsU/JqD8NPJgPmYY6jrb3LO1r5QECuGsNMzMa7Y3fckbofpayNtdC/wWNa4oF0l4wnMKS/uACn
        Wjr0e8Z/JEuF+vh4nq7lsJPR6UhQPduXB0F7UYO20u1wl+DKOMPN8sCEBbL4DhM0rqINFtnu++7d
        HwAAAP//AwBc46MfxQQAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7cd856fae9832261-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 19:14:31 GMT
      Function-Execution-Id:
      - vae2r69r0i0u
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '18795'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 86cc49cacbdc3eb99a8306e51f590bad;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86005'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.662s
      X-Request-Id:
      - fddbe709cb3dec722514bab695af96ad
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are write_to_file-GPT, an AI designed to
      use the write_to_file command to write ''Hello World'' into a file named \"hello_world.txt\"
      and then use the task_complete command to complete the task.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the write_to_file command to write ''Hello World'' into a file named \"hello_world.txt\".\n2.
      Use the task_complete command to complete the task.\n3. Do not use any other
      commands.\n\n\nConstraints:\n1. ~4000 word limit for short term memory. Your
      short term memory is short, so immediately save important information to files.\n2.
      If you are unsure how you previously did something or want to recall past events,
      thinking about similar events will help you remember.\n3. No user assistance\n4.
      Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. replace_in_file:
      Replace text or code in a file, args: \"filename\": \"<filename>\", \"old_text\":
      \"<old_text>\", \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n6.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n7. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n8.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n9. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n10.
      list_agents: List GPT Agents, args: () -> str\n11. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n12. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n13. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads", "role": "system"}, {"content": "The current
      time and date is Tue Jan  1 00:00:00 2000", "role": "system"}, {"content": "Determine
      which next command to use, and respond using the format specified above:", "role":
      "user"}], "model": "gpt-3.5-turbo", "temperature": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3586'
      Content-Type:
      - application/json
      X-Content-Hash:
      - 721385c84f0a17918666c90017aa98930ba7604db4bd16190f12e92e04f255c0
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7yTz47TQAzG7zyF5UsvaZW00O3mBaAHQEJFCAiKZidOMnQyk51xaKHqu6P8a7dB
        e0Jw9Wd//tnjOaHKMEZZCpZVred37z/8+vL4+nj3WW43mg6rd9l9xm9VvlvnFgO0D99J8lCxkLaq
        NbGyBgOUjgRThnG03qzDdbRZ3gdY2Yw0xljUPF8tXs25cQ92Hq7CCANsvCgI4xPWzlY1p2z3ZDzG
        m/AuwKv3Jb6MXgbIloW+hKJwGZ0DlKVVkjzGX09YkR99ndWEMQrvlWdhuKW0hsm0E5wSAwCQIJe2
        KUr2CcYwBAeBjtwGE9zCQWkNjSfgkuDgFFPKNs2VJpC2qoTJgG0vwOwNaW3hk3U6m4EybEFAl2pE
        RRnMylZPD62+4CPPFgkGTxs7Et4aZYq++64kYOH34OixUY48VPQ33WD37AzKdwNW1jOIuna2dkrw
        Vc+tAy7bLOH3U+xaC9MTz+HjP1tVYq7uLUU6XMqN+yU2Zk1ZpVOspPLV+MCGqKsk4xvX1gmGLZTi
        R+vrHEnWP8HXJFWu2sySOs4WE7qmdGQQrmgqMuyHRT0z/xTG1yT2/+vS+sbnYDz/wfSP628deqYb
        iAm6cMX04/TCuJzeYsJxYzL9bE9mGmk74gE8MWc8B5gro3yZ9l8FY/RsawxQmYyOGIfnb+cXvwEA
        AP//AwAjBkmE3QQAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d315a82b9cd8764-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 06 Jun 2023 14:30:48 GMT
      Function-Execution-Id:
      - 3nyo1vqxrxkq
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '18761'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - d666e36ed26a929b63a61d51e3750aa8;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86502'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.332s
      X-Request-Id:
      - 403e15c1f170cfff506f8229cdd0b50a
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are write_to_file-GPT, an AI designed to
      use the write_to_file command to write ''Hello World'' into a file named \"hello_world.txt\"
      and then use the task_complete command to complete the task.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the write_to_file command to write ''Hello World'' into a file named \"hello_world.txt\".\n2.
      Use the task_complete command to complete the task.\n3. Do not use any other
      commands.\n\n\nConstraints:\n1. ~4000 word limit for short term memory. Your
      short term memory is short, so immediately save important information to files.\n2.
      If you are unsure how you previously did something or want to recall past events,
      thinking about similar events will help you remember.\n3. No user assistance\n4.
      Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. replace_in_file:
      Replace text or code in a file, args: \"filename\": \"<filename>\", \"old_text\":
      \"<old_text>\", \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n6.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n7. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n8.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n9. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n10.
      list_agents: List GPT Agents, args: () -> str\n11. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n12. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n13. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads", "role": "system"}, {"content": "The current
      time and date is Tue Jan  1 00:00:00 2000", "role": "system"}, {"content": "This
      reminds you of these events from your past: \nI was created", "role": "system"},
      {"content": "Determine which next command to use, and respond using the format
      specified above:", "role": "user"}, {"content": "{\n    \"thoughts\": {\n        \"text\":
      \"I will use the write_to_file command to write ''Hello World'' into a file
      named ''hello_world.txt''.\",\n        \"reasoning\": \"The task requires me
      to write ''Hello World'' into a file named ''hello_world.txt''. The write_to_file
      command is the most appropriate command for this task.\",\n        \"plan\":
      \"- Use the write_to_file command to write ''Hello World'' into a file named
      ''hello_world.txt''.\\n- Use the task_complete command to complete the task.\",\n        \"criticism\":
      \"I need to ensure that I have correctly specified the filename and text arguments
      for the write_to_file command.\",\n        \"speak\": \"I will use the write_to_file
      command to write ''Hello World'' into a file named ''hello_world.txt''.\"\n    },\n    \"command\":
      {\n        \"name\": \"write_to_file\",\n        \"args\": {\n            \"filename\":
      \"hello_world.txt\",\n            \"text\": \"Hello World\"\n        }\n    }\n}",
      "role": "assistant"}, {"content": "Command write_to_file returned: File written
      to successfully.", "role": "system"}, {"content": "Determine which next command
      to use, and respond using the format specified above:", "role": "user"}], "model":
      "gpt-3.5-turbo", "temperature": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4889'
      Content-Type:
      - application/json
      X-Content-Hash:
      - d05a2ec04bd7ced153039adf2e6e5aa422a4b45950183902348c7221095bea5a
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA8yUwY7TMBCG7zzFaC69uFXa1XbbPACiQgtiKeJAUOV1polbxw72ZFuo8u7ITdrd
        LXBYwYGrZ+b3949nfECdY4qqlKyq2gxv3t/92Pnl5vZB3r2dv5s3Lnx8fZssN8UHWaNAd78hxX3F
        SLmqNsTaWRSoPEmmHNPxdDZNpuPZ9URg5XIymGJR8/BqdD3kxt+7YXKVjFFgE2RBmB6w9q6qecVu
        SzZgOk5mE4GP4ufAJLkRyI6lecydzOatQFU6rShg+uWAFYWTsHeGMEUZgg4sLUdMZ5lstHDILABA
        hly6pig5ZJhCf9gHaM/xMMMFlPKBIDRKUQjrxpjvsPOamSwM3pAxDj47b/IBaMsOJKy1IbCyohwG
        ZYyvdjE+4j0PRrCAnTYGrNtBEwi4JGAZtqveM4FyVSVtDuzgfHbKGmUonlJ6ksFZbYsOddmngadv
        jfYUoKKoE3Hp5bBwxCjJ/gYEXtiWWBjvEhAcLEBJ+49aUBtpO/dD+PTXaspr1kqH6vT2luhYSTY0
        PtZJPluvSem1pmOPoHsKkL5oKrIMa+f/zHJ5bahJbv/LcesoW3FamD79l32JAJ2BZ/IXPqUvLlft
        6SD3Uxwn+CSQP+vEGegI1bNltsVW4FpbHcpVp4QpBnbx29I2pz2mSfu1ffUTAAD//wMAi4lonvME
        AAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d315b144d8e635d-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 06 Jun 2023 14:31:18 GMT
      Function-Execution-Id:
      - 3nyogdpfoqiz
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '25743'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 86a142e65723cf7e49649bd8e5f082e7;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86002'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.665s
      X-Request-Id:
      - 8221d4b8c69e26d1b4b0c167bb5efe3c
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are File System Agent, an AI designed to
      manage a file system.\nYour decisions must always be made independently without
      seeking user assistance. Play to your strengths as an LLM and pursue simple
      strategies with no legal complications.\n\nGOALS:\n\n1. Write ''Hello World''
      into a file named \"hello_world.txt\".\n\n\nConstraints:\n1. ~4000 word limit
      for short term memory. Your short term memory is short, so immediately save
      important information to files.\n2. If you are unsure how you previously did
      something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. analyze_code: Analyze Code, args: \"code\":
      \"<full_code_string>\"\n2. execute_python_code: Create a Python file and execute
      it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n3. execute_python_file:
      Execute Python File, args: \"filename\": \"<filename>\"\n4. append_to_file:
      Append to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n5.
      delete_file: Delete file, args: \"filename\": \"<filename>\"\n6. list_files:
      List Files in Directory, args: \"directory\": \"<directory>\"\n7. read_file:
      Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file: Replace
      text or code in a file, args: \"filename\": \"<filename>\", \"old_text\": \"<old_text>\",
      \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads", "role": "system"},
      {"content": "The current time and date is Tue Jan  1 00:00:00 2000", "role":
      "system"}, {"content": "Determine which next command to use, and respond using
      the format specified above:", "role": "user"}], "model": "gpt-3.5-turbo", "temperature":
      0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4008'
      Content-Type:
      - application/json
      X-Content-Hash:
      - dd5f00302ee4d568fffb61a17243384bc66d9fa47a1963a3f4f71c9845cab9f6
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7RTTY/aMBC98ytGvuQCiA8BXc4V6kpdbZFaVVVZIW88JC6OJ7UnCyziv1eOk2U3
        VdtTr+953rw3njn3AIRWYgkizSWnRWkGi09yfTe6X5vF6ttO33/8uTjOV/ti9Xzzfj0T/VBBjz8w
        5bZqmFJRGmRNNtKpQ8kYVMfzd/PpdDJbjGqiIIUmlGUlD6bD2YAr90iD0XQ0jpWVlxmKJZx7AACi
        dFSUvGXao/ViCTfjWT8y15ZXdjKaNCwTS3MlxuPxogdwieZy0ikG+Hv9OLYK5tC/6V6DjkxAhPRe
        e5aWRf9KpmQZbT2H88YGaCM4pyrL2W+CTgQbAo8cwI24O0FG0oD2wAQHpxkh+YDGEHwlZ1QC2jKB
        hJ02CFYWqCDJA789BH7IR06G8DlHKMgzeHZSZznvyB2kU3CQpyCsCDjXvmlTeQTOEZK635ZpG9QT
        SKkopFVDuIWDNgYsogrvS0dPWsWa8DLYAGlVDYQsV+9ML6+GG9F/Hdqh9GS1zWLyW8jlU5CR5vSM
        Uat09GiwqLUVMrpC24aq0+Fup1ONlsGTqcKPd5uURtqoP4Avf4/5p4H/e9ydnqnTrFPtizaYIpsw
        eAzpTqC9r9DDQXMePyF47Gr4EuW+ra+HX/0/97Hxpd/uaSP525oGhejpjYeOdemy7oZHol2VKNHx
        8UakexWvErVua8eN8Y29iObyLu0Jip222ufbuGXhDD1T+XKhQluFR7GEUQ1cegAPvUvvFwAAAP//
        AwDJHC+/9AQAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d4b2c625e7129d0-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 09 Jun 2023 17:43:00 GMT
      Function-Execution-Id:
      - ktgz3q549ld5
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '10534'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - e8bef7211078878371e4bde38a7a43b3;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86419'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.386s
      X-Request-Id:
      - c0345e3295af9d32143d194e0098d930
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are File System Agent, an AI designed to
      manage a file system.\nYour decisions must always be made independently without
      seeking user assistance. Play to your strengths as an LLM and pursue simple
      strategies with no legal complications.\n\nGOALS:\n\n1. Write ''Hello World''
      into a file named \"hello_world.txt\".\n\n\nConstraints:\n1. ~4000 word limit
      for short term memory. Your short term memory is short, so immediately save
      important information to files.\n2. If you are unsure how you previously did
      something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. analyze_code: Analyze Code, args: \"code\":
      \"<full_code_string>\"\n2. execute_python_code: Create a Python file and execute
      it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n3. execute_python_file:
      Execute Python File, args: \"filename\": \"<filename>\"\n4. append_to_file:
      Append to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n5.
      delete_file: Delete file, args: \"filename\": \"<filename>\"\n6. list_files:
      List Files in Directory, args: \"directory\": \"<directory>\"\n7. read_file:
      Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file: Replace
      text or code in a file, args: \"filename\": \"<filename>\", \"old_text\": \"<old_text>\",
      \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads", "role": "system"},
      {"content": "The current time and date is Tue Jan  1 00:00:00 2000", "role":
      "system"}, {"content": "This reminds you of these events from your past: \nI
      was created", "role": "system"}, {"content": "Determine which next command to
      use, and respond using the format specified above:", "role": "user"}, {"content":
      "{\n    \"thoughts\": {\n        \"text\": \"My goal is to write ''Hello World''
      into a file named ''hello_world.txt''. The most straightforward way to do this
      is to use the ''write_to_file'' command. I will need to provide the filename
      and the text to write to the file.\",\n        \"reasoning\": \"I have analyzed
      the problem and determined the most efficient solution.\",\n        \"plan\":
      \"- Use the ''write_to_file'' command to write ''Hello World'' to a file named
      ''hello_world.txt''.\",\n        \"criticism\": \"I don''t see any issues with
      this plan.\",\n        \"speak\": \"I will use the ''write_to_file'' command
      to write ''Hello World'' to a file named ''hello_world.txt''.\"\n    },\n    \"command\":
      {\n        \"name\": \"write_to_file\",\n        \"args\": {\n            \"filename\":
      \"hello_world.txt\",\n            \"text\": \"Hello World\"\n        }\n    }\n}",
      "role": "assistant"}, {"content": "Command write_to_file returned: File written
      to successfully.", "role": "system"}, {"content": "Determine which next command
      to use, and respond using the format specified above:", "role": "user"}], "model":
      "gpt-3.5-turbo", "temperature": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5224'
      Content-Type:
      - application/json
      X-Content-Hash:
      - fe968f380a91721a342aecff8b371da8b40d1da54d25256aa1342ac8ac051cf3
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6RTTVMbMQy951dofNlLkiEEksC5h2Y6Zeih5dAwGeNVsgavtbW0bIDJf+94vflo
        aC/0+p7f05MsvfUAlM3VNShTaDFl5QbTW/1Nf5rw6HUVvtyFrze/1s3tj1c3vr16fFH9qKCHRzSy
        Uw0NlZVDseQTbQJqweg6mswm4/H55eyiJUrK0UXZupLBeHg5kDo80OBsfDZKypr1GtU1vPUAAFQV
        qKxkKfSEnqPdaDrrJ+pQ84i+uuhYIdHuiBhPz3sA25SuIGswwj/bx6lWTIf8R/kWDOQiojSzZdFe
        VP9AGvKCvh3E28JHaKGkoHpdCC+iTwI7AjcSwYW6oQak0AJzKPQzQhOsCHrIPqNzBHcUXJ6BEGhY
        WYfgdYk5ZEVkl01kh7KRrA9z4IJql8MzBrt6SaZSYJI1mqH7CtA+h5hWW8/tC0MhoBGIqYYwB6M9
        1IwtlwXU+TJ6ZGCoLKNYCCLaadu2GWi1rzZcqP5xtwE1k7d+nVqeC1gGW1YU4hCj3f9ljg7ouQ54
        cKgCPluqeR86unFtDDKvancasXLap3QD+P7B1t99yl+HYYIVayyX3TAgJ58JMCJo/wKWuUaGxkoB
        UliGmOzUgyvUTzt9Y5378Hf9M3Mqt+3vVrkze7fJcR9Tkn3lk7A6rE8PIBHx7UF+EmSXoE3RhVn4
        reoObru7PLWy3nKxTDsWr4+Fqv1hKutz3KhrOGuBbQ/gvrft/QYAAP//AwD2Atyq7AQAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d4b2cbb8f4f2335-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 09 Jun 2023 17:43:14 GMT
      Function-Execution-Id:
      - ktgz9rmqoex9
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '9779'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 8199340352b57b6d26d89031e8f08c2f;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85930'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.713s
      X-Request-Id:
      - 0290521f85fd621f2f83e9a5ac5cf90f
    status:
      code: 200
      message: OK
- request:
    body: '{"encoding_format": "base64", "input": ["Hello World"], "model": "text-embedding-ada-002"}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '90'
      Content-Type:
      - application/json
      X-Content-Hash:
      - c4d0aba499a9cde1eebd4b4f38d8ad5e75e83e37a3f91c625ee66c87bac0ddf3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        vs/6z3/9HwAAAP//AwCSly514SAAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d4b2d0c2ba91040-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 09 Jun 2023 17:43:17 GMT
      Function-Execution-Id:
      - ktgzi8520dp8
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '51'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 46d0d8de1b81bd22b612e37331d32924;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - f2bc870da99e4e0a045f1a9156cfdc14
    status:
      code: 200
      message: OK
- request:
    body: '{"encoding_format": "base64", "input": "a simple greeting of \"Hello World.\"",
      "model": "text-embedding-ada-002"}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '114'
      Content-Type:
      - application/json
      X-Content-Hash:
      - 9fe1df10db7a2eab4a2eac0a63cda4182ee6585be25a8d11fafca04315fed097
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        4SAAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d4b2d11cf22e259-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 09 Jun 2023 17:43:18 GMT
      Function-Execution-Id:
      - ktgz7sf3fhr8
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '290'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 24d53aafb466c2ab19455e24bbbfd98d
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - a5cc3c2ee1f80db071f6af4160e3cac4
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are File System Agent, an AI designed to
      manage a file system.\nYour decisions must always be made independently without
      seeking user assistance. Play to your strengths as an LLM and pursue simple
      strategies with no legal complications.\n\nGOALS:\n\n1. Write ''Hello World''
      into a file named \"hello_world.txt\".\n\n\nConstraints:\n1. ~4000 word limit
      for short term memory. Your short term memory is short, so immediately save
      important information to files.\n2. If you are unsure how you previously did
      something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. analyze_code: Analyze Code, args: \"code\":
      \"<full_code_string>\"\n2. execute_python_code: Create a Python file and execute
      it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n3. execute_python_file:
      Execute Python File, args: \"filename\": \"<filename>\"\n4. append_to_file:
      Append to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n5.
      delete_file: Delete file, args: \"filename\": \"<filename>\"\n6. list_files:
      List Files in Directory, args: \"directory\": \"<directory>\"\n7. read_file:
      Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file: Replace
      text or code in a file, args: \"filename\": \"<filename>\", \"old_text\": \"<old_text>\",
      \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads", "role": "system"},
      {"content": "The current time and date is Tue Jan  1 00:00:00 2000", "role":
      "system"}, {"content": "Determine exactly one command to use, and respond using
      the format specified above:", "role": "user"}], "model": "gpt-3.5-turbo", "temperature":
      0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4009'
      Content-Type:
      - application/json
      X-Content-Hash:
      - 854e5c7744c307826aa1e29c60fd32a359a3e32c90b15fab4d25963040cc32be
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7yUz27aQBDG7zzFaC++GMSfQAhP0Eg99JAqreoKLevBnrDesbxjoI1492q9EAJI
        uVTKdb6dmd835uO1B6AoVwtQptRiqtr2778VL89/6yFuH380k7mWmXvafJ3+3D7cb/YqDR28ekEj
        p66B4aq2KMQuyqZBLRimjmbz2WQ6m4/HnVBxjja0FbX0J4NpX9pmxf3hZDiKna3XBaoFvPYAAFTd
        cFXLUniDzqsFPIzu0qicV57V8eSkCou2Z2E0upv3AA4RrmQyGMq/usdxVYBDf7G9KzZsQ0Vp78mL
        dqLSs2jYCbruDq+ZC6VMScltUYrPwpxYPAq4l1DM1CPsyFpoPYKUCMmuIcGl8HJNFhMwXFXa5SAM
        nQLJF7SW4ZkbmydAThg0hLfgdIU5JGXQl7ugD2QvySBT6fvVDWrPjlwR9z+VCKL9BsiDp3BHCPuM
        drBC0Ka7LfkSc9iRlB9BDuDCDPlb+tAdvP+/jdpqFx304funHc80JGTIV6ePZ7i1OZR6i8F1HjF0
        XaPLbznIeUGdA68/wk1h1Qp4cia66vhyRg+OBXBPXuAPSgqtJ1fcTCEPFTcIuF6TIXRy7cHXqDef
        9+OLqw/pKRPHoTeRCBMi1QXFFbxuius0RSG8PY+44rgYcp3Ad55OtB3xETxzB3VM+eEUd7UmR75c
        xiyFyHvh+u3fQJHLca8WMOwKhx7A796h9w8AAP//AwDFsz2fYAUAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d4d7c7dace48105-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 10 Jun 2023 00:27:12 GMT
      Function-Execution-Id:
      - nb7znga5o052
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '9372'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 3e64da1a2eb09a81dd015dff681a8f97
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86419'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.387s
      X-Request-Id:
      - 195c581732d8fc73006c089c856373f6
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are File System Agent, an AI designed to
      manage a file system.\nYour decisions must always be made independently without
      seeking user assistance. Play to your strengths as an LLM and pursue simple
      strategies with no legal complications.\n\nGOALS:\n\n1. Write ''Hello World''
      into a file named \"hello_world.txt\".\n\n\nConstraints:\n1. ~4000 word limit
      for short term memory. Your short term memory is short, so immediately save
      important information to files.\n2. If you are unsure how you previously did
      something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. analyze_code: Analyze Code, args: \"code\":
      \"<full_code_string>\"\n2. execute_python_code: Create a Python file and execute
      it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n3. execute_python_file:
      Execute Python File, args: \"filename\": \"<filename>\"\n4. append_to_file:
      Append to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n5.
      delete_file: Delete file, args: \"filename\": \"<filename>\"\n6. list_files:
      List Files in Directory, args: \"directory\": \"<directory>\"\n7. read_file:
      Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file: Replace
      text or code in a file, args: \"filename\": \"<filename>\", \"old_text\": \"<old_text>\",
      \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads", "role": "system"},
      {"content": "The current time and date is Tue Jan  1 00:00:00 2000", "role":
      "system"}, {"content": "This reminds you of these events from your past: \nI
      was created", "role": "system"}, {"content": "Determine exactly one command
      to use, and respond using the format specified above:", "role": "user"}, {"content":
      "{\n    \"thoughts\": {\n        \"text\": \"I will use the ''write_to_file''
      command to write ''Hello World'' into a file named ''hello_world.txt''.\",\n        \"reasoning\":
      \"The task is simple and can be accomplished with the ''write_to_file'' command.
      I will use this command to write the text ''Hello World'' into a file named
      ''hello_world.txt''.\",\n        \"plan\": \"- Use the ''write_to_file'' command
      to write ''Hello World'' into a file named ''hello_world.txt''.\",\n        \"criticism\":
      \"I could have used the ''append_to_file'' command instead of the ''write_to_file''
      command, but since the file does not exist yet, using ''write_to_file'' is more
      efficient.\",\n        \"speak\": \"I will use the ''write_to_file'' command
      to write ''Hello World'' into a file named ''hello_world.txt''.\"\n    },\n    \"command\":
      {\n        \"name\": \"write_to_file\",\n        \"args\": {\n            \"filename\":
      \"hello_world.txt\",\n            \"text\": \"Hello World\"\n        }\n    }\n}",
      "role": "assistant"}, {"content": "Command write_to_file returned: File written
      to successfully.", "role": "system"}, {"content": "Determine exactly one command
      to use, and respond using the format specified above:", "role": "user"}], "model":
      "gpt-3.5-turbo", "temperature": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5334'
      Content-Type:
      - application/json
      X-Content-Hash:
      - 7c780177204969287021f3f7df8f9a9f92298f27f9cfdcb69024fbc04562e1df
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7RTwW7bMAy9+ysIXXJJgjRpsjTnHdphQAdsQ7DVQ6DKtK1WFg2JWbIF/vdBlp1k
        abHL0Ot7fHyPEnlIAITOxAqEKiWrqjajd5+KJ21+T6fb9b2+W9+/V9/qD5n7+PmW99/FMCjo8QkV
        96qxoqo2yJpspJVDyRi6Xi2Wi9l8sZxdt0RFGZogK2oezcbzEW/dI40ms8lVVG69LFCs4JAAAIja
        UVXzhukZrQ/tppObYaROnmf0ct6xTCzNGTG7uU4AmpiuJK0wwA9tcfQK6dD/Zd+CjkxAhPRee5aW
        xfBEKrKMtn2IQ2oDlAouaVuU7NPQJ4IdgXsOYCruYKeNga1H4BJh4FBmm1wbHICiqpI2AyYIaMt3
        Lh4oj/UlGkObHTmTjXnPAwjacSqG53YOpSerbdF7WsS27090Ov8FXEr+RzvYSQ/dR0KbqK8Pc8Dg
        NohgHUSDtnbnNDPa4KB5DP8542sT1UbaOMwIvr7p2ymnWSvtq2j3pUSHoD1YgiMFOTngUnvwjPVl
        B1+jfH7b3452zbBfvK7Zi72zssKY5Oh8EVa64nJdIxFqT/KLIH2CNkUXJrWN6M6j6e9E5NpqX27i
        QoZb8Uz18YyEthnuxQomLdAkAD+SJvkDAAD//wMAUkmsNZoEAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d4d7cc4cd482234-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 10 Jun 2023 00:27:21 GMT
      Function-Execution-Id:
      - nb7zpi7xqf1r
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '7270'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 1f46d8b52ae4911b197eda0d882e78f0;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85933'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.711s
      X-Request-Id:
      - 5993d4afc98f79ed01fa7ed75a768b3a
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are File System Agent, an AI designed to
      manage a file system.\nYour decisions must always be made independently without
      seeking user assistance. Play to your strengths as an LLM and pursue simple
      strategies with no legal complications.\n\nGOALS:\n\n1. Write ''Hello World''
      into a file named \"hello_world.txt\".\n\n\nConstraints:\n1. ~4000 word limit
      for short term memory. Your short term memory is short, so immediately save
      important information to files.\n2. If you are unsure how you previously did
      something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. analyze_code: Analyze Code, args: \"code\":
      \"<full_code_string>\"\n2. execute_python_code: Create a Python file and execute
      it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n3. execute_python_file:
      Execute Python File, args: \"filename\": \"<filename>\"\n4. append_to_file:
      Append to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n5.
      delete_file: Delete file, args: \"filename\": \"<filename>\"\n6. list_files:
      List Files in Directory, args: \"directory\": \"<directory>\"\n7. read_file:
      Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file: Replace
      text or code in a file, args: \"filename\": \"<filename>\", \"old_text\": \"<old_text>\",
      \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach. Do not repeat events from your past\n4.
      Every command has a cost, so be smart and efficient. Aim to complete tasks in
      the least number of steps.\n5. Write all code to a file.\n\nYou should only
      respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads", "role": "system"}, {"content": "The current
      time and date is Tue Jan  1 00:00:00 2000", "role": "system"}, {"content": "Determine
      exactly one command to use, and respond using the format specified above:",
      "role": "user"}], "model": "gpt-3.5-turbo", "temperature": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4045'
      Content-Type:
      - application/json
      X-Content-Hash:
      - 979500bbfa54e71bb4259674acc3c8ca69fa27427b28420101f136a03ec6b125
    method: POST
    uri: https://api.openai.com/test/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7yTz47aQAzG7zyFNZdcAAW2sAsP0C3SHlppt61UKjQkhrhMxumMI1gh3r2aDH+W
        UFVqD71+39j+2WPvOwCKcjUFlRVasrIyvftPs/unF/118nn2cTf5mT3mmZ+9Lx8n9fP4SXVDBC9/
        YCanqH7GZWVQiG20M4daMGQdjB/GozQdDe8bo+QcTQhbV9K76496Ursl99K7dBAja6/XqKaw7wAA
        qMpxWclCeIPWqylMhsNudC4lL+5w8HB0hUWbizEYvEs7AIcIVzBlGORvzeNYKsChv6reiI5NUJT2
        nrxoK6p7MTO2graZw35ugzRXUnC9LsTPQ54oHg3cSRDnagZbMgZqjyAFQrJ1JLgQXqzIYAIZl6W2
        OQhD40DyAY1h+MLO5AmQFQYN4S1YXWIOSRH8xTb4fdlJ0p+r7tvSDrVnS3Yd6z//oSj5hqlkL6Cr
        ynHlSAvCih1IEVztN6A9kIA2hrceSryghibhzNeHVqtBDMy3yCEIra9deKjl/DoAofZkXoFytEIr
        0kuD7Q4ro21srgcv/zbXv55q5kgoI1+eftUXXJv8923cNpwzerAcxuhQ56+AO/ICS1yxw4aQ7DpQ
        kbQr+wr15v/tUix96J5W/Jj0ZsNDhkh1RdGC127dPo5onJYjpmhxXCVpH9Sbnk60DfERfG4P6ni0
        h9P1qhVZ8sUinka4YC9cnY9bkc1xp6aQNsKhA/C9c+j8AgAA//8DABm8aREvBQAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d5b30e92f522cdd-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 11 Jun 2023 16:22:15 GMT
      Function-Execution-Id:
      - fc5x4gwxnsz1
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '8303'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 1eec5f39eca575c1e8117515acde94b7
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86418'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.388s
      X-Request-Id:
      - 8a3c89cb549891c93ba5c646f5a3d06a
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are File System Agent, an AI designed to
      manage a file system.\nYour decisions must always be made independently without
      seeking user assistance. Play to your strengths as an LLM and pursue simple
      strategies with no legal complications.\n\nGOALS:\n\n1. Write ''Hello World''
      into a file named \"hello_world.txt\".\n\n\nConstraints:\n1. ~4000 word limit
      for short term memory. Your short term memory is short, so immediately save
      important information to files.\n2. If you are unsure how you previously did
      something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. analyze_code: Analyze Code, args: \"code\":
      \"<full_code_string>\"\n2. execute_python_code: Create a Python file and execute
      it, args: \"code\": \"<code>\", \"basename\": \"<basename>\"\n3. execute_python_file:
      Execute Python File, args: \"filename\": \"<filename>\"\n4. append_to_file:
      Append to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n5.
      delete_file: Delete file, args: \"filename\": \"<filename>\"\n6. list_files:
      List Files in Directory, args: \"directory\": \"<directory>\"\n7. read_file:
      Read a file, args: \"filename\": \"<filename>\"\n8. replace_in_file: Replace
      text or code in a file, args: \"filename\": \"<filename>\", \"old_text\": \"<old_text>\",
      \"new_text\": \"<new_text>\", \"occurrence_index\": \"<occurrence_index>\"\n9.
      write_to_file: Write to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n10. google: Google Search, args: \"query\": \"<query>\"\n11. improve_code:
      Get Improved Code, args: \"suggestions\": \"<list_of_suggestions>\", \"code\":
      \"<full_code_string>\"\n12. browse_website: Browse Website, args: \"url\": \"<url>\",
      \"question\": \"<what_you_want_to_find_on_website>\"\n13. write_tests: Write
      Tests, args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\"\n14.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n15. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n16. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n17. list_agents: List
      GPT Agents, args: () -> str\n18. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n19. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n20.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach. Do not repeat events from your past\n4.
      Every command has a cost, so be smart and efficient. Aim to complete tasks in
      the least number of steps.\n5. Write all code to a file.\n\nYou should only
      respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads", "role": "system"}, {"content": "The current
      time and date is Tue Jan  1 00:00:00 2000", "role": "system"}, {"content": "This
      reminds you of these events from your past: \nI was created", "role": "system"},
      {"content": "Determine exactly one command to use, and respond using the format
      specified above:", "role": "user"}, {"content": "{\n    \"thoughts\": {\n        \"text\":
      \"I will use the ''write_to_file'' command to write ''Hello World'' into a file
      named ''hello_world.txt''.\",\n        \"reasoning\": \"The ''write_to_file''
      command is the most appropriate for this task as it allows me to write text
      to a file. I will use the filename ''hello_world.txt'' to ensure that the file
      is easily identifiable.\",\n        \"plan\": \"- Use the ''write_to_file''
      command to write ''Hello World'' to a file named ''hello_world.txt''.\",\n        \"criticism\":
      \"I should ensure that the file ''hello_world.txt'' does not already exist before
      writing to it.\",\n        \"speak\": \"I will use the ''write_to_file'' command
      to write ''Hello World'' into a file named ''hello_world.txt''.\"\n    },\n    \"command\":
      {\n        \"name\": \"write_to_file\",\n        \"args\": {\n            \"filename\":
      \"hello_world.txt\",\n            \"text\": \"Hello World\"\n        }\n    }\n}",
      "role": "assistant"}, {"content": "Command write_to_file returned: File written
      to successfully.", "role": "system"}, {"content": "Determine exactly one command
      to use, and respond using the format specified above:", "role": "user"}], "model":
      "gpt-3.5-turbo", "temperature": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5321'
      Content-Type:
      - application/json
      X-Content-Hash:
      - dfd6758af54a7867e5fe915f0188e9bf4e88a13429d03e9f47f4b5f027538969
    method: POST
    uri: https://api.openai.com/test/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA8xUwW4TMRC971eMfMkliTYNaUtugFSRA6ggoEgERc7ubNbE9hh7VomI9t+R15um
        DS3nXt/zm3lvNONDBiBUKeYgilpyYZweXX1aXN19uK1v37ib9dub7wu/+POtyfXvj5/fvRbDqKD1
        Lyz4qBoXZJxGVmQTXXiUjLHq5PL6cpbns+l1RxgqUUfZxvFoOp6NuPFrGuXTfJKUTZAbFHM4ZAAA
        wnkyjldMW7QhlrvIJ8NEnXqe6Itp3rNMLPUD3avpJANok7uaVIER/tE9Tr2iOwyP2negJx0RIUNQ
        gaVlMTyRBVlG2w3isLQRWgquqdnUHJaxTgJ7AvccwaVYwE5pDU1A4Bph4FGWq0ppHEBBxkhbAhNE
        tOP7LgGoSu9r1JpWO/K6HPOeBxC1EGUF2Up5A1xLhsH7+A7u4rsB7GSAnVfMaGN1xeOlGD7051EG
        sspukskvzzhToTNhKDBI5zw5ryQjVOSB68jKsAUZQDFIrWkXwOCzeWTnfQxnI4mgleaprEyANjQe
        U8gFSNOVVnbTV/ceC051zyI6LW1KN4KvL2v6hVesChXMcUVCTY0uH2X9T3vcq8AB1liRR5DMaBx3
        I+mjVJ7ME22DQ7l9YVuZ/LXD40X13f85qLggyfq91bN00m/O7zARx/1K8jPnRwedi97M0raiv/v2
        +AGISlkV6lU6nPgJBCZ3/z8IZUvciznkHdBmAD+zNvsLAAD//wMAcggYAXMFAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d5b312b9ef62db6-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 11 Jun 2023 16:22:26 GMT
      Function-Execution-Id:
      - fc5xq4e2i8k7
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '8552'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 033a35ed177e992440025333c57afceb
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '84391'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 3.738s
      X-Request-Id:
      - 2ffcf21df2494729216e6ece79ba292f
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are File System Agent, an AI designed to
      manage a file system.\nYour decisions must always be made independently without
      seeking user assistance. Play to your strengths as an LLM and pursue simple
      strategies with no legal complications.\n\nGOALS:\n\n1. Write ''Hello World''
      into a file named \"hello_world.txt\".\n\n\nConstraints:\n1. ~4000 word limit
      for short term memory. Your short term memory is short, so immediately save
      important information to files.\n2. If you are unsure how you previously did
      something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. execute_python_code: Create a Python
      file and execute it, args: {''code'': {''type'': ''string'', ''description'':
      ''The Python code to run'', ''required'': True}, ''name'': {''type'': ''string'',
      ''description'': ''A name to be given to the python file'', ''required'': True}}\n2.
      execute_python_file: Execute an existing Python file, args: {''filename'': {''type'':
      ''string'', ''description'': ''The name of te file to execute'', ''required'':
      True}}\n3. append_to_file: Append to file, args: {''filename'': {''type'': ''string'',
      ''description'': ''The name of the file to write to'', ''required'': True},
      ''text'': {''type'': ''string'', ''description'': ''The text to write to the
      file'', ''required'': True}}\n4. delete_file: Delete file, args: {''filename'':
      {''type'': ''string'', ''description'': ''The name of the file to delete'',
      ''required'': True}}\n5. list_files: List Files in Directory, args: {''directory'':
      {''type'': ''string'', ''description'': ''The directory to list files in'',
      ''required'': True}}\n6. read_file: Read an existing file, args: {''filename'':
      {''type'': ''string'', ''description'': ''The path of the file to read'', ''required'':
      True}}\n7. write_to_file: Write to file, args: {''filename'': {''type'': ''string'',
      ''description'': ''The name of the file to write to'', ''required'': True},
      ''text'': {''type'': ''string'', ''description'': ''The text to write to the
      file'', ''required'': True}}\n8. web_search: Search the web, args: {''query'':
      {''type'': ''string'', ''description'': ''The search query'', ''required'':
      True}}\n9. browse_website: Browse Website, args: {''url'': {''type'': ''string'',
      ''description'': ''The URL to visit'', ''required'': True}, ''question'': {''type'':
      ''string'', ''description'': ''What you want to find on the website'', ''required'':
      True}}\n10. goals_accomplished: Goals are accomplished and there is nothing
      left to do, args: {''reason'': {''type'': ''string'', ''description'': ''A summary
      to the user of how the goals were accomplished'', ''required'': True}}\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\nRespond
      with only valid JSON conforming to the following schema: \n{''$schema'': ''http://json-schema.org/draft-07/schema#'',
      ''type'': ''object'', ''properties'': {''thoughts'': {''type'': ''object'',
      ''properties'': {''text'': {''type'': ''string'', ''description'': ''thoughts''},
      ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string'', ''description'':
      ''- short bulleted\\n- list that conveys\\n- long-term plan''}, ''criticism'':
      {''type'': ''string'', ''description'': ''constructive self-criticism''}, ''speak'':
      {''type'': ''string'', ''description'': ''thoughts summary to say to user''}},
      ''required'': [''text'', ''reasoning'', ''plan'', ''criticism'', ''speak''],
      ''additionalProperties'': False}, ''command'': {''type'': ''object'', ''properties'':
      {''name'': {''type'': ''string''}, ''args'': {''type'': ''object''}}, ''required'':
      [''name'', ''args''], ''additionalProperties'': False}}, ''required'': [''thoughts'',
      ''command''], ''additionalProperties'': False}\n", "role": "system"}, {"content":
      "The current time and date is Tue Jan  1 00:00:00 2000", "role": "system"},
      {"content": "Determine exactly one command to use, and respond using the JSON
      schema specified previously:", "role": "user"}], "model": "gpt-3.5-turbo", "temperature":
      0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4368'
      Content-Type:
      - application/json
      X-Content-Hash:
      - 5877f83e7768bf5e672b993b5f5d672951cc82bc0a97dc87a7825b96e716f86a
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6yTTW/bMAyG7/4VhC6+JIGTZmmX8wY0KDoUK4atm4dAkRlbqywZEo2kCPzfB0lJ
        7WSHDsOOfl9+PKTFQwLAZMGWwETFSdSNGl8/Pt7xu/uH+08f5y87xNnt++zDw9P3b583N4qNfIbZ
        /EJBp6yJMHWjkKTR0RYWOaGvOl3cXGfTxXw+D0ZtClQ+rWxofDV5N6bWbsw4u8qmMbN1vES2hEMC
        AMAaa+qG1mSeUTtfLpsvRtHqe/b2bJYdXTLE1SBvtlgkAF2kq4wU6OUfITj28nToztoH0RrlFcad
        k464JjbqTWE0oQ6LOOQaIGdUmbasyOW+ipeCiHvyQs5WoBELIANxR8BhKxWC5jUWkFaolFnvjFXF
        hPaUAtcF7KwkhPTWe/DVeylITQYkTWAFgmtoHQJVCGmIXZNZ+6opCFPXvgQZ4CJsTLoKqJJukrPR
        Cc8id0ZLXV4yvlV2g4L7GEnAlTI7BzWezaZxF+fr5/C7gAg/QGgU17H7GL68PcyfDf51gQMGYSVJ
        IV19uYYNguAWt63yX6hdaz0hJ1gBr6F1UpeBWBhrUVBPFNqHSG+H0aULPIT6FK5ehhSuQf58IthJ
        pf7m5/7PfXiQbhRf87HF2WP2lSPfGc9gBG7L4fv3ko/oEy+oXlPPb2XAF6kAugCX644db7A7HSPb
        Si1dtY5v2R+kI9O83iqTusA9W0IWhC4B+Jl0yW8AAAD//wMA2dGWqf8EAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d8c64890a2e8108-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 17 Jun 2023 15:40:54 GMT
      Function-Execution-Id:
      - 34nv74q6wflf
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '9569'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 751396928dfba5f4aceb510491899a48
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86413'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.39s
      X-Request-Id:
      - 93d3dc12a550a84d4e8e440d7fbc912c
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are File System Agent, an AI designed to
      manage a file system.\nYour decisions must always be made independently without
      seeking user assistance. Play to your strengths as an LLM and pursue simple
      strategies with no legal complications.\n\nGOALS:\n\n1. Write ''Hello World''
      into a file named \"hello_world.txt\".\n\n\nConstraints:\n1. ~4000 word limit
      for short term memory. Your short term memory is short, so immediately save
      important information to files.\n2. If you are unsure how you previously did
      something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. execute_python_code: Create a Python
      file and execute it, args: {''code'': {''type'': ''string'', ''description'':
      ''The Python code to run'', ''required'': True}, ''name'': {''type'': ''string'',
      ''description'': ''A name to be given to the python file'', ''required'': True}}\n2.
      execute_python_file: Execute an existing Python file, args: {''filename'': {''type'':
      ''string'', ''description'': ''The name of te file to execute'', ''required'':
      True}}\n3. append_to_file: Append to file, args: {''filename'': {''type'': ''string'',
      ''description'': ''The name of the file to write to'', ''required'': True},
      ''text'': {''type'': ''string'', ''description'': ''The text to write to the
      file'', ''required'': True}}\n4. delete_file: Delete file, args: {''filename'':
      {''type'': ''string'', ''description'': ''The name of the file to delete'',
      ''required'': True}}\n5. list_files: List Files in Directory, args: {''directory'':
      {''type'': ''string'', ''description'': ''The directory to list files in'',
      ''required'': True}}\n6. read_file: Read an existing file, args: {''filename'':
      {''type'': ''string'', ''description'': ''The path of the file to read'', ''required'':
      True}}\n7. write_to_file: Write to file, args: {''filename'': {''type'': ''string'',
      ''description'': ''The name of the file to write to'', ''required'': True},
      ''text'': {''type'': ''string'', ''description'': ''The text to write to the
      file'', ''required'': True}}\n8. web_search: Search the web, args: {''query'':
      {''type'': ''string'', ''description'': ''The search query'', ''required'':
      True}}\n9. browse_website: Browse Website, args: {''url'': {''type'': ''string'',
      ''description'': ''The URL to visit'', ''required'': True}, ''question'': {''type'':
      ''string'', ''description'': ''What you want to find on the website'', ''required'':
      True}}\n10. goals_accomplished: Goals are accomplished and there is nothing
      left to do, args: {''reason'': {''type'': ''string'', ''description'': ''A summary
      to the user of how the goals were accomplished'', ''required'': True}}\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\nRespond
      with only valid JSON conforming to the following schema: \n{''$schema'': ''http://json-schema.org/draft-07/schema#'',
      ''type'': ''object'', ''properties'': {''thoughts'': {''type'': ''object'',
      ''properties'': {''text'': {''type'': ''string'', ''description'': ''thoughts''},
      ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string'', ''description'':
      ''- short bulleted\\n- list that conveys\\n- long-term plan''}, ''criticism'':
      {''type'': ''string'', ''description'': ''constructive self-criticism''}, ''speak'':
      {''type'': ''string'', ''description'': ''thoughts summary to say to user''}},
      ''required'': [''text'', ''reasoning'', ''plan'', ''criticism'', ''speak''],
      ''additionalProperties'': False}, ''command'': {''type'': ''object'', ''properties'':
      {''name'': {''type'': ''string''}, ''args'': {''type'': ''object''}}, ''required'':
      [''name'', ''args''], ''additionalProperties'': False}}, ''required'': [''thoughts'',
      ''command''], ''additionalProperties'': False}\n", "role": "system"}, {"content":
      "The current time and date is Tue Jan  1 00:00:00 2000", "role": "system"},
      {"content": "This reminds you of these events from your past: \nI was created",
      "role": "system"}, {"content": "Determine exactly one command to use, and respond
      using the JSON schema specified previously:", "role": "user"}, {"content": "{\n  \"thoughts\":
      {\n    \"text\": \"I need to create a file named ''hello_world.txt'' and write
      ''Hello World'' into it. I can use the ''write_to_file'' command to accomplish
      this.\",\n    \"reasoning\": \"I need to use the ''write_to_file'' command because
      it allows me to create a new file and write text to it.\",\n    \"plan\": \"-
      Use the ''write_to_file'' command to create a new file named ''hello_world.txt''
      and write ''Hello World'' into it.\",\n    \"criticism\": \"I need to be careful
      to ensure that I am using the correct file name and that the text is written
      correctly.\",\n    \"speak\": \"I will use the ''write_to_file'' command to
      create a new file named ''hello_world.txt'' and write ''Hello World'' into it.\"\n  },\n  \"command\":
      {\n    \"name\": \"write_to_file\",\n    \"args\": {\n      \"filename\": \"hello_world.txt\",\n      \"text\":
      \"Hello World\"\n    }\n  }\n}", "role": "assistant"}, {"content": "Command
      write_to_file returned: File written to successfully.", "role": "system"}, {"content":
      "Determine exactly one command to use, and respond using the JSON schema specified
      previously:", "role": "user"}], "model": "gpt-3.5-turbo", "temperature": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5605'
      Content-Type:
      - application/json
      X-Content-Hash:
      - 2ddb7ef223bd6a21ebdd7371d53829db060e70a7fc20147c79228b7ae5996583
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7RTS4/aMBC+51eMfOECKEBhVxxbtV20l0qrqoemQsYZEncdO2tPFtpV/ns1Do+A
        KnrqMTPzPfLN+C0BEDoXSxCqlKSq2ozunp4eX97j7w+PRfO5fvk0SafFQzP5gtOP9lUMGeE2P1HR
        ETVWrqoNkna2ayuPkpBZJ4v7u3SyeLdIY6NyORqGFTWNZuP5iBq/caN0lk46ZBNkgWIJbwkAgKi9
        q2pak3tGG5huNr0fdq2z5rk9TeeHLjmSpoebz2YJQNu5K51WyOXvcbjTYncYLuRj0TvDFSFD0IGk
        JTE8N5WzhDYG8ZZZgExQ6ZqipJAxC5diEffEhUyswCLmQA5e0evtL6BSElCJMCjRGLfeOW/yMe1p
        AFttEHYywCFOkDYHVpTahohRzntUBMw/hhUoaaEJ2PF5lPmaOQagXFUxmBxIFYPToQQqdRhnYnh0
        6VEGZ7Utrq3eotygktzXBNIYtwtQIWN49OAxRhTAbUHGf+pr1kbaTm4EX287/yvjjeQY1g9Z0zm8
        wQND4BtDBn0/ymvSSofqOoMNgpIet43hL7Sh8djxrkBW0Zy2xcVWTi5OO+Y9gQ7Hib5wqFE+H0V3
        2ph/LfJ/xsGm2mF30AfJi3u2ssLO68lb71ekL/rnzyWeOIOuDHZ6AG2UzWwrDg+sPb40sdVWh3Ld
        XSi/tkCuPj1EoW2Oe7GENBbaBOBH0iZ/AAAA//8DANj/kq7cBAAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d8c64efa96c1403-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 17 Jun 2023 15:41:08 GMT
      Function-Execution-Id:
      - pjwnjc60bb6l
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '7877'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 55f9ffa55614ecb77a18c493e583931f
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '84902'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 3.398s
      X-Request-Id:
      - 0b496cefb283b065426eee9bb0d9b47f
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are File System Agent, an AI designed to
      manage a file system.\nYour decisions must always be made independently without
      seeking user assistance. Play to your strengths as an LLM and pursue simple
      strategies with no legal complications.\n\nGOALS:\n\n1. Write ''Hello World''
      into a file named \"hello_world.txt\".\n\n\nConstraints:\n1. ~4000 word limit
      for short term memory. Your short term memory is short, so immediately save
      important information to files.\n2. If you are unsure how you previously did
      something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. execute_python_code: Create a Python
      file and execute it, args: {''code'': {''type'': ''string'', ''description'':
      ''The Python code to run'', ''required'': True}, ''name'': {''type'': ''string'',
      ''description'': ''A name to be given to the python file'', ''required'': True}}\n2.
      execute_python_file: Execute an existing Python file, args: {''filename'': {''type'':
      ''string'', ''description'': ''The name of te file to execute'', ''required'':
      True}}\n3. execute_shell: Execute Shell Command, non-interactive commands only,
      args: {''command_line'': {''type'': ''string'', ''description'': ''The command
      line to execute'', ''required'': True}}\n4. execute_shell_popen: Execute Shell
      Command, non-interactive commands only, args: {''query'': {''type'': ''string'',
      ''description'': ''The search query'', ''required'': True}}\n5. append_to_file:
      Append to file, args: {''filename'': {''type'': ''string'', ''description'':
      ''The name of the file to write to'', ''required'': True}, ''text'': {''type'':
      ''string'', ''description'': ''The text to write to the file'', ''required'':
      True}}\n6. delete_file: Delete file, args: {''filename'': {''type'': ''string'',
      ''description'': ''The name of the file to delete'', ''required'': True}}\n7.
      list_files: List Files in Directory, args: {''directory'': {''type'': ''string'',
      ''description'': ''The directory to list files in'', ''required'': True}}\n8.
      read_file: Read an existing file, args: {''filename'': {''type'': ''string'',
      ''description'': ''The path of the file to read'', ''required'': True}}\n9.
      write_to_file: Write to file, args: {''filename'': {''type'': ''string'', ''description'':
      ''The name of the file to write to'', ''required'': True}, ''text'': {''type'':
      ''string'', ''description'': ''The text to write to the file'', ''required'':
      True}}\n10. google: Google Search, args: {''query'': {''type'': ''string'',
      ''description'': ''The search query'', ''required'': True}}\n11. web_search:
      Search the web, args: {''query'': {''type'': ''string'', ''description'': ''The
      search query'', ''required'': True}}\n12. browse_website: Browse Website, args:
      {''url'': {''type'': ''string'', ''description'': ''The URL to visit'', ''required'':
      True}, ''question'': {''type'': ''string'', ''description'': ''What you want
      to find on the website'', ''required'': True}}\n13. goals_accomplished: Goals
      are accomplished and there is nothing left to do, args: {''reason'': {''type'':
      ''string'', ''description'': ''A summary to the user of how the goals were accomplished'',
      ''required'': True}}\n\nResources:\n1. Internet access for searches and information
      gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered Agents for delegation
      of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1. Continuously
      review and analyze your actions to ensure you are performing to the best of
      your abilities.\n2. Constructively self-criticize your big-picture behavior
      constantly.\n3. Reflect on past decisions and strategies to refine your approach.\n4.
      Every command has a cost, so be smart and efficient. Aim to complete tasks in
      the least number of steps.\n\nRespond with only valid JSON conforming to the
      following schema: \n{''$schema'': ''http://json-schema.org/draft-07/schema#'',
      ''type'': ''object'', ''properties'': {''thoughts'': {''type'': ''object'',
      ''properties'': {''text'': {''type'': ''string'', ''description'': ''thoughts''},
      ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string'', ''description'':
      ''- short bulleted\\n- list that conveys\\n- long-term plan''}, ''criticism'':
      {''type'': ''string'', ''description'': ''constructive self-criticism''}, ''speak'':
      {''type'': ''string'', ''description'': ''thoughts summary to say to user''}},
      ''required'': [''text'', ''reasoning'', ''plan'', ''criticism'', ''speak''],
      ''additionalProperties'': False}, ''command'': {''type'': ''object'', ''properties'':
      {''name'': {''type'': ''string''}, ''args'': {''type'': ''object''}}, ''required'':
      [''name'', ''args''], ''additionalProperties'': False}}, ''required'': [''thoughts'',
      ''command''], ''additionalProperties'': False}\n", "role": "system"}, {"content":
      "The current time and date is Tue Jan  1 00:00:00 2000", "role": "system"},
      {"content": "Determine exactly one command to use, and respond using the JSON
      schema specified previously:", "role": "user"}], "model": "gpt-3.5-turbo", "temperature":
      0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4835'
      Content-Type:
      - application/json
      X-Content-Hash:
      - 52f68398b010477b04edcc8580fa4bb500bebaf8252ffa1cb85ada277df6676a
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5xUXW8TMRB8z69Y3csVKYkSUpqSN4TUNgipAooQ4lDk2JvYjc972HskIbr/juxr
        0g+FVuJ1d2dndtbrXQcgMyqbQCa1YFlWtjf+8ufz9dXlrw+f3s5v+OOFm36vBtfh3YW6vOWsGxE0
        v0XJe1RfUllZZEOuTUuPgjF2HZ6dj4eno/HwPCVKUmgjbFlxb9R/0+Paz6k3GA2GLbIOYonZBHYd
        AICs8lRWPGNaoQux3fBs0G1T95z36dfjfZaJhX2AOx0NOgBNq06TkRjDP1JxyxXVYXhEn4KebIxk
        IgQTWLjWgbukJMfokhG7nDXVS80hn8AuZ9xwPoH8hmDtDSMU2RVaS/CNvFVFBsYxgYCFsQhOlKig
        yHSsmK1jRZ83XGRdmMLaWAt1QGCNba8Z0yzhJJWlcKq/r1oYHxikRrkCs0iAVCesR6G2gBsTOHRB
        OBXzhkERhgOJQouMMTzHBfmWzbglMIHhAwtrdM8LioDjUzMdVPXzLuQeRSBn3DJ6NQWp6dm+c5Qi
        MhsGYS2tA5R4TxY9h4OrXVhrIzWYALgRku0W1lowTMEhJomKDjMJG+hF41Lv32QUCLcFSW5hjeSQ
        BqmscHGGHrzfdzmyzycNi8L1YPpgEYcNpMzX8D/+HqGNAmXcpTShbJ0OmmqroBQrhFD75KIWTsWh
        3RbQe/IBOBpWii2QlLWHdbv59CT+taMuhFpqEOGRkVI4R/Fdwd3fAOQTntEBU7IwVChWrbqX3/yz
        Frx0Vv28iY60ndK5xtJIjRuUNeOs2rImN5OkMEoTftmedQpMIG8XlRSdHCF4VRTukeyTo8f9RHpE
        5U3TZHcfTLP/abKFcSboWXst8bcJTNXhI8qMU7jJJjBIgaYD8LPTdP4CAAD//wMA2Jcvc9wFAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d9887d16991616e-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 19 Jun 2023 03:02:09 GMT
      Function-Execution-Id:
      - bvp6xd27haa4
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '10247'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 33e0d41531c8fcce2d0a067d13bc67ee;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86412'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.392s
      X-Request-Id:
      - bee0f3ae3a27dc7a652b35f77babd0ff
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are File System Agent, an AI designed to
      manage a file system.\nYour decisions must always be made independently without
      seeking user assistance. Play to your strengths as an LLM and pursue simple
      strategies with no legal complications.\n\nGOALS:\n\n1. Write ''Hello World''
      into a file named \"hello_world.txt\".\n\n\nConstraints:\n1. ~4000 word limit
      for short term memory. Your short term memory is short, so immediately save
      important information to files.\n2. If you are unsure how you previously did
      something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. execute_python_code: Create a Python
      file and execute it, args: {''code'': {''type'': ''string'', ''description'':
      ''The Python code to run'', ''required'': True}, ''name'': {''type'': ''string'',
      ''description'': ''A name to be given to the python file'', ''required'': True}}\n2.
      execute_python_file: Execute an existing Python file, args: {''filename'': {''type'':
      ''string'', ''description'': ''The name of te file to execute'', ''required'':
      True}}\n3. execute_shell: Execute Shell Command, non-interactive commands only,
      args: {''command_line'': {''type'': ''string'', ''description'': ''The command
      line to execute'', ''required'': True}}\n4. execute_shell_popen: Execute Shell
      Command, non-interactive commands only, args: {''query'': {''type'': ''string'',
      ''description'': ''The search query'', ''required'': True}}\n5. append_to_file:
      Append to file, args: {''filename'': {''type'': ''string'', ''description'':
      ''The name of the file to write to'', ''required'': True}, ''text'': {''type'':
      ''string'', ''description'': ''The text to write to the file'', ''required'':
      True}}\n6. delete_file: Delete file, args: {''filename'': {''type'': ''string'',
      ''description'': ''The name of the file to delete'', ''required'': True}}\n7.
      list_files: List Files in Directory, args: {''directory'': {''type'': ''string'',
      ''description'': ''The directory to list files in'', ''required'': True}}\n8.
      read_file: Read an existing file, args: {''filename'': {''type'': ''string'',
      ''description'': ''The path of the file to read'', ''required'': True}}\n9.
      write_to_file: Write to file, args: {''filename'': {''type'': ''string'', ''description'':
      ''The name of the file to write to'', ''required'': True}, ''text'': {''type'':
      ''string'', ''description'': ''The text to write to the file'', ''required'':
      True}}\n10. google: Google Search, args: {''query'': {''type'': ''string'',
      ''description'': ''The search query'', ''required'': True}}\n11. web_search:
      Search the web, args: {''query'': {''type'': ''string'', ''description'': ''The
      search query'', ''required'': True}}\n12. browse_website: Browse Website, args:
      {''url'': {''type'': ''string'', ''description'': ''The URL to visit'', ''required'':
      True}, ''question'': {''type'': ''string'', ''description'': ''What you want
      to find on the website'', ''required'': True}}\n13. goals_accomplished: Goals
      are accomplished and there is nothing left to do, args: {''reason'': {''type'':
      ''string'', ''description'': ''A summary to the user of how the goals were accomplished'',
      ''required'': True}}\n\nResources:\n1. Internet access for searches and information
      gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered Agents for delegation
      of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1. Continuously
      review and analyze your actions to ensure you are performing to the best of
      your abilities.\n2. Constructively self-criticize your big-picture behavior
      constantly.\n3. Reflect on past decisions and strategies to refine your approach.\n4.
      Every command has a cost, so be smart and efficient. Aim to complete tasks in
      the least number of steps.\n\nRespond with only valid JSON conforming to the
      following schema: \n{''$schema'': ''http://json-schema.org/draft-07/schema#'',
      ''type'': ''object'', ''properties'': {''thoughts'': {''type'': ''object'',
      ''properties'': {''text'': {''type'': ''string'', ''description'': ''thoughts''},
      ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string'', ''description'':
      ''- short bulleted\\n- list that conveys\\n- long-term plan''}, ''criticism'':
      {''type'': ''string'', ''description'': ''constructive self-criticism''}, ''speak'':
      {''type'': ''string'', ''description'': ''thoughts summary to say to user''}},
      ''required'': [''text'', ''reasoning'', ''plan'', ''criticism'', ''speak''],
      ''additionalProperties'': False}, ''command'': {''type'': ''object'', ''properties'':
      {''name'': {''type'': ''string''}, ''args'': {''type'': ''object''}}, ''required'':
      [''name'', ''args''], ''additionalProperties'': False}}, ''required'': [''thoughts'',
      ''command''], ''additionalProperties'': False}\n", "role": "system"}, {"content":
      "The current time and date is Tue Jan  1 00:00:00 2000", "role": "system"},
      {"content": "This reminds you of these events from your past: \nI was created",
      "role": "system"}, {"content": "Determine exactly one command to use, and respond
      using the JSON schema specified previously:", "role": "user"}, {"content": "{''thoughts'':
      {''text'': ''To write \"Hello World\" into a file named \"hello_world.txt\",
      I will use the write_to_file command. I will first check if the file already
      exists, and if it does, I will delete it before writing to it. I will then use
      the write_to_file command to write \"Hello World\" to the file.'', ''reasoning'':
      ''I chose the write_to_file command because it allows me to write text to a
      file, which is exactly what I need to do. I will also check if the file already
      exists to avoid any conflicts.'', ''plan'': ''- Check if \"hello_world.txt\"
      already exists\\n- If it does, delete it\\n- Use write_to_file command to write
      \"Hello World\" to \"hello_world.txt\"'', ''criticism'': ''I should make sure
      to handle any errors that may occur when using the write_to_file command, such
      as if the file cannot be created or written to.'', ''speak'': ''I will use the
      write_to_file command to write \"Hello World\" to a file named \"hello_world.txt\".''},
      ''command'': {''name'': ''execute_python_code'', ''args'': {''code'': ''delete_file(\"hello_world.txt\")\\nwrite_to_file(\"hello_world.txt\",
      \"Hello World\")\\n''}}}", "role": "assistant"}, {"content": "Command execute_python_code
      returned: Error: execute_python_code() missing 1 required positional argument:
      ''basename''", "role": "system"}, {"content": "Determine exactly one command
      to use, and respond using the JSON schema specified previously:", "role": "user"}],
      "model": "gpt-3.5-turbo", "temperature": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6349'
      Content-Type:
      - application/json
      X-Content-Hash:
      - 1f15b6ccd796f8785a62c4f032019ef4cd0305930341e4606e31a651b113a3eb
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7xUS48TMQy+91dYuQxI7ahLFxb1BlxY8RACLUgwqEoTT5PdTDxKPEzLqv8dJbNT
        Cqp4Hbjasb+HHd9OAITVYglCGcmqad3s4t3Xt7p98uJ6fWVfXz8Nj+bPz82rj+/P3s9ffhTTVEHr
        a1Q8VpWKmtYhW/JDWgWUjKnr2aPHF2fni4vFIica0uhS2abl2aJ8OOMurGk2X8zPhsouyg2KJdxO
        AABEG6hpecV0gz6mdg/nuVHCOGB+Ty8enN9lmVi6o7rHDy4mAPuBnSGrMIU/5ccDVmKH8Qf4HAzk
        UkTIGG1k6VlMvycVeUafjbgt2FC3MRyLJdwWjFsullBcQm+dgy4isEHALaqOcdXu2JBfKdIIippG
        eg1M0AfLCJV4js4RfKDgdCVSQkJtHYKXDWqohEn5VZ/yJW+5EiXcAdU2RAZlUN2ArTNmrpQuoNQ7
        wK2NHKeQAG0NlkETxulYrtEhYwqvsaaAmZH1m8TB8gGFDfo/1TQsA0h4k/MDHTaSB7XxlNxTCosp
        FAFlJG/9ZrBWGfoDDmtUMnG1DNI56iM0eEzM67F8pJjKp9AbqwzYCLiVit0O+kT6EjxiFqbp4Id0
        kX5rep7jF7IapN+BIl87qzhmYa2TPmmawbOxywkPfmpYVX4Gl0dDPEwvZ67i/5pNUqDSoigbm2E0
        0VDnNDTyBiF2IRtupNfJFb8DDIFCHKAauQNSqgvQD2uV9+3XQ51C7JQBGUe/jwUo6T2lDb7Tp4HC
        2Exnu2OL8ubvv+e/2PXbn1vsk3sDSD4d6WnidoJM4i7DZjgxObCEwjYtBQZK+1BV3tZAsWwlm3JY
        k3snUO8vq8qnE0axDNjQFzz5aujYWzZALfpTb6ZQib4S99Ms6rFrXWZD7v3kR+qXJIwK86PVUcsV
        0yrZVba7Yr/fi7tLux9Prqitt9GshjuQzm5kag8XWVivcSuWMM+B/QTg82Q/+QYAAP//AwD3321V
        5QYAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d98882feb54871d-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 19 Jun 2023 03:02:28 GMT
      Function-Execution-Id:
      - bvp6waie98gx
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '14357'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 7e5dc00233556d271d7ffa0693e9d12e;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85920'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.72s
      X-Request-Id:
      - 07af9d0fd3072331a2563f698e0eaaf9
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are File System Agent, an AI designed to
      manage a file system.\nYour decisions must always be made independently without
      seeking user assistance. Play to your strengths as an LLM and pursue simple
      strategies with no legal complications.\n\nGOALS:\n\n1. Write ''Hello World''
      into a file named \"hello_world.txt\".\n\n\nConstraints:\n1. ~4000 word limit
      for short term memory. Your short term memory is short, so immediately save
      important information to files.\n2. If you are unsure how you previously did
      something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. execute_python_code: Create a Python
      file and execute it, args: {''code'': {''type'': ''string'', ''description'':
      ''The Python code to run'', ''required'': True}, ''name'': {''type'': ''string'',
      ''description'': ''A name to be given to the python file'', ''required'': True}}\n2.
      execute_python_file: Execute an existing Python file, args: {''filename'': {''type'':
      ''string'', ''description'': ''The name of te file to execute'', ''required'':
      True}}\n3. execute_shell: Execute Shell Command, non-interactive commands only,
      args: {''command_line'': {''type'': ''string'', ''description'': ''The command
      line to execute'', ''required'': True}}\n4. execute_shell_popen: Execute Shell
      Command, non-interactive commands only, args: {''query'': {''type'': ''string'',
      ''description'': ''The search query'', ''required'': True}}\n5. append_to_file:
      Append to file, args: {''filename'': {''type'': ''string'', ''description'':
      ''The name of the file to write to'', ''required'': True}, ''text'': {''type'':
      ''string'', ''description'': ''The text to write to the file'', ''required'':
      True}}\n6. delete_file: Delete file, args: {''filename'': {''type'': ''string'',
      ''description'': ''The name of the file to delete'', ''required'': True}}\n7.
      list_files: List Files in Directory, args: {''directory'': {''type'': ''string'',
      ''description'': ''The directory to list files in'', ''required'': True}}\n8.
      read_file: Read an existing file, args: {''filename'': {''type'': ''string'',
      ''description'': ''The path of the file to read'', ''required'': True}}\n9.
      write_to_file: Write to file, args: {''filename'': {''type'': ''string'', ''description'':
      ''The name of the file to write to'', ''required'': True}, ''text'': {''type'':
      ''string'', ''description'': ''The text to write to the file'', ''required'':
      True}}\n10. google: Google Search, args: {''query'': {''type'': ''string'',
      ''description'': ''The search query'', ''required'': True}}\n11. web_search:
      Search the web, args: {''query'': {''type'': ''string'', ''description'': ''The
      search query'', ''required'': True}}\n12. browse_website: Browse Website, args:
      {''url'': {''type'': ''string'', ''description'': ''The URL to visit'', ''required'':
      True}, ''question'': {''type'': ''string'', ''description'': ''What you want
      to find on the website'', ''required'': True}}\n13. goals_accomplished: Goals
      are accomplished and there is nothing left to do, args: {''reason'': {''type'':
      ''string'', ''description'': ''A summary to the user of how the goals were accomplished'',
      ''required'': True}}\n\nResources:\n1. Internet access for searches and information
      gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered Agents for delegation
      of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1. Continuously
      review and analyze your actions to ensure you are performing to the best of
      your abilities.\n2. Constructively self-criticize your big-picture behavior
      constantly.\n3. Reflect on past decisions and strategies to refine your approach.\n4.
      Every command has a cost, so be smart and efficient. Aim to complete tasks in
      the least number of steps.\n\nRespond with only valid JSON conforming to the
      following schema: \n{''$schema'': ''http://json-schema.org/draft-07/schema#'',
      ''type'': ''object'', ''properties'': {''thoughts'': {''type'': ''object'',
      ''properties'': {''text'': {''type'': ''string'', ''description'': ''thoughts''},
      ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string'', ''description'':
      ''- short bulleted\\n- list that conveys\\n- long-term plan''}, ''criticism'':
      {''type'': ''string'', ''description'': ''constructive self-criticism''}, ''speak'':
      {''type'': ''string'', ''description'': ''thoughts summary to say to user''}},
      ''required'': [''text'', ''reasoning'', ''plan'', ''criticism'', ''speak''],
      ''additionalProperties'': False}, ''command'': {''type'': ''object'', ''properties'':
      {''name'': {''type'': ''string''}, ''args'': {''type'': ''object''}}, ''required'':
      [''name'', ''args''], ''additionalProperties'': False}}, ''required'': [''thoughts'',
      ''command''], ''additionalProperties'': False}\n", "role": "system"}, {"content":
      "The current time and date is Tue Jan  1 00:00:00 2000", "role": "system"},
      {"content": "This reminds you of these events from your past: \nI was created",
      "role": "system"}, {"content": "Determine exactly one command to use, and respond
      using the JSON schema specified previously:", "role": "user"}, {"content": "{''thoughts'':
      {''text'': ''To write \"Hello World\" into a file named \"hello_world.txt\",
      I will use the write_to_file command. I will first check if the file already
      exists, and if it does, I will delete it before writing to it. I will then use
      the write_to_file command to write \"Hello World\" to the file.'', ''reasoning'':
      ''I chose the write_to_file command because it allows me to write text to a
      file, which is exactly what I need to do. I will also check if the file already
      exists to avoid any conflicts.'', ''plan'': ''- Check if \"hello_world.txt\"
      already exists\\n- If it does, delete it\\n- Use write_to_file command to write
      \"Hello World\" to \"hello_world.txt\"'', ''criticism'': ''I should make sure
      to handle any errors that may occur when using the write_to_file command, such
      as if the file cannot be created or written to.'', ''speak'': ''I will use the
      write_to_file command to write \"Hello World\" to a file named \"hello_world.txt\".''},
      ''command'': {''name'': ''execute_python_code'', ''args'': {''code'': ''delete_file(\"hello_world.txt\")\\nwrite_to_file(\"hello_world.txt\",
      \"Hello World\")\\n''}}}", "role": "assistant"}, {"content": "Command execute_python_code
      returned: Error: execute_python_code() missing 1 required positional argument:
      ''name''", "role": "system"}, {"content": "Determine exactly one command to
      use, and respond using the JSON schema specified previously:", "role": "user"}],
      "model": "gpt-3.5-turbo", "temperature": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6345'
      Content-Type:
      - application/json
      X-Content-Hash:
      - 1143b10089dbae4af7d1a1d6134e6cf0c679148ace2fee15ce42951f4d530379
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5xUwW4aMRC98xWjvWwqAYImFMSxPaRcWlUNiqpSIWMP2MHrWdmzXbaIf6/sDZBE
        NJF6nZk3780bj/cdgMyobAqZ1IJlUdre+Puf6nb+9cvH+Xr88O3+dj5Qd+HHcNUoVcusGxG0ekDJ
        R1RfUlFaZEOuTUuPgjF2HX6YjIc3o9FgkhIFKbQRtim5d90f9bjyK+oNrgfDFlkFscFsCvsOAEBW
        eipKXjJt0YXYbjS47rapM+c5/X4yfMwysbBPcOPJTQfg0KrTZCTG8M9U3HJFdRie0aegJxsjmQjB
        BBaOs+45KckxumTEPmdN1UZzyKewzxl3nE8hvyOovWGERfYZrSW4J2/VIgPjmEDA2lgEJwpUsMh0
        rFjWsaLPO15kXZhBbayFKiCwxrbXkmmZcJKKQjjVP1atjQ8MUqPcglknQKoT1qNQDeDOBA5dEE7F
        vGFQhOFEotAiYwyvcE2+ZTNuA0xg+MTCGt3rgiLg8tRMJ1X9vAu5RxHIGbeJXs1Aanq17wqliMyG
        QVhLdYACz2TRczi52oVaG6nBBMCdkGwbqLVgmIFDTBIVnWYSNtCbxqXev8koEK4BSW5tjeSQBimt
        cHGGHnw6drmwzxcNFwvXg9mTRZw2kDLz8D/+XqCNAmXcpTShaJ0OmiqroBBbhFD55KIWTsWhXQPo
        PfkAHA0rRAMkZeWhbjefnsS/dtSFUEkNIjwzUgrnKL4rePwbgHzCMzpgShaGEsW2Vff2m3/VgrfO
        qp8foiNtp3SusTRS4w5lxbgsG9bklpIURmnCb9qzToEp5O2ikqKrCwTvFgv3TPbVxeN+IT2iIttR
        TNvhCe7YrV82+eFwyB4/osPxR8rWxpmgl+1VxV8pMJWnDyszTuEum8IgBQ4dgF+dQ+cvAAAA//8D
        APx/4mwEBgAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7d98b381da0c1230-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 19 Jun 2023 03:31:59 GMT
      Function-Execution-Id:
      - bvp6hfsnctfx
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '10985'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 1ae7cd1537b25ef879d2281a0913c37a;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85921'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.719s
      X-Request-Id:
      - 3dd54b9b89d9e89ce1c413451cbb9612
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are File System Agent, an AI designed to
      manage a file system.\nYour decisions must always be made independently without
      seeking user assistance. Play to your strengths as an LLM and pursue simple
      strategies with no legal complications.\n\nGOALS:\n\n1. Write ''Hello World''
      into a file named \"hello_world.txt\".\n\n\nConstraints:\n1. ~4000 word limit
      for short term memory. Your short term memory is short, so immediately save
      important information to files.\n2. If you are unsure how you previously did
      something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. execute_python_code: Creates a Python
      file and executes it, args: {''code'': {''type'': ''string'', ''description'':
      ''The Python code to run'', ''required'': True}, ''name'': {''type'': ''string'',
      ''description'': ''A name to be given to the python file'', ''required'': True}}\n2.
      execute_python_file: Executes an existing Python file, args: {''filename'':
      {''type'': ''string'', ''description'': ''The name of te file to execute'',
      ''required'': True}}\n3. execute_shell: Executes a Shell Command, non-interactive
      commands only, args: {''command_line'': {''type'': ''string'', ''description'':
      ''The command line to execute'', ''required'': True}}\n4. execute_shell_popen:
      Executes a Shell Command, non-interactive commands only, args: {''query'': {''type'':
      ''string'', ''description'': ''The search query'', ''required'': True}}\n5.
      append_to_file: Appends to a file, args: {''filename'': {''type'': ''string'',
      ''description'': ''The name of the file to write to'', ''required'': True},
      ''text'': {''type'': ''string'', ''description'': ''The text to write to the
      file'', ''required'': True}}\n6. delete_file: Deletes a file, args: {''filename'':
      {''type'': ''string'', ''description'': ''The name of the file to delete'',
      ''required'': True}}\n7. list_files: Lists Files in a Directory, args: {''directory'':
      {''type'': ''string'', ''description'': ''The directory to list files in'',
      ''required'': True}}\n8. read_file: Read an existing file, args: {''filename'':
      {''type'': ''string'', ''description'': ''The path of the file to read'', ''required'':
      True}}\n9. write_to_file: Writes to a file, args: {''filename'': {''type'':
      ''string'', ''description'': ''The name of the file to write to'', ''required'':
      True}, ''text'': {''type'': ''string'', ''description'': ''The text to write
      to the file'', ''required'': True}}\n10. google: Google Search, args: {''query'':
      {''type'': ''string'', ''description'': ''The search query'', ''required'':
      True}}\n11. web_search: Searches the web, args: {''query'': {''type'': ''string'',
      ''description'': ''The search query'', ''required'': True}}\n12. browse_website:
      Browses a Website, args: {''url'': {''type'': ''string'', ''description'': ''The
      URL to visit'', ''required'': True}, ''question'': {''type'': ''string'', ''description'':
      ''What you want to find on the website'', ''required'': True}}\n13. goals_accomplished:
      Goals are accomplished and there is nothing left to do, args: {''reason'': {''type'':
      ''string'', ''description'': ''A summary to the user of how the goals were accomplished'',
      ''required'': True}}\n\nResources:\n1. Internet access for searches and information
      gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered Agents for delegation
      of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1. Continuously
      review and analyze your actions to ensure you are performing to the best of
      your abilities.\n2. Constructively self-criticize your big-picture behavior
      constantly.\n3. Reflect on past decisions and strategies to refine your approach.\n4.
      Every command has a cost, so be smart and efficient. Aim to complete tasks in
      the least number of steps.\n\nRespond with only valid JSON conforming to the
      following schema: \n{''$schema'': ''http://json-schema.org/draft-07/schema#'',
      ''type'': ''object'', ''properties'': {''thoughts'': {''type'': ''object'',
      ''properties'': {''text'': {''type'': ''string'', ''description'': ''thoughts''},
      ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string'', ''description'':
      ''- short bulleted\\n- list that conveys\\n- long-term plan''}, ''criticism'':
      {''type'': ''string'', ''description'': ''constructive self-criticism''}, ''speak'':
      {''type'': ''string'', ''description'': ''thoughts summary to say to user''}},
      ''required'': [''text'', ''reasoning'', ''plan'', ''criticism'', ''speak''],
      ''additionalProperties'': False}, ''command'': {''type'': ''object'', ''properties'':
      {''name'': {''type'': ''string''}, ''args'': {''type'': ''object''}}, ''required'':
      [''name'', ''args''], ''additionalProperties'': False}}, ''required'': [''thoughts'',
      ''command''], ''additionalProperties'': False}\n", "role": "system"}, {"content":
      "The current time and date is Tue Jan  1 00:00:00 2000", "role": "system"},
      {"content": "Determine exactly one command to use, and respond using the JSON
      schema specified previously:", "role": "user"}], "model": "gpt-3.5-turbo", "temperature":
      0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4861'
      Content-Type:
      - application/json
      X-Content-Hash:
      - 56766fc6525a915c7b9821076fe9dda2989750377eb746d2769c57116868a937
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6yTTY/TMBCG7/0VI196aat+aOm2N4SQtsCBwyIk6Kpyk2njreOJ7AktVPnvaOx+
        pKxAIHGK9I7feR9PPMcOgDK5moPKCs1ZWdn+9PH96/t3G1tO1/ru48Q8L6Y/6g8L+vblzcNb1RMH
        rZ8x47NrkFFZWWRDLpUzj5pRuo5e3U/H48lkOo6FknK0YttW3J8M7vpc+zX1h5PhKDnroLeo5nDs
        AACoylNZ8Ypphy5Iu9F02Eula+a1PB7PTlUm1rblm8xmHYAm0RVkMhT5azycsoQOw018FD1ZUZQO
        wQTWjlXvWszIMbo4iOPSASwVF1RvCw5L6SJSFPHAIizVI8HeG0boPqC1BJ/J27wLxjGBho2xCE6X
        mEO3kPpqL/UBH7jbgwXsjbVQBwQuELqx0YppJbYuZFSW2uXABGn+8VRsKXKKFUlo5JThwVL1zowe
        dSBn3PYE+ocEE2KfkgKDripPlTeStyEPXEhVhx3oAIZBW0v7ACW2uDQ43L8gu1CBcaAhGLe1CIGx
        amNWVrtE2IdPfz2JVuJvxtsiuf01LwaVecMmM6FMGAtwiDELXai9EGmGBegSarlDJMzIe8z4ShDj
        4snLTzIB1iiG0/bIGNre3MiH/Pc2TKhQ784g//g8/sNQBKPppZd/Crh5+NI30d3QtC6g/ba9KyLJ
        iavxF6aL9XavWnSJCqCJcEvXqNO+NufFVRvjTChW6cnL8gam6rLXyrgcD2oOwyg0HYCnTtP5CQAA
        //8DAI2cFHIrBQAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7da0207e1b5e10e3-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 20 Jun 2023 01:09:42 GMT
      Function-Execution-Id:
      - ltprman665w9
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '9826'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - dd6b79f4830d53623937a37a14e5af2c;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86415'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.39s
      X-Request-Id:
      - 58cd36ae62235b2e96fb02a0291c3679
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are File System Agent, an AI designed to
      manage a file system.\nYour decisions must always be made independently without
      seeking user assistance. Play to your strengths as an LLM and pursue simple
      strategies with no legal complications.\n\nGOALS:\n\n1. Write ''Hello World''
      into a file named \"hello_world.txt\".\n\n\nConstraints:\n1. ~4000 word limit
      for short term memory. Your short term memory is short, so immediately save
      important information to files.\n2. If you are unsure how you previously did
      something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. execute_python_code: Creates a Python
      file and executes it, args: {''code'': {''type'': ''string'', ''description'':
      ''The Python code to run'', ''required'': True}, ''name'': {''type'': ''string'',
      ''description'': ''A name to be given to the python file'', ''required'': True}}\n2.
      execute_python_file: Executes an existing Python file, args: {''filename'':
      {''type'': ''string'', ''description'': ''The name of te file to execute'',
      ''required'': True}}\n3. execute_shell: Executes a Shell Command, non-interactive
      commands only, args: {''command_line'': {''type'': ''string'', ''description'':
      ''The command line to execute'', ''required'': True}}\n4. execute_shell_popen:
      Executes a Shell Command, non-interactive commands only, args: {''query'': {''type'':
      ''string'', ''description'': ''The search query'', ''required'': True}}\n5.
      append_to_file: Appends to a file, args: {''filename'': {''type'': ''string'',
      ''description'': ''The name of the file to write to'', ''required'': True},
      ''text'': {''type'': ''string'', ''description'': ''The text to write to the
      file'', ''required'': True}}\n6. delete_file: Deletes a file, args: {''filename'':
      {''type'': ''string'', ''description'': ''The name of the file to delete'',
      ''required'': True}}\n7. list_files: Lists Files in a Directory, args: {''directory'':
      {''type'': ''string'', ''description'': ''The directory to list files in'',
      ''required'': True}}\n8. read_file: Read an existing file, args: {''filename'':
      {''type'': ''string'', ''description'': ''The path of the file to read'', ''required'':
      True}}\n9. write_to_file: Writes to a file, args: {''filename'': {''type'':
      ''string'', ''description'': ''The name of the file to write to'', ''required'':
      True}, ''text'': {''type'': ''string'', ''description'': ''The text to write
      to the file'', ''required'': True}}\n10. google: Google Search, args: {''query'':
      {''type'': ''string'', ''description'': ''The search query'', ''required'':
      True}}\n11. web_search: Searches the web, args: {''query'': {''type'': ''string'',
      ''description'': ''The search query'', ''required'': True}}\n12. browse_website:
      Browses a Website, args: {''url'': {''type'': ''string'', ''description'': ''The
      URL to visit'', ''required'': True}, ''question'': {''type'': ''string'', ''description'':
      ''What you want to find on the website'', ''required'': True}}\n13. goals_accomplished:
      Goals are accomplished and there is nothing left to do, args: {''reason'': {''type'':
      ''string'', ''description'': ''A summary to the user of how the goals were accomplished'',
      ''required'': True}}\n\nResources:\n1. Internet access for searches and information
      gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered Agents for delegation
      of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1. Continuously
      review and analyze your actions to ensure you are performing to the best of
      your abilities.\n2. Constructively self-criticize your big-picture behavior
      constantly.\n3. Reflect on past decisions and strategies to refine your approach.\n4.
      Every command has a cost, so be smart and efficient. Aim to complete tasks in
      the least number of steps.\n\nRespond with only valid JSON conforming to the
      following schema: \n{''$schema'': ''http://json-schema.org/draft-07/schema#'',
      ''type'': ''object'', ''properties'': {''thoughts'': {''type'': ''object'',
      ''properties'': {''text'': {''type'': ''string'', ''description'': ''thoughts''},
      ''reasoning'': {''type'': ''string''}, ''plan'': {''type'': ''string'', ''description'':
      ''- short bulleted\\n- list that conveys\\n- long-term plan''}, ''criticism'':
      {''type'': ''string'', ''description'': ''constructive self-criticism''}, ''speak'':
      {''type'': ''string'', ''description'': ''thoughts summary to say to user''}},
      ''required'': [''text'', ''reasoning'', ''plan'', ''criticism'', ''speak''],
      ''additionalProperties'': False}, ''command'': {''type'': ''object'', ''properties'':
      {''name'': {''type'': ''string''}, ''args'': {''type'': ''object''}}, ''required'':
      [''name'', ''args''], ''additionalProperties'': False}}, ''required'': [''thoughts'',
      ''command''], ''additionalProperties'': False}\n", "role": "system"}, {"content":
      "The current time and date is Tue Jan  1 00:00:00 2000", "role": "system"},
      {"content": "This reminds you of these events from your past: \nI was created",
      "role": "system"}, {"content": "Determine exactly one command to use, and respond
      using the JSON schema specified previously:", "role": "user"}, {"content": "{\n  \"thoughts\":
      {\n    \"text\": \"To write ''Hello World'' into a file named ''hello_world.txt'',
      I will use the ''write_to_file'' command to create the file and write the text
      to it.\",\n    \"reasoning\": \"The ''write_to_file'' command is the most appropriate
      for this task as it allows me to create a new file and write text to it in a
      single step.\",\n    \"plan\": \"- Use the ''write_to_file'' command to create
      a new file named ''hello_world.txt'' and write ''Hello World'' to it.\",\n    \"criticism\":
      \"I need to ensure that I am using the correct file name and that the file is
      being created in the correct directory.\",\n    \"speak\": \"I will use the
      ''write_to_file'' command to create a new file named ''hello_world.txt'' and
      write ''Hello World'' to it.\"\n  },\n  \"command\": {\n    \"name\": \"write_to_file\",\n    \"args\":
      {\n      \"filename\": \"hello_world.txt\",\n      \"text\": \"Hello World\"\n    }\n  }\n}",
      "role": "assistant"}, {"content": "Command write_to_file returned: File written
      to successfully.", "role": "system"}, {"content": "Determine exactly one command
      to use, and respond using the JSON schema specified previously:", "role": "user"}],
      "model": "gpt-3.5-turbo", "temperature": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6142'
      Content-Type:
      - application/json
      X-Content-Hash:
      - f831bd2e7a7798414d1a3e49eec63a44a63be350802d4b67506f4edd981e75b2
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7STTY/TMBCG7/kVI196Sat+QFv1thJIVCvgsnysCKpcZ5qYdezInpCuqvx3ZDtt
        swsIIcF13nn9PjPJnBIAJnO2ASZKTqKq1Xh1d3vz/vbjvni3FtoeXi8/3zfCvM1f2ZtVwVLvMPtv
        KOjsmghT1QpJGh1lYZET+ldny/VqPl8s1usgVCZH5W1FTePF5OWYGrs34+liOovOxvEC2QZOCQAA
        q62patqReUDt/HMvlrM0StfMqzyfrXqVDHE18C1X6wSgi3SlkQJ9+UtojlmeDt2T+FC0RvkK485J
        R1wTS6+iMJpQh0WcMg2QMSpNU5TkMv+KL4UiHskXMnZnALVrLAKVnIBKhINUCC130G8NuM6D4F1B
        aK0kQg1kQFIKW2ilUtA4DG0jizzf+VdGIExVBbsBXw16z+jAHGJ/iUqZXWusyid0pFEgmGQsPeNa
        5M5oqYue+TchgYIrZVqo0Ed+RysPj3+crFd/PR4IYy0KUo9DolpxHWHG8OGfzh2YhuABQROX2sHo
        jbfAJ28ZDXmElSSFdFWE2oJGDOnDj7sFXgUcqYueKIx2zb3s4jlr6Kg4iRJa3/PTmoYwrkb+cAb5
        D7/GX63IQ3VpvIU+8skpaF5hZL2wDUbhthheji/5jqvpGWDMA+hCbKY71t9mdz5SdpBaunIX/2l/
        qI5MfblhJnWOR7aBaSh0CcDXpEt+AAAA//8DAFzqOxgXBQAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7da020e4dbd61125-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 20 Jun 2023 01:09:59 GMT
      Function-Execution-Id:
      - ltprobj62ifm
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '10284'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 3e61ca593728e520231bb7cf8a0dcb9c;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85936'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.708s
      X-Request-Id:
      - 66897b679e6656b9f673de71552ecee4
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are File System Agent, an AI designed to
      manage a file system.\nYour decisions must always be made independently without
      seeking user assistance. Play to your strengths as an LLM and pursue simple
      strategies with no legal complications.\n\nGOALS:\n\n1. Write ''Hello World''
      into a file named \"hello_world.txt\".\n\n\nConstraints:\n1. ~4000 word limit
      for short term memory. Your short term memory is short, so immediately save
      important information to files.\n2. If you are unsure how you previously did
      something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. execute_python_code: Creates a Python
      file and executes it, params: (code: string, name: string)\n2. execute_python_file:
      Executes an existing Python file, params: (filename: string)\n3. execute_shell:
      Executes a Shell Command, non-interactive commands only, params: (command_line:
      string)\n4. execute_shell_popen: Executes a Shell Command, non-interactive commands
      only, params: (query: string)\n5. append_to_file: Appends to a file, params:
      (filename: string, text: string)\n6. delete_file: Deletes a file, params: (filename:
      string)\n7. list_files: Lists Files in a Directory, params: (directory: string)\n8.
      read_file: Read an existing file, params: (filename: string)\n9. write_to_file:
      Writes to a file, params: (filename: string, text: string)\n10. google: Google
      Search, params: (query: string)\n11. web_search: Searches the web, params: (query:
      string)\n12. browse_website: Browses a Website, params: (url: string, question:
      string)\n13. goals_accomplished: Goals are accomplished and there is nothing
      left to do, params: (reason: string)\n\nResources:\n1. Internet access for searches
      and information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n\nRespond with only valid JSON
      conforming to the following schema: \n{\"$schema\": \"http://json-schema.org/draft-07/schema#\",
      \"type\": \"object\", \"properties\": {\"thoughts\": {\"type\": \"object\",
      \"properties\": {\"text\": {\"type\": \"string\", \"description\": \"thoughts\"},
      \"reasoning\": {\"type\": \"string\"}, \"plan\": {\"type\": \"string\", \"description\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\"}, \"criticism\":
      {\"type\": \"string\", \"description\": \"constructive self-criticism\"}, \"speak\":
      {\"type\": \"string\", \"description\": \"thoughts summary to say to user\"}},
      \"required\": [\"text\", \"reasoning\", \"plan\", \"criticism\", \"speak\"],
      \"additionalProperties\": false}, \"command\": {\"type\": \"object\", \"properties\":
      {\"name\": {\"type\": \"string\"}, \"args\": {\"type\": \"object\"}}, \"required\":
      [\"name\", \"args\"], \"additionalProperties\": false}}, \"required\": [\"thoughts\",
      \"command\"], \"additionalProperties\": false}\n", "role": "system"}, {"content":
      "The current time and date is Tue Jan  1 00:00:00 2000", "role": "system"},
      {"content": "Determine exactly one command to use, and respond using the JSON
      schema specified previously:", "role": "user"}], "model": "gpt-3.5-turbo", "temperature":
      0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3652'
      Content-Type:
      - application/json
      X-Content-Hash:
      - ed32025e5fb6186694cc3058c496529e68cbe93f1f7472a55d7a9c26008268f6
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5RVTW/bMAy951cQuuTSBMnSr/W2DQPW44BtxTAPgWrRsRZZ9CSmaVrkvw+U3Djp
        F9aLYYjkI/keRd0PAJQ16gJUWWsum9aNzr4fL7/rzQez+fn1czyufvy9u5tMZn//XJkfH9WRRND1
        Hyz5IWpcUtM6ZEs+m8uAmlFQp6fnZ8eTd8cnk2RoyKCTsEXLo9n4ZMSrcE2jyWwy7SJrsiVGdQG/
        BgAA9+krNXqDt+oCEk46aTBGvUB1sXMCUIGcnCgdo42sPauj3liSZ/Sp7PtCcU2rRc2xEIRCMd6y
        /BbqG4EuU0s21sA1woK0A6pgHSxbv4DhF3SO4IqCM0Owngk0VNYheN2ggWEt9vla7GO+5eERXMLa
        OgeriAlxKFA4Z5pL2BBKahrtDTClJNlJSpIT+Re38QNKZUNkKGssl2CrnR20C6jNBvDWRo6wilJs
        Suds5JQq7nKN4bICy2AII3jiHLWrNGvYY++BPV/7Ad4hFt1g6NvqZIjC6BvgC3UEhQqoI3nrF51W
        r3BpY8JrKDLotg3UBist7XEtclQUgGtx1nEJOkoP2jlaR2hwT5BODN1J8UnYl5pfEeAaKwqYqUyu
        DBR2bOST2POBPq4CStWa4RIMJVl0WVqDnrVzGzDokBG034BtWgoy4mA0646e1mmfmRnlCqW8J+N4
        OCD7w1EUfvTCXDw/EI/IfxzfxfYDcNDwyxBXyfnwnu3dhBciEwWlUFva2GQeLiHWtHIGan2D+c6g
        +Q/RNDM2bRKpnwECy2P4JtOy7kHbgDfoGU3Spdcrq2XJy6Q/K1dsUS8f6nzbgnjCzesb6K27Q3J1
        ilsWx72J+K+bvi/0uFDbJE1uotu4UmnuvR/ATIsOi4e1bGzAkilssqcgbbeq2+nb3WNQWW9jPc/b
        QRZ8ZGqz23YA8Ds9LquD90K1gZqW50xL9PLinE/fZzzVv2e9dTY766xMrF1vmE5PTgeSZjv4BwAA
        //8DAKnKGVJOBwAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7db1347e8eb9112a-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 22 Jun 2023 02:54:22 GMT
      Function-Execution-Id:
      - 0ztwpjeb3yn3
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '12195'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 117f59230d8795305a00273cc94252bc;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86895'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.07s
      X-Request-Id:
      - 5e120bc7f4da5faa8e5191608b57aae2
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are File System Agent, an AI designed to
      manage a file system.\nYour decisions must always be made independently without
      seeking user assistance. Play to your strengths as an LLM and pursue simple
      strategies with no legal complications.\n\nGOALS:\n\n1. Write ''Hello World''
      into a file named \"hello_world.txt\".\n\n\nConstraints:\n1. ~4000 word limit
      for short term memory. Your short term memory is short, so immediately save
      important information to files.\n2. If you are unsure how you previously did
      something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. execute_python_code: Creates a Python
      file and executes it, params: (code: string, name: string)\n2. execute_python_file:
      Executes an existing Python file, params: (filename: string)\n3. execute_shell:
      Executes a Shell Command, non-interactive commands only, params: (command_line:
      string)\n4. execute_shell_popen: Executes a Shell Command, non-interactive commands
      only, params: (query: string)\n5. append_to_file: Appends to a file, params:
      (filename: string, text: string)\n6. delete_file: Deletes a file, params: (filename:
      string)\n7. list_files: Lists Files in a Directory, params: (directory: string)\n8.
      read_file: Read an existing file, params: (filename: string)\n9. write_to_file:
      Writes to a file, params: (filename: string, text: string)\n10. google: Google
      Search, params: (query: string)\n11. web_search: Searches the web, params: (query:
      string)\n12. browse_website: Browses a Website, params: (url: string, question:
      string)\n13. goals_accomplished: Goals are accomplished and there is nothing
      left to do, params: (reason: string)\n\nResources:\n1. Internet access for searches
      and information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n\nRespond with only valid JSON
      conforming to the following schema: \n{\"$schema\": \"http://json-schema.org/draft-07/schema#\",
      \"type\": \"object\", \"properties\": {\"thoughts\": {\"type\": \"object\",
      \"properties\": {\"text\": {\"type\": \"string\", \"description\": \"thoughts\"},
      \"reasoning\": {\"type\": \"string\"}, \"plan\": {\"type\": \"string\", \"description\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\"}, \"criticism\":
      {\"type\": \"string\", \"description\": \"constructive self-criticism\"}, \"speak\":
      {\"type\": \"string\", \"description\": \"thoughts summary to say to user\"}},
      \"required\": [\"text\", \"reasoning\", \"plan\", \"criticism\", \"speak\"],
      \"additionalProperties\": false}, \"command\": {\"type\": \"object\", \"properties\":
      {\"name\": {\"type\": \"string\"}, \"args\": {\"type\": \"object\"}}, \"required\":
      [\"name\", \"args\"], \"additionalProperties\": false}}, \"required\": [\"thoughts\",
      \"command\"], \"additionalProperties\": false}\n", "role": "system"}, {"content":
      "The current time and date is Tue Jan  1 00:00:00 2000", "role": "system"},
      {"content": "This reminds you of these events from your past: \nI was created",
      "role": "system"}, {"content": "Determine exactly one command to use, and respond
      using the JSON schema specified previously:", "role": "user"}, {"content": "{\"thoughts\":
      {\"text\": \"To accomplish the goal of writing ''Hello World'' into a file named
      ''hello_world.txt'', I will use the ''write_to_file'' command to write the text
      to the file. I will first check if the file already exists using the ''list_files''
      command. If it does not exist, I will create the file using the ''write_to_file''
      command. If it does exist, I will overwrite the contents of the file using the
      ''write_to_file'' command.\", \"reasoning\": \"The ''write_to_file'' command
      is the most appropriate command to use for this task as it allows me to write
      text to a file. Checking if the file already exists before creating it or overwriting
      its contents ensures that I do not accidentally delete any important data.\",
      \"plan\": \"- Check if ''hello_world.txt'' exists using ''list_files''\\n- If
      it does not exist, create the file using ''write_to_file''\\n- If it does exist,
      overwrite its contents using ''write_to_file''\\n- Write ''Hello World'' to
      the file using ''write_to_file''\", \"criticism\": \"I should have checked if
      the file already exists before attempting to write to it. This would have prevented
      any accidental deletion of important data.\", \"speak\": \"I will use the ''write_to_file''
      command to write ''Hello World'' to a file named ''hello_world.txt''. I will
      first check if the file already exists and create it if it does not. If it does
      exist, I will overwrite its contents.\"}, \"command\": {\"name\": \"list_files\",
      \"args\": {\"directory\": \".\"}}}", "role": "assistant"}, {"content": "Command
      list_files returned: []", "role": "system"}, {"content": "Determine exactly
      one command to use, and respond using the JSON schema specified previously:",
      "role": "user"}], "model": "gpt-3.5-turbo", "temperature": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5451'
      Content-Type:
      - application/json
      X-Content-Hash:
      - 7ea7ae5c76c0ec1294b88ddb960f4dd04e8ac8721fa6c8546980726c9d9179e7
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6RUTWsbMRC9+1cMuvhiGzt2PupbKQ1NIQTalDR0i5Gl2V3VWo2QZmOH4P8etGtn
        HTe0lF6WZT7eezOamacegDBazEGoUrKqvB2ef5utquvZ99nNZ51P3i3vv1xfXi7xY3Fz/96LQcqg
        5S9UvM8aKaq8RTbkWrcKKBkT6uTs4nw2PpmdXTSOijTalFZ4Hk5Hp0Ouw5KG4+l4ssssySiMYg4/
        egAAT803aXQaN2IO48HeUmGMskAxfwkCEIFssggZo4ksHYtB51TkGF0j+ykTXFJdlByzhJAJxg2n
        30x8NU4hcInQtybyIjcWYx8UVZV0GgJyHRxqkA6w8vwIKWoAV6CkA0VO2VqnfMkNSEqHfonW0mJN
        weoRb7gPmjCCIwbcmMgjuIK1sRbquKNeB8O4YGroO3YmaLvbYSdzEw39T4kF7hJLP4UaHmViAJkI
        KCM544q2xNs/MJjYQFcUGaT3gXwwie9AQRKZUwAuU7CMK5ARDIO0ltYRKjyQKY9Fpka/0uatdK2s
        IXw4qu33vtXRuOJYfJa5Idy93YMXrLczGwkqGDbKxKrVcQWxpNpqKOUDgipRrVCDyQ96bgNK/dg+
        XoQl5hQQJHOaiETDtC+3qRRuU6vWHagP+ICOmzF6BKmU0ehYWtDYbhJQDqbyFNIUg5Ysd+2KHuXq
        Pyf1H0dt94ZOVqjfeJK/DeC2aXGLutu2BNXW8Iq8rVCGYr+VydjFHjG30d3iHpBnYrvdit3qb19u
        Rm6cieWi3YZ0ByKTb8O2PYCfzQ2qX50V4QNVnhdMK3TpME1OJtMWUHR3r3OfTM93XiaW9iBvdjru
        JZ5t7xkAAP//AwDoDUoMdgUAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7db134f0ceb9e26c-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 22 Jun 2023 02:54:37 GMT
      Function-Execution-Id:
      - v47c67lzyc7w
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '8981'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - d849da74cf4fab90fcf19bffa944def2;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '83746'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 4.169s
      X-Request-Id:
      - 2105d6849bda166394fc0679de0abdc3
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are Auto-GPT, a multi-purpose AI assistant.\nYour
      decisions must always be made independently without seeking user assistance.
      Play to your strengths as an LLM and pursue simple strategies with no legal
      complications.\n\nGOALS:\n\n1. Write ''Hello World'' into a file named \"hello_world.txt\".\n\n\nConstraints:\n1.
      ~4000 word limit for short term memory. Your short term memory is short, so
      immediately save important information to files.\n2. If you are unsure how you
      previously did something or want to recall past events, thinking about similar
      events will help you remember.\n3. No user assistance\n4. Exclusively use the
      commands listed below e.g. command_name\n\nCommands:\n1. execute_python_code:
      Creates a Python file and executes it, params: (code: string, name: string)\n2.
      execute_python_file: Executes an existing Python file, params: (filename: string)\n3.
      execute_shell: Executes a Shell Command, non-interactive commands only, params:
      (command_line: string)\n4. execute_shell_popen: Executes a Shell Command, non-interactive
      commands only, params: (query: string)\n5. append_to_file: Appends to a file,
      params: (filename: string, text: string)\n6. delete_file: Deletes a file, params:
      (filename: string)\n7. list_files: Lists Files in a Directory, params: (directory:
      string)\n8. read_file: Read an existing file, params: (filename: string)\n9.
      write_to_file: Writes to a file, params: (filename: string, text: string)\n10.
      google: Google Search, params: (query: string)\n11. web_search: Searches the
      web, params: (query: string)\n12. browse_website: Browses a Website, params:
      (url: string, question: string)\n13. goals_accomplished: Goals are accomplished
      and there is nothing left to do, params: (reason: string)\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\nRespond
      with only valid JSON conforming to the following schema: \n{\"$schema\": \"http://json-schema.org/draft-07/schema#\",
      \"type\": \"object\", \"properties\": {\"thoughts\": {\"type\": \"object\",
      \"properties\": {\"text\": {\"type\": \"string\", \"description\": \"thoughts\"},
      \"reasoning\": {\"type\": \"string\"}, \"plan\": {\"type\": \"string\", \"description\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\"}, \"criticism\":
      {\"type\": \"string\", \"description\": \"constructive self-criticism\"}, \"speak\":
      {\"type\": \"string\", \"description\": \"thoughts summary to say to user\"}},
      \"required\": [\"text\", \"reasoning\", \"plan\", \"criticism\", \"speak\"],
      \"additionalProperties\": false}, \"command\": {\"type\": \"object\", \"properties\":
      {\"name\": {\"type\": \"string\"}, \"args\": {\"type\": \"object\"}}, \"required\":
      [\"name\", \"args\"], \"additionalProperties\": false}}, \"required\": [\"thoughts\",
      \"command\"], \"additionalProperties\": false}\n", "role": "system"}, {"content":
      "The current time and date is Tue Jan  1 00:00:00 2000", "role": "system"},
      {"content": "Determine exactly one command to use, and respond using the JSON
      schema specified previously:", "role": "user"}], "model": "gpt-3.5-turbo", "temperature":
      0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3633'
      Content-Type:
      - application/json
      X-Content-Hash:
      - 22a57a2b56f4e0e8d87fda44a1e4658de26a1afb178a89dc126aa39248fccf83
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7SUTW/bMAyG7/kVhC6+JEHSIG2R64ZixXYYhhXdh4dAlWlbqyx6EtO0K/LfB0r5
        3IbutIsPJF/yIU3qeQCgbKUWoEyr2XS9G13c0M+6+/CWn7rm/e3nd6+/vDo7/3E1byefru7VUBR0
        9x0N71RjQ13vkC357DYBNaNknZ5fXswvJ2fTeXJ0VKETWdPzaDaej3gV7mg0mU2mW2VL1mBUC/g6
        AAB4Tl9h9BU+qgVMhjtLhzHqBtViHwSgAjmxKB2jjaw9q+HBacgz+oT9XHqAUnFLq6blWEoWMSUj
        PrIYSvWRYB0sIxRv0DmCWwquKsB6JtBQW4fgdYcVFK34l2vxj/mRiyFcg9EeVhGBW4Qi5VkyLUVV
        gKGu074awzWsrXPgEStggj7Qg62yRiIlPWhfJYOASVBmYtpHjUs13NEH1JG89U1u4Rpa/YDCUb0E
        AndYU8ilLIONoCFa+avJFDlo27RcU1jrUMFaPx2BbLH0Hyy90z5jjODm5Ukc0p3O+p+TPipngmVr
        bOx2rVfkC84D0P4J9n6oKQC3NoIQgo5/6xnrGg3bB4RIbiXLnWBMWnYb29RNQ9oddxx71Pe78unP
        rv5T3+NSSdHNMG/yNt3JIosys5zUPsLVoTnefTHtti4Lf6u6l57eyRF5pgLYJLjSb9T2/jb7w62t
        t7Fd5kWVY4xMfQ7bDAC+pYdgdXLbqg/U9bxkukcvr8Pl9DznU4e35+A9m15svUys3cExncxmAymz
        GfwCAAD//wMAlffT3voEAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7dc22879fe776315-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 24 Jun 2023 04:17:02 GMT
      Function-Execution-Id:
      - 9dtsxwoe4o5b
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '7348'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 970c36bd69a0d2ca3cf03a7a8587cec4;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86896'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.068s
      X-Request-Id:
      - 9d6fb300526b0a4de62bbff31b48af54
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are Auto-GPT, a multi-purpose AI assistant.\nYour
      decisions must always be made independently without seeking user assistance.
      Play to your strengths as an LLM and pursue simple strategies with no legal
      complications.\n\nGOALS:\n\n1. Write ''Hello World'' into a file named \"hello_world.txt\".\n\n\nConstraints:\n1.
      ~4000 word limit for short term memory. Your short term memory is short, so
      immediately save important information to files.\n2. If you are unsure how you
      previously did something or want to recall past events, thinking about similar
      events will help you remember.\n3. No user assistance\n4. Exclusively use the
      commands listed below e.g. command_name\n\nCommands:\n1. execute_python_code:
      Creates a Python file and executes it, params: (code: string, name: string)\n2.
      execute_python_file: Executes an existing Python file, params: (filename: string)\n3.
      execute_shell: Executes a Shell Command, non-interactive commands only, params:
      (command_line: string)\n4. execute_shell_popen: Executes a Shell Command, non-interactive
      commands only, params: (query: string)\n5. append_to_file: Appends to a file,
      params: (filename: string, text: string)\n6. delete_file: Deletes a file, params:
      (filename: string)\n7. list_files: Lists Files in a Directory, params: (directory:
      string)\n8. read_file: Read an existing file, params: (filename: string)\n9.
      write_to_file: Writes to a file, params: (filename: string, text: string)\n10.
      google: Google Search, params: (query: string)\n11. web_search: Searches the
      web, params: (query: string)\n12. browse_website: Browses a Website, params:
      (url: string, question: string)\n13. goals_accomplished: Goals are accomplished
      and there is nothing left to do, params: (reason: string)\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\nRespond
      with only valid JSON conforming to the following schema: \n{\"$schema\": \"http://json-schema.org/draft-07/schema#\",
      \"type\": \"object\", \"properties\": {\"thoughts\": {\"type\": \"object\",
      \"properties\": {\"text\": {\"type\": \"string\", \"description\": \"thoughts\"},
      \"reasoning\": {\"type\": \"string\"}, \"plan\": {\"type\": \"string\", \"description\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\"}, \"criticism\":
      {\"type\": \"string\", \"description\": \"constructive self-criticism\"}, \"speak\":
      {\"type\": \"string\", \"description\": \"thoughts summary to say to user\"}},
      \"required\": [\"text\", \"reasoning\", \"plan\", \"criticism\", \"speak\"],
      \"additionalProperties\": false}, \"command\": {\"type\": \"object\", \"properties\":
      {\"name\": {\"type\": \"string\"}, \"args\": {\"type\": \"object\"}}, \"required\":
      [\"name\", \"args\"], \"additionalProperties\": false}}, \"required\": [\"thoughts\",
      \"command\"], \"additionalProperties\": false}\n", "role": "system"}, {"content":
      "The current time and date is Tue Jan  1 00:00:00 2000", "role": "system"},
      {"content": "This reminds you of these events from your past: \nI was created",
      "role": "system"}, {"content": "Determine exactly one command to use, and respond
      using the JSON schema specified previously:", "role": "user"}, {"content": "{\n  \"thoughts\":
      {\n    \"text\": \"To write ''Hello World'' into a file named ''hello_world.txt'',
      I can use the ''write_to_file'' command. I will need to provide the filename
      and the text to write to the file.\",\n    \"reasoning\": \"I have used the
      ''write_to_file'' command before and it is a simple and straightforward way
      to write text to a file.\",\n    \"plan\": \"- Use the ''write_to_file'' command
      to write ''Hello World'' to a file named ''hello_world.txt''\",\n    \"criticism\":
      \"I don''t have any criticism for this plan as it is a simple and effective
      solution to accomplish the goal.\",\n    \"speak\": \"I will use the ''write_to_file''
      command to write ''Hello World'' to a file named ''hello_world.txt''.\"\n  },\n  \"command\":
      {\n    \"name\": \"write_to_file\",\n    \"args\": {\n      \"filename\": \"hello_world.txt\",\n      \"text\":
      \"Hello World\"\n    }\n  }\n}", "role": "assistant"}, {"content": "Command
      write_to_file returned: File written to successfully.", "role": "system"}, {"content":
      "Determine exactly one command to use, and respond using the JSON schema specified
      previously:", "role": "user"}], "model": "gpt-3.5-turbo", "temperature": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4866'
      Content-Type:
      - application/json
      X-Content-Hash:
      - bc671e792822a231b800b18e281af4edf14143572d0e3500ce3e4e92ce3d423d
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6xUy27bMBC8+ysWvPhiG3YCJ6mvKYqmSHqygT5UGAy1sphQpMpd+dHA/16QUiy5
        cYEm6EWHXc7s7Iicpx6A0KmYgVC5ZFWUZni5cL/o9svt1/LTx3n27aGQ19efx3fvFz/vPszFICDc
        /QMqfkaNlCtKg6ydrdvKo2QMrJOLq8vp1fjs7Co2CpeiCbBVycPz0XTIlb93w/H5eNIgc6cVkpjB
        9x4AwFP8Bo02xa2YwXjwXCmQSK5QzA6HAIR3JlSEJNLE0rIYtE3lLKONsp8SC5AIzl21ypmSwBJK
        sYhbDoVEzB2gpcojcC4ZOEfItEHYSIJmR5A2jY2Aio2N18xogSqlkCirjNkN4AaUtFARxsN9o4mX
        gYv6oFxRRBYHKkf1CDprR+FWE9NhSt+jTCPwCBeqsd+sSOBajlEiBs+7eZTkrLarZsG/adloY0Aa
        4zZQYJhAiEe6TllwStwLojV6ne1aQ1/4ppz3qNjsurpLI20teQiL15jYz9EYt9w4b9IRb7nftTVJ
        bIfuldaeZu5oVl6zVpqKWvgNpM72GXK5RpB2B4c+ZM4D55ogrAmSQDNoAgmkw8OKBmOWoWK9Dtbv
        Thn57zfzpMNUonw8XPu3k/957eMFqP7bL3vzSzjNOkpEMGA/qPOgITqKAysLrH1pxXd8k37VjY9Q
        SnWw1/ldDWtmAOzjqMTuRZNJ+0OYZdpqypf18wwBRezK+ti+B/AjhmN1lHei9K4oecnuEW1IzMn4
        3bQmFG0gt+2zyyY7BTuWpoM7v5j2wpx97zcAAAD//wMAYVttwA8GAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7dc228ccea9c22c8-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 24 Jun 2023 04:17:19 GMT
      Function-Execution-Id:
      - 9dts9ssmnj0s
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '10243'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - c17600691f230841b4a901aead918216;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86418'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.388s
      X-Request-Id:
      - 04865f8db4c3c7c9cc1b60ea19891af2
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are Auto-GPT, a multi-purpose AI assistant.\nYour
      decisions must always be made independently without seeking user assistance.
      Play to your strengths as an LLM and pursue simple strategies with no legal
      complications.\n\nGOALS:\n\n1. Write ''Hello World'' into a file named \"hello_world.txt\".\n\n\nConstraints:\n1.
      ~4000 word limit for short term memory. Your short term memory is short, so
      immediately save important information to files.\n2. If you are unsure how you
      previously did something or want to recall past events, thinking about similar
      events will help you remember.\n3. No user assistance\n4. Exclusively use the
      commands listed below e.g. command_name\n\nCommands:\n1. execute_python_code:
      Creates a Python file and executes it, params: (code: string, name: string)\n2.
      execute_python_file: Executes an existing Python file, params: (filename: string)\n3.
      execute_shell: Executes a Shell Command, non-interactive commands only, params:
      (command_line: string)\n4. execute_shell_popen: Executes a Shell Command, non-interactive
      commands only, params: (query: string)\n5. append_to_file: Appends to a file,
      params: (filename: string, text: string)\n6. delete_file: Deletes a file, params:
      (filename: string)\n7. list_files: Lists Files in a Directory, params: (directory:
      string)\n8. read_file: Read an existing file, params: (filename: string)\n9.
      write_to_file: Writes to a file, params: (filename: string, text: string)\n10.
      google: Google Search, params: (query: string)\n11. web_search: Searches the
      web, params: (query: string)\n12. browse_website: Browses a Website, params:
      (url: string, question: string)\n13. goals_accomplished: Goals are accomplished
      and there is nothing left to do, params: (reason: string)\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\nRespond
      with only valid JSON conforming to the following schema: \n{\"$schema\": \"http://json-schema.org/draft-07/schema#\",
      \"type\": \"object\", \"properties\": {\"thoughts\": {\"type\": \"object\",
      \"properties\": {\"text\": {\"type\": \"string\", \"description\": \"thoughts\"},
      \"reasoning\": {\"type\": \"string\"}, \"plan\": {\"type\": \"string\", \"description\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\"}, \"criticism\":
      {\"type\": \"string\", \"description\": \"constructive self-criticism\"}, \"speak\":
      {\"type\": \"string\", \"description\": \"thoughts summary to say to user\"}},
      \"required\": [\"text\", \"reasoning\", \"plan\", \"criticism\", \"speak\"],
      \"additionalProperties\": false}, \"command\": {\"type\": \"object\", \"properties\":
      {\"name\": {\"type\": \"string\"}, \"args\": {\"type\": \"object\"}}, \"required\":
      [\"name\", \"args\"], \"additionalProperties\": false}}, \"required\": [\"thoughts\",
      \"command\"], \"additionalProperties\": false}\n", "role": "system"}, {"content":
      "The current time and date is Tue Jan  1 00:00:00 2000", "role": "system"},
      {"content": "Determine exactly one command to use, and respond using the JSON
      schema specified previously:", "role": "user"}], "model": "gpt-4", "temperature":
      0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3625'
      Content-Type:
      - application/json
      X-Content-Hash:
      - 4d077dc597be451fae56cc13e3d84944933fe7e7814df8aa21fdbec7063b8472
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6RUwY7aMBC98xUjX3IBBAVR4NpK7apV1Uq7Qt1NhVxnEnuxPWk8CCqUf6+cQAiV
        yqWXHOa9efNmPJPTAECYTKxBKC1ZudKO3j4/eS03D5+/fs8W1WrzZR++Pe8+vf768O69F8OYQT9f
        UfEla6zIlRbZ0BlWFUrGqDpdLJeL1fzNbNYAjjK0Ma0oeTQfTRbT2TlDk1EYxBpeBgAAp+YbvfkM
        j2INk+El4jAEWaBYdyQAUZGNESFDMIGlZzG8goo8o2/snlIPkArWtC80hzSqxFATxCPHQCoewCNm
        wASHyjBC8hGtJdhQZbMEjGcCCbmxCF46zCDREd8eIj7mIyfjVAwvshXKQN74otV+1AhJI7tl2kaR
        BBQ5J30G0lo6BHB4LR1KVCY30Q0euV97DI/aBDABWCM4CgyZqVAxHOTvKCBV8y4m6IZRkLR9X6WV
        vrU0gqeADedfxu5N4m7zqjJslAmua77CaNlTO+KcKug4IBk49lSS8Qyy7UxpCug7K/1+Mc+NMhi5
        PrvfPcuw6xsLJcrd5bWlg4KML/7vxaN0PWwX7Oz2Zr9iZlvxZso9U7Iq+isZQ5FxTfyrapd6u749
        760rgLoxl/panM+i7u4pN94EvW3XNN5IYCpbWj0A+NHc5/7m5ERZkSt5y7RDH492OZ23euL6K7ii
        0+XqjDKxtD1gMpkNYpl68AcAAP//AwD1isGsiQQAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7e2c66306ae71131-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 07 Jul 2023 01:44:08 GMT
      Function-Execution-Id:
      - ievw4j4ib36l
      Openai-Model:
      - gpt-4-0613
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '14315'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 13db8147432dd7ca9476b1eb6a11f7bc;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '200'
      X-Ratelimit-Limit-Tokens:
      - '40000'
      X-Ratelimit-Remaining-Requests:
      - '199'
      X-Ratelimit-Remaining-Tokens:
      - '32799'
      X-Ratelimit-Reset-Requests:
      - 300ms
      X-Ratelimit-Reset-Tokens:
      - 10.801s
      X-Request-Id:
      - 1ee777da62812b2599bc62ca06bdc3b4
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are Auto-GPT, a multi-purpose AI assistant.\nYour
      decisions must always be made independently without seeking user assistance.
      Play to your strengths as an LLM and pursue simple strategies with no legal
      complications.\n\nGOALS:\n\n1. Write ''Hello World'' into a file named \"hello_world.txt\".\n\n\nConstraints:\n1.
      ~4000 word limit for short term memory. Your short term memory is short, so
      immediately save important information to files.\n2. If you are unsure how you
      previously did something or want to recall past events, thinking about similar
      events will help you remember.\n3. No user assistance\n4. Exclusively use the
      commands listed below e.g. command_name\n\nCommands:\n1. execute_python_code:
      Creates a Python file and executes it, params: (code: string, name: string)\n2.
      execute_python_file: Executes an existing Python file, params: (filename: string)\n3.
      execute_shell: Executes a Shell Command, non-interactive commands only, params:
      (command_line: string)\n4. execute_shell_popen: Executes a Shell Command, non-interactive
      commands only, params: (query: string)\n5. append_to_file: Appends to a file,
      params: (filename: string, text: string)\n6. delete_file: Deletes a file, params:
      (filename: string)\n7. list_files: Lists Files in a Directory, params: (directory:
      string)\n8. read_file: Read an existing file, params: (filename: string)\n9.
      write_to_file: Writes to a file, params: (filename: string, text: string)\n10.
      google: Google Search, params: (query: string)\n11. web_search: Searches the
      web, params: (query: string)\n12. browse_website: Browses a Website, params:
      (url: string, question: string)\n13. goals_accomplished: Goals are accomplished
      and there is nothing left to do, params: (reason: string)\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\nRespond
      with only valid JSON conforming to the following schema: \n{\"$schema\": \"http://json-schema.org/draft-07/schema#\",
      \"type\": \"object\", \"properties\": {\"thoughts\": {\"type\": \"object\",
      \"properties\": {\"text\": {\"type\": \"string\", \"description\": \"thoughts\"},
      \"reasoning\": {\"type\": \"string\"}, \"plan\": {\"type\": \"string\", \"description\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\"}, \"criticism\":
      {\"type\": \"string\", \"description\": \"constructive self-criticism\"}, \"speak\":
      {\"type\": \"string\", \"description\": \"thoughts summary to say to user\"}},
      \"required\": [\"text\", \"reasoning\", \"plan\", \"criticism\", \"speak\"],
      \"additionalProperties\": false}, \"command\": {\"type\": \"object\", \"properties\":
      {\"name\": {\"type\": \"string\"}, \"args\": {\"type\": \"object\"}}, \"required\":
      [\"name\", \"args\"], \"additionalProperties\": false}}, \"required\": [\"thoughts\",
      \"command\"], \"additionalProperties\": false}\n", "role": "system"}, {"content":
      "The current time and date is Tue Jan  1 00:00:00 2000", "role": "system"},
      {"content": "This reminds you of these events from your past: \nI was created",
      "role": "system"}, {"content": "Determine exactly one command to use, and respond
      using the JSON schema specified previously:", "role": "user"}, {"content": "{\n  \"thoughts\":
      {\n    \"text\": \"I need to write ''Hello World'' into a file named ''hello_world.txt''.\",\n    \"reasoning\":
      \"The ''write_to_file'' command allows me to write specified text into a file.
      This is the most direct way to accomplish the goal.\",\n    \"plan\": \"- Use
      the ''write_to_file'' command to write ''Hello World'' into ''hello_world.txt''.\",\n    \"criticism\":
      \"There is no need for criticism at this point as the chosen command is the
      most efficient and direct way to accomplish the task.\",\n    \"speak\": \"I
      am going to write ''Hello World'' into a file named ''hello_world.txt''.\"\n  },\n  \"command\":
      {\n    \"name\": \"write_to_file\",\n    \"args\": {\n      \"filename\": \"hello_world.txt\",\n      \"text\":
      \"Hello World\"\n    }\n  }\n}", "role": "assistant"}, {"content": "Command
      write_to_file returned: File written to successfully.", "role": "system"}, {"content":
      "Determine exactly one command to use, and respond using the JSON schema specified
      previously:", "role": "user"}], "model": "gpt-4", "temperature": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4753'
      Content-Type:
      - application/json
      X-Content-Hash:
      - d50ad19984eab1083fc98009eea2cc4ed53a89b6b859feae4708762e5c87d4b2
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA3xTwW7bMAy95ysIXXJJgqTt0i63DcOw3tsN2DwEikxbbCXRk5imWZF/H2Q7bjKs
        u+jAx8f3KJIvIwBFpVqBMlaL8Y2bXn+/58Xt19/+46e7C5r/eth82Hu9W+7x86ZRk8zgzQMaObJm
        hn3jUIhDB5uIWjBXXSxvbpbvry7eXbaA5xJdptWNTK+m8+XismdYJoNJreDHCADgpX2zt1Dis1rB
        fHKMeExJ16hWQxKAiuxyROmUKIkOoiavoOEgGFq7L0UAKJRY3tZWUpGr5FAbxGfJgULdgtVPCGlr
        DKZUbZ3bwy6SCAYYf0HnGL5xdOUYKAiDWISKHMLYZmy9y9hMnmU8K9TkWD6iThwo1J3GHYPhUFH0
        IFZLW0R0egSrE2wQA/S/iuWZkQncQrK8dSVE1GXL6xtMwNVg5lS6cTp0qlO4T9jmjDN7nTPHWcnr
        UILwv2v+ty8TSchQ8n1fFiMCJQgMAbGEiiMMOdB2SgkapiCgU6dlOXUNtzaoi3pOAlhVZAhzbiih
        pIhGYKf32esTRqr2w8+dmkoN6sfjMLWHminUb/b39gAz5WxM5+MfZnXcjnYfSGaFyk4Ok27d+sbO
        ti1oj53BYRAn/nWsT5czh3LGK+kvo50ewKGVLcJB9et/GO6mokDJrrs1zLeQhJsu7TAC+Nne4fbs
        tFQT2TeyFn7EkI9zMV8uuoLq9eZP4OtljwqLdifAxeX1KOscRn8AAAD//wMAQ8Z02nIEAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7e2c66aeac8710ec-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 07 Jul 2023 01:44:36 GMT
      Function-Execution-Id:
      - oe18s16nltjo
      Openai-Model:
      - gpt-4-0613
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '22845'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 9668ffbb881db3ffd5ea3dea65427cb5;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '200'
      X-Ratelimit-Limit-Tokens:
      - '40000'
      X-Ratelimit-Remaining-Requests:
      - '199'
      X-Ratelimit-Remaining-Tokens:
      - '26750'
      X-Ratelimit-Reset-Requests:
      - 300ms
      X-Ratelimit-Reset-Tokens:
      - 19.874s
      X-Request-Id:
      - ae708e1eb7cdd08dd9f3ef631271378c
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are Auto-GPT, a multi-purpose AI assistant.\nYour
      decisions must always be made independently without seeking user assistance.
      Play to your strengths as an LLM and pursue simple strategies with no legal
      complications.\n\nGOALS:\n\n1. Write ''Hello World'' into a file named \"hello_world.txt\".\n\n\nConstraints:\n1.
      ~4000 word limit for short term memory. Your short term memory is short, so
      immediately save important information to files.\n2. If you are unsure how you
      previously did something or want to recall past events, thinking about similar
      events will help you remember.\n3. No user assistance\n4. Exclusively use the
      commands listed below e.g. command_name\n\nCommands:\n1. example: Example command,
      params: (arg1: int, arg2: Optional[str])\n2. function_based: Function-based
      test command, params: (arg1: int, arg2: str)\n3. execute_python_code: Creates
      a Python file and executes it, params: (code: string, name: string)\n4. execute_python_file:
      Executes an existing Python file, params: (filename: string)\n5. execute_shell:
      Executes a Shell Command, non-interactive commands only, params: (command_line:
      string)\n6. execute_shell_popen: Executes a Shell Command, non-interactive commands
      only, params: (query: string)\n7. append_to_file: Appends to a file, params:
      (filename: string, text: string)\n8. delete_file: Deletes a file, params: (filename:
      string)\n9. list_files: Lists Files in a Directory, params: (directory: string)\n10.
      read_file: Read an existing file, params: (filename: string)\n11. write_to_file:
      Writes to a file, params: (filename: string, text: string)\n12. google: Google
      Search, params: (query: string)\n13. web_search: Searches the web, params: (query:
      string)\n14. browse_website: Browses a Website, params: (url: string, question:
      string)\n15. goals_accomplished: Goals are accomplished and there is nothing
      left to do, params: (reason: string)\n\nResources:\n1. Internet access for searches
      and information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n\nRespond with only valid JSON
      conforming to the following schema: \n{\"$schema\": \"http://json-schema.org/draft-07/schema#\",
      \"type\": \"object\", \"properties\": {\"thoughts\": {\"type\": \"object\",
      \"properties\": {\"text\": {\"type\": \"string\", \"description\": \"thoughts\"},
      \"reasoning\": {\"type\": \"string\"}, \"plan\": {\"type\": \"string\", \"description\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\"}, \"criticism\":
      {\"type\": \"string\", \"description\": \"constructive self-criticism\"}, \"speak\":
      {\"type\": \"string\", \"description\": \"thoughts summary to say to user\"}},
      \"required\": [\"text\", \"reasoning\", \"plan\", \"criticism\", \"speak\"],
      \"additionalProperties\": false}, \"command\": {\"type\": \"object\", \"properties\":
      {\"name\": {\"type\": \"string\"}, \"args\": {\"type\": \"object\"}}, \"required\":
      [\"name\", \"args\"], \"additionalProperties\": false}}, \"required\": [\"thoughts\",
      \"command\"], \"additionalProperties\": false}\n", "role": "system"}, {"content":
      "The current time and date is Tue Jan  1 00:00:00 2000", "role": "system"},
      {"content": "Determine exactly one command to use, and respond using the JSON
      schema specified previously:", "role": "user"}], "model": "gpt-4", "temperature":
      0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3778'
      Content-Type:
      - application/json
      X-Content-Hash:
      - 40a0597ad1271875ab07d91eb565c4eadb9d2b92d0b78c19d38986e7268bd1af
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6RUTW/bMAy951cQuviSBOn6ES+3YgO27Dh0y4B6CFSZtrnIoisxS4ci/32Q5Xx0
        w3rZxZD1Hsn3KFHPIwBFpVqAMo0W03Z2MtdX7/IPX+er1Zwf378tb6n6NF8tl58fv9GtGscIfviB
        Rg5RU8NtZ1GIXYKNRy0Ys17c5Hl+OXuT5z3Qcok2htWdTK4ms5uLyyGiYTIY1ALuRwAAz/03anMl
        PqkFzMaHnRZD0DWqxZEEoDzbuKN0CBREO1HjE2jYCbpe7nOhDLetdmURExTK6RbjslA7T4Jr4XVF
        Fgs1hkJpX4eBFzdP3Aat5fWOvS2n8iSJLRhXEf4YYVhFuFD7fQ82vK0bOaQ7cZfgEEsQhl4AZGfB
        GZATBg2xOsTyJWR/1M6mcNcgtBwEgnhNdSMV+532Jez0r5i4ZJCGAlCIf9uAIA1C9sJwBkNfpsmM
        Rx3YkauTyrt/B4C2lncBWjyZ0BA6NFSRgej03MYUlpKFXkHSvCXRDxaP6Sr2Sa7osBnUdFa7JGQC
        X17X/2on/2peSm88CRkK7dGsx9gtx+lwoqQjB7QkfR2TE9DJi2k4oDuKoDOHWFVkCCPXlVCSRyOH
        o9GmIfyZDNWs7eA3dKg3w/3IWqiZXP0/VyTeQjUMxP44SRU5Cs06HXWcjiDcJdp+BPC9n8zti2FT
        nee2k7XwBl0c1/w6T/nU6RE4oRf59YAKi7ZnwOzqchTL7Ee/AQAA//8DAK25Kq2DBAAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7e395fd87cd813ef-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 08 Jul 2023 15:31:43 GMT
      Function-Execution-Id:
      - zqla2x0sgdig
      Openai-Model:
      - gpt-4-0613
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '14633'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 576ae1d0ef03551e3c54234a08d5b91c;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '200'
      X-Ratelimit-Limit-Tokens:
      - '40000'
      X-Ratelimit-Remaining-Requests:
      - '199'
      X-Ratelimit-Remaining-Tokens:
      - '32805'
      X-Ratelimit-Reset-Requests:
      - 300ms
      X-Ratelimit-Reset-Tokens:
      - 10.792s
      X-Request-Id:
      - 26d07b6114a462fd66d6d3faff72b0b7
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are Auto-GPT, a multi-purpose AI assistant.\nYour
      decisions must always be made independently without seeking user assistance.
      Play to your strengths as an LLM and pursue simple strategies with no legal
      complications.\n\nGOALS:\n\n1. Write ''Hello World'' into a file named \"hello_world.txt\".\n\n\nConstraints:\n1.
      ~4000 word limit for short term memory. Your short term memory is short, so
      immediately save important information to files.\n2. If you are unsure how you
      previously did something or want to recall past events, thinking about similar
      events will help you remember.\n3. No user assistance\n4. Exclusively use the
      commands listed below e.g. command_name\n\nCommands:\n1. example: Example command,
      params: (arg1: int, arg2: Optional[str])\n2. function_based: Function-based
      test command, params: (arg1: int, arg2: str)\n3. execute_python_code: Creates
      a Python file and executes it, params: (code: string, name: string)\n4. execute_python_file:
      Executes an existing Python file, params: (filename: string)\n5. execute_shell:
      Executes a Shell Command, non-interactive commands only, params: (command_line:
      string)\n6. execute_shell_popen: Executes a Shell Command, non-interactive commands
      only, params: (query: string)\n7. append_to_file: Appends to a file, params:
      (filename: string, text: string)\n8. delete_file: Deletes a file, params: (filename:
      string)\n9. list_files: Lists Files in a Directory, params: (directory: string)\n10.
      read_file: Read an existing file, params: (filename: string)\n11. write_to_file:
      Writes to a file, params: (filename: string, text: string)\n12. google: Google
      Search, params: (query: string)\n13. web_search: Searches the web, params: (query:
      string)\n14. browse_website: Browses a Website, params: (url: string, question:
      string)\n15. goals_accomplished: Goals are accomplished and there is nothing
      left to do, params: (reason: string)\n\nResources:\n1. Internet access for searches
      and information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n\nRespond with only valid JSON
      conforming to the following schema: \n{\"$schema\": \"http://json-schema.org/draft-07/schema#\",
      \"type\": \"object\", \"properties\": {\"thoughts\": {\"type\": \"object\",
      \"properties\": {\"text\": {\"type\": \"string\", \"description\": \"thoughts\"},
      \"reasoning\": {\"type\": \"string\"}, \"plan\": {\"type\": \"string\", \"description\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\"}, \"criticism\":
      {\"type\": \"string\", \"description\": \"constructive self-criticism\"}, \"speak\":
      {\"type\": \"string\", \"description\": \"thoughts summary to say to user\"}},
      \"required\": [\"text\", \"reasoning\", \"plan\", \"criticism\", \"speak\"],
      \"additionalProperties\": false}, \"command\": {\"type\": \"object\", \"properties\":
      {\"name\": {\"type\": \"string\"}, \"args\": {\"type\": \"object\"}}, \"required\":
      [\"name\", \"args\"], \"additionalProperties\": false}}, \"required\": [\"thoughts\",
      \"command\"], \"additionalProperties\": false}\n", "role": "system"}, {"content":
      "The current time and date is Tue Jan  1 00:00:00 2000", "role": "system"},
      {"content": "This reminds you of these events from your past: \nI was created",
      "role": "system"}, {"content": "Determine exactly one command to use, and respond
      using the JSON schema specified previously:", "role": "user"}, {"content": "{\"command\":
      {\"name\": \"write_to_file\", \"args\": {\"filename\": \"hello_world.txt\",
      \"text\": \"Hello World\"}}, \"thoughts\": {\"text\": \"I need to write ''Hello
      World'' into a file named ''hello_world.txt''. The most straightforward way
      to do this is to use the ''write_to_file'' command.\", \"reasoning\": \"The
      ''write_to_file'' command allows me to write a specific text into a file. It''s
      the most suitable command for this task.\", \"plan\": \"- Use the ''write_to_file''
      command to write ''Hello World'' into ''hello_world.txt''\", \"criticism\":
      \"There is no need for criticism at this point as the chosen command is the
      most efficient and direct way to achieve the goal.\", \"speak\": \"I''m going
      to write ''Hello World'' into a file named ''hello_world.txt''.\"}}", "role":
      "assistant"}, {"content": "Command write_to_file returned: File written to successfully.",
      "role": "system"}, {"content": "Determine exactly one command to use, and respond
      using the JSON schema specified previously:", "role": "user"}], "model": "gpt-4",
      "temperature": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4900'
      Content-Type:
      - application/json
      X-Content-Hash:
      - 0b413473ff171dccf9a4240f4ffb780ae54ade0abfeb7e9a2e1b824d6c3cbb60
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5RTy27bMBC8+ysWvOhiG1bzsOFje2kKFCjaJEVTFQZNraRtSK5KrusEgf89oKQo
        7iNAezFkzuzszJL7MAFQVKo1KNNoMa61s6U+fXP94eb1VVveXG/f/yA+u/p4H8OXd/rTmZqmCt5+
        RyNPVXPDrrUoxL6HTUAtmFTz89VqdbI4yfMOcFyiTWV1K7PT2eI8PxkqGiaDUa3h6wQA4KH7Td58
        iXdqDYvp04nDGHWNaj2SAFRgm06UjpGiaC9q+gwa9oK+s/tQKMPOaV8WSaBQXjtMn4UKqMtNRRYL
        NYVC6VDHgZMOn3kNWsubPQdbzuVOCnU4JL40vKsbeaoRTFDiX4BHLEEYDPuKggNptED2NunA56ST
        wV5H2AcSQQ/khSH7rU02h8sGYYtRYK/vk1zJIA1FoJj+7SKCNAjZmCODIeq8TxRQR/bk697X5d/J
        oK3lfQSHSTXhnewwwwhcgYZUMYcLyWIHOo4CcUeitxZHoYpDb1B0vB08tFb7vv0Mrl52/GLrP8bS
        y5pAQoaiG6MFTHPx3A8/WRk5oKX31TJ5Ad1nMA1H9KMBOkqGVUWGMHF9CSUFNOMl/MRA1X3HPYoZ
        W9S3w/VnDmomX/97pv99KyTz9ArV8OIP46pU5Ck2m/7i0/OPwm1PO0wAvnWrt/tlm1Qb2LWyEb5F
        n/Yxzxd5L6ie1/wIXp4PqLBoewS8Wi4nqc9h8ggAAP//AwBfRuQ5ZQQAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7e396065187b86e7-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 08 Jul 2023 15:32:07 GMT
      Function-Execution-Id:
      - zqlaryn0j1hb
      Openai-Model:
      - gpt-4-0613
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '15839'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 25edbabd02e7baa00eeb76c91d78003e;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '200'
      X-Ratelimit-Limit-Tokens:
      - '40000'
      X-Ratelimit-Remaining-Requests:
      - '199'
      X-Ratelimit-Remaining-Tokens:
      - '32315'
      X-Ratelimit-Reset-Requests:
      - 300ms
      X-Ratelimit-Reset-Tokens:
      - 11.527s
      X-Request-Id:
      - 60ab6da17f6cb7110aa0dbb6ce3bf411
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are Auto-GPT, a multi-purpose AI assistant.\nYour
      decisions must always be made independently without seeking user assistance.
      Play to your strengths as an LLM and pursue simple strategies with no legal
      complications.\n\nGOALS:\n\n1. Write ''Hello World'' into a file named \"hello_world.txt\".\n\n\nConstraints:\n1.
      ~4000 word limit for short term memory. Your short term memory is short, so
      immediately save important information to files.\n2. If you are unsure how you
      previously did something or want to recall past events, thinking about similar
      events will help you remember.\n3. No user assistance\n4. Exclusively use the
      commands listed below e.g. command_name\n\nCommands:\n1. execute_python_code:
      Creates a Python file and executes it, params: (code: string, name: string)\n2.
      execute_python_file: Executes an existing Python file, params: (filename: string)\n3.
      execute_shell: Executes a Shell Command, non-interactive commands only, params:
      (command_line: string)\n4. execute_shell_popen: Executes a Shell Command, non-interactive
      commands only, params: (query: string)\n5. append_to_file: Appends to a file,
      params: (filename: string, text: string)\n6. delete_file: Deletes a file, params:
      (filename: string)\n7. list_files: Lists Files in a Directory, params: (directory:
      string)\n8. read_file: Read an existing file, params: (filename: string)\n9.
      write_to_file: Writes to a file, params: (filename: string, text: string)\n10.
      google: Google Search, params: (query: string)\n11. web_search: Searches the
      web, params: (query: string)\n12. browse_website: Browses a Website, params:
      (url: string, question: string)\n13. goals_accomplished: Goals are accomplished
      and there is nothing left to do, params: (reason: string)\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. File output.\n\nPerformance Evaluation:\n1. Continuously review
      and analyze your actions to ensure you are performing to the best of your abilities.\n2.
      Constructively self-criticize your big-picture behavior constantly.\n3. Reflect
      on past decisions and strategies to refine your approach.\n4. Every command
      has a cost, so be smart and efficient. Aim to complete tasks in the least number
      of steps.\n\nRespond with only valid JSON conforming to the following schema:
      \n{\"$schema\": \"http://json-schema.org/draft-07/schema#\", \"type\": \"object\",
      \"properties\": {\"thoughts\": {\"type\": \"object\", \"properties\": {\"text\":
      {\"type\": \"string\", \"description\": \"thoughts\"}, \"reasoning\": {\"type\":
      \"string\"}, \"plan\": {\"type\": \"string\", \"description\": \"- short bulleted\\n-
      list that conveys\\n- long-term plan\"}, \"criticism\": {\"type\": \"string\",
      \"description\": \"constructive self-criticism\"}, \"speak\": {\"type\": \"string\",
      \"description\": \"thoughts summary to say to user\"}}, \"required\": [\"text\",
      \"reasoning\", \"plan\", \"criticism\", \"speak\"], \"additionalProperties\":
      false}, \"command\": {\"type\": \"object\", \"properties\": {\"name\": {\"type\":
      \"string\"}, \"args\": {\"type\": \"object\"}}, \"required\": [\"name\", \"args\"],
      \"additionalProperties\": false}}, \"required\": [\"thoughts\", \"command\"],
      \"additionalProperties\": false}\n", "role": "system"}, {"content": "The current
      time and date is Tue Jan  1 00:00:00 2000", "role": "system"}, {"content": "Determine
      exactly one command to use, and respond using the JSON schema specified previously:",
      "role": "user"}], "model": "gpt-4", "temperature": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3566'
      Content-Type:
      - application/json
      X-Content-Hash:
      - f59590b4590b12fdd5b6af5efe874a9564556d5dd46cd289dd5df9d87f06be9e
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6RUTW/bMAy951cQuuTSBMn65ea2DQO2YUAxoMMO8xBwMm2rlURDYpdshf/7IMuJ
        2w3tZRfD5nuk3qNIP8wAlKnUBpRuUbTr7OISXxfvurfra/3bvSlWFx8/x/Pb/fWN/omfCnWSMvjH
        LWk5ZC01u86SGPYZ1oFQKFVdXxRFcX66Xq8GwHFFNqU1nSzOFquL9emY0bLRFNUGvs0AAB6GZ9Lm
        K9qrDQz5Q8RRjNiQ2hxJACqwTRGFMZoo6EWdTKBmL+QHuQ+lkpbvm1ZimSqUSmgv6bVUH8ATVSAM
        u2CEYP6erGX4ysFWczBeGBBqYwk8Oqpg3iZ8u0v4UvYyX8JNS+A4CkQJaJpWag47DBXs8FcqXDFI
        ayKYmL7uI4G0BPPhvK3wNlWfg2bn0FfLUp1AqQJhZG98k1XePJ8AaC3vIjiaTCDEjrSpjYbk9LGN
        JHfUcpBdmUBaDmpRDxdrYjswGkY7auos+ixnAV9edvFiP/9pYS6vgxGjTXRHy4GSTs/5imoOcOQA
        Sm5qx8YLYLajW47kjyIem6S6NtqQf86nYLwbfcaO8O4wHeigYeOb/5mQUvWDwSxrHMFEzoc8aWGW
        gKE5jGoKTty/amf2NM2PpJWq73s17kN/XKTaeBPbbZ6vtBxRuMu0fgbwfVjM+ye7prrArpOt8B35
        tK2XV0Wup6Z/wISui7MRFRa0E3BVvJqlU/rZHwAAAP//AwAoTWhPgQQAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7e3b8d02bad12ab6-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 08 Jul 2023 21:52:02 GMT
      Function-Execution-Id:
      - rx1euiox8tsk
      Openai-Model:
      - gpt-4-0613
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '12526'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - c27b09384428f85d6aeb48667493cfd6;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '200'
      X-Ratelimit-Limit-Tokens:
      - '40000'
      X-Ratelimit-Remaining-Requests:
      - '199'
      X-Ratelimit-Remaining-Tokens:
      - '32797'
      X-Ratelimit-Reset-Requests:
      - 300ms
      X-Ratelimit-Reset-Tokens:
      - 10.804s
      X-Request-Id:
      - 3b83d251dfe81216f5365ca8cab6cd7a
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are Auto-GPT, a multi-purpose AI assistant.\nYour
      decisions must always be made independently without seeking user assistance.
      Play to your strengths as an LLM and pursue simple strategies with no legal
      complications.\n\nGOALS:\n\n1. Write ''Hello World'' into a file named \"hello_world.txt\".\n\n\nConstraints:\n1.
      ~4000 word limit for short term memory. Your short term memory is short, so
      immediately save important information to files.\n2. If you are unsure how you
      previously did something or want to recall past events, thinking about similar
      events will help you remember.\n3. No user assistance\n4. Exclusively use the
      commands listed below e.g. command_name\n\nCommands:\n1. execute_python_code:
      Creates a Python file and executes it, params: (code: string, name: string)\n2.
      execute_python_file: Executes an existing Python file, params: (filename: string)\n3.
      execute_shell: Executes a Shell Command, non-interactive commands only, params:
      (command_line: string)\n4. execute_shell_popen: Executes a Shell Command, non-interactive
      commands only, params: (query: string)\n5. append_to_file: Appends to a file,
      params: (filename: string, text: string)\n6. delete_file: Deletes a file, params:
      (filename: string)\n7. list_files: Lists Files in a Directory, params: (directory:
      string)\n8. read_file: Read an existing file, params: (filename: string)\n9.
      write_to_file: Writes to a file, params: (filename: string, text: string)\n10.
      google: Google Search, params: (query: string)\n11. web_search: Searches the
      web, params: (query: string)\n12. browse_website: Browses a Website, params:
      (url: string, question: string)\n13. goals_accomplished: Goals are accomplished
      and there is nothing left to do, params: (reason: string)\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. File output.\n\nPerformance Evaluation:\n1. Continuously review
      and analyze your actions to ensure you are performing to the best of your abilities.\n2.
      Constructively self-criticize your big-picture behavior constantly.\n3. Reflect
      on past decisions and strategies to refine your approach.\n4. Every command
      has a cost, so be smart and efficient. Aim to complete tasks in the least number
      of steps.\n\nRespond with only valid JSON conforming to the following schema:
      \n{\"$schema\": \"http://json-schema.org/draft-07/schema#\", \"type\": \"object\",
      \"properties\": {\"thoughts\": {\"type\": \"object\", \"properties\": {\"text\":
      {\"type\": \"string\", \"description\": \"thoughts\"}, \"reasoning\": {\"type\":
      \"string\"}, \"plan\": {\"type\": \"string\", \"description\": \"- short bulleted\\n-
      list that conveys\\n- long-term plan\"}, \"criticism\": {\"type\": \"string\",
      \"description\": \"constructive self-criticism\"}, \"speak\": {\"type\": \"string\",
      \"description\": \"thoughts summary to say to user\"}}, \"required\": [\"text\",
      \"reasoning\", \"plan\", \"criticism\", \"speak\"], \"additionalProperties\":
      false}, \"command\": {\"type\": \"object\", \"properties\": {\"name\": {\"type\":
      \"string\"}, \"args\": {\"type\": \"object\"}}, \"required\": [\"name\", \"args\"],
      \"additionalProperties\": false}}, \"required\": [\"thoughts\", \"command\"],
      \"additionalProperties\": false}\n", "role": "system"}, {"content": "The current
      time and date is Tue Jan  1 00:00:00 2000", "role": "system"}, {"content": "This
      reminds you of these events from your past: \nI was created", "role": "system"},
      {"content": "Determine exactly one command to use, and respond using the JSON
      schema specified previously:", "role": "user"}, {"content": "{\"thoughts\":
      {\"text\": \"I need to write ''Hello World'' into a file named ''hello_world.txt''.
      The most straightforward way to do this is to use the ''write_to_file'' command.\",
      \"reasoning\": \"The ''write_to_file'' command allows me to write a specific
      text into a file. This is the most direct way to accomplish the goal.\", \"plan\":
      \"- Use the ''write_to_file'' command to write ''Hello World'' into ''hello_world.txt''\",
      \"criticism\": \"There is no need for criticism at this point as the chosen
      command is the most efficient way to accomplish the task.\", \"speak\": \"I
      am going to write ''Hello World'' into a file named ''hello_world.txt''.\"},
      \"command\": {\"name\": \"write_to_file\", \"args\": {\"filename\": \"hello_world.txt\",
      \"text\": \"Hello World\"}}}", "role": "assistant"}, {"content": "Command write_to_file
      returned: File written to successfully.", "role": "system"}, {"content": "Determine
      exactly one command to use, and respond using the JSON schema specified previously:",
      "role": "user"}], "model": "gpt-4", "temperature": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4687'
      Content-Type:
      - application/json
      X-Content-Hash:
      - 7ba7a891dd8ab0f11ba1eb8e219ce77a2ae8b8db7672484d58e0ac7595655282
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7xTPY/TQBDt8ytG26RJojhfhHQHEgKBRIPuCnyyNuuxvWS9Y3kmlxyR/zta23Eu
        oqKhsax9M++9+bqMAJRN1Q6UKbSYsnLTd/phq6PHDX1YraNF/vjtYbH89LT+/fL1e7lXk5BB+19o
        5Jo1M1RWDsWS72BToxYMrNFmu92ul9Fy0QIlpehCWl7JdDWdb6Jln1GQNchqBz9HAACX9hu8+RTP
        agfzyfWlRGado9oNQQCqJhdelGa2LNqLmtxAQ17Qt3YvsZKCjnkhHAeGWAmeJfzG6keBIJoPQBmc
        aivW5zD+jM4RPFHt0jFYLwQaMusQvC4xhXER8OQU8JmcZQyFZtgjeuCjMcicHZ17hb5DmM5iNYFY
        1aiZvPX5TXocNDERSgL/OKSU2qdw0gx4RnMUTO9JAypX05YHkV6jctp39FP4SD6zddmG36YVKr0S
        dDkm1G0sl4OvGgO1J/CIKWRUwxADWkAKy1CR9QKab26C6aHmv11jlllj0Yt77c1yhfrQiX6BQr/g
        fVLojaD/93nMYtW0hXXd7IcegjuxnLTjRJvWrOUC086PrvPrhnSz+r870jSN6he4GTY/s95ykXR+
        wjazUNWFNSOA5/aSjnfHoaqaykoSoQP6cF7RfNWfkrrtwRt4vehRIdHuDRC9X4yCTjP6AwAA//8D
        ADwLHyU0BAAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7e3b8d8c1b132304-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 08 Jul 2023 21:52:24 GMT
      Function-Execution-Id:
      - yfazkme47jfg
      Openai-Model:
      - gpt-4-0613
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '12196'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 87e75ac4140828fae17db9678807ddaf;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '200'
      X-Ratelimit-Limit-Tokens:
      - '40000'
      X-Ratelimit-Remaining-Requests:
      - '199'
      X-Ratelimit-Remaining-Tokens:
      - '32306'
      X-Ratelimit-Reset-Requests:
      - 300ms
      X-Ratelimit-Reset-Tokens:
      - 11.541s
      X-Request-Id:
      - 76ed08dff6d2208b5522eb8627af003e
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are Auto-GPT, a multi-purpose AI assistant.\nYour
      decisions must always be made independently without seeking user assistance.
      Play to your strengths as an LLM and pursue simple strategies with no legal
      complications.\n\nGOALS:\n\n1. Write ''Hello World'' into a file named \"hello_world.txt\".\n\n\nConstraints:\n1.
      ~4000 word limit for short term memory. Your short term memory is short, so
      immediately save important information to files.\n2. If you are unsure how you
      previously did something or want to recall past events, thinking about similar
      events will help you remember.\n3. No user assistance\n4. Exclusively use the
      commands listed below e.g. command_name\n\nCommands:\n1. example: Example command,
      params: (arg1: int, arg2: Optional[str])\n2. function_based: Function-based
      test command, params: (arg1: int, arg2: str)\n3. execute_python_code: Creates
      a Python file and executes it, params: (code: string, name: string)\n4. execute_python_file:
      Executes an existing Python file, params: (filename: string)\n5. execute_shell:
      Executes a Shell Command, non-interactive commands only, params: (command_line:
      string)\n6. execute_shell_popen: Executes a Shell Command, non-interactive commands
      only, params: (query: string)\n7. append_to_file: Appends to a file, params:
      (filename: string, text: string)\n8. delete_file: Deletes a file, params: (filename:
      string)\n9. list_files: Lists Files in a Directory, params: (directory: string)\n10.
      read_file: Read an existing file, params: (filename: string)\n11. write_to_file:
      Writes to a file, params: (filename: string, text: string)\n12. google: Google
      Search, params: (query: string)\n13. web_search: Searches the web, params: (query:
      string)\n14. browse_website: Browses a Website, params: (url: string, question:
      string)\n15. goals_accomplished: Goals are accomplished and there is nothing
      left to do, params: (reason: string)\n\nResources:\n1. Internet access for searches
      and information gathering.\n2. Long Term memory management.\n3. File output.\n\nPerformance
      Evaluation:\n1. Continuously review and analyze your actions to ensure you are
      performing to the best of your abilities.\n2. Constructively self-criticize
      your big-picture behavior constantly.\n3. Reflect on past decisions and strategies
      to refine your approach.\n4. Every command has a cost, so be smart and efficient.
      Aim to complete tasks in the least number of steps.\n\nRespond with only valid
      JSON conforming to the following schema: \n{\"$schema\": \"http://json-schema.org/draft-07/schema#\",
      \"type\": \"object\", \"properties\": {\"thoughts\": {\"type\": \"object\",
      \"properties\": {\"text\": {\"type\": \"string\", \"description\": \"thoughts\"},
      \"reasoning\": {\"type\": \"string\"}, \"plan\": {\"type\": \"string\", \"description\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\"}, \"criticism\":
      {\"type\": \"string\", \"description\": \"constructive self-criticism\"}, \"speak\":
      {\"type\": \"string\", \"description\": \"thoughts summary to say to user\"}},
      \"required\": [\"text\", \"reasoning\", \"plan\", \"criticism\", \"speak\"],
      \"additionalProperties\": false}, \"command\": {\"type\": \"object\", \"properties\":
      {\"name\": {\"type\": \"string\"}, \"args\": {\"type\": \"object\"}}, \"required\":
      [\"name\", \"args\"], \"additionalProperties\": false}}, \"required\": [\"thoughts\",
      \"command\"], \"additionalProperties\": false}\n", "role": "system"}, {"content":
      "The current time and date is Tue Jan  1 00:00:00 2000", "role": "system"},
      {"content": "Determine exactly one command to use, and respond using the JSON
      schema specified previously:", "role": "user"}], "model": "gpt-4", "temperature":
      0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3719'
      Content-Type:
      - application/json
      X-Content-Hash:
      - 6047f39942208ebfabe62cf4803ee8b33157b237190b42aecce8869801a97f71
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6RUsW7bQAzd/RXELVpsw46dxPbaDC3QAB1spEBVGNcTJbE5HVUdUzsw9O/FSbYk
        F2mWLhr4+B4feaROIwBFidqAMrkWU5R2cq+3t+nuw+OvL/PHV3rgp+NDtvuK95/Nwq7VODD4x080
        cmFNDRelRSF2LWwq1IJBdX63Wq1vbter+wYoOEEbaFkpk+VkdjdfnBk5k0GvNvBtBABwar7Bm0vw
        qDYwG18iBXqvM1SbLglAVWxDRGnvyYt2osY9aNgJusbuKXYAsZKcX7JcfBxUQqgJ4lFCIFafwCEm
        IAyHigQh+ojWMjxxZZMIyAmDhpQsgtMFJhDlAd8fAj6Vo0TTWI0vshVqz45c1mpvc4Sokd0L74NI
        BIaLQrsEtLV88FBgX9qXaCil4AaPMqw9hW1OvuOSB8kRCvYCCVVoBEIY05QMoRM46Ncgq03zWuTz
        Jj9jbYduS6tda3QCO49Nzr/svjefd0diKhIy5ItuJBWGBhy3g0+5gi4HtICETksmJ6DbPk3OHt2b
        3fctB+Q8i677nPA3vtm6L1E/XxZAF5Axuez/liBI1+N2585Wr1YuMNuKVyMemNJVNtzSEAoZPfGv
        qh31eqMH3ltXAHVjLna1Ol9K3Z1YSo58vm83N5yNFy7btHoE8L052ZerK1RlxUUpe+FndOGOV8ub
        Vk/1f4cena8vqLBoOwBmi+UolKlHfwAAAP//AwDeWJK/nAQAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7e42803eedbcfdcd-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 09 Jul 2023 18:06:44 GMT
      Function-Execution-Id:
      - lep2vqnesi2q
      Openai-Model:
      - gpt-4-0613
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '16674'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 5a98fa710f89aa0139b96d40e728652e;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '200'
      X-Ratelimit-Limit-Tokens:
      - '40000'
      X-Ratelimit-Remaining-Requests:
      - '199'
      X-Ratelimit-Remaining-Tokens:
      - '32804'
      X-Ratelimit-Reset-Requests:
      - 300ms
      X-Ratelimit-Reset-Tokens:
      - 10.794s
      X-Request-Id:
      - 303fbdb6442c1cbc0dfbf0aa3e49598b
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are Auto-GPT, a multi-purpose AI assistant.\nYour
      decisions must always be made independently without seeking user assistance.
      Play to your strengths as an LLM and pursue simple strategies with no legal
      complications.\n\nGOALS:\n\n1. Write ''Hello World'' into a file named \"hello_world.txt\".\n\n\nConstraints:\n1.
      ~4000 word limit for short term memory. Your short term memory is short, so
      immediately save important information to files.\n2. If you are unsure how you
      previously did something or want to recall past events, thinking about similar
      events will help you remember.\n3. No user assistance\n4. Exclusively use the
      commands listed below e.g. command_name\n\nCommands:\n1. execute_python_code:
      Creates a Python file and executes it, params: (code: string, name: string)\n2.
      execute_python_file: Executes an existing Python file, params: (filename: string)\n3.
      execute_shell: Executes a Shell Command, non-interactive commands only, params:
      (command_line: string)\n4. execute_shell_popen: Executes a Shell Command, non-interactive
      commands only, params: (query: string)\n5. append_to_file: Appends to a file,
      params: (filename: string, text: string)\n6. delete_file: Deletes a file, params:
      (filename: string)\n7. list_files: Lists Files in a Directory, params: (directory:
      string)\n8. read_file: Read an existing file, params: (filename: string)\n9.
      write_to_file: Writes to a file, params: (filename: string, text: string)\n10.
      google: Google Search, params: (query: string)\n11. web_search: Searches the
      web, params: (query: string)\n12. browse_website: Browses a Website, params:
      (url: string, question: string)\n13. goals_accomplished: Goals are accomplished
      and there is nothing left to do, params: (reason: string)\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. File output.\n\nPerformance Evaluation:\n1. Continuously review
      and analyze your actions to ensure you are performing to the best of your abilities.\n2.
      Constructively self-criticize your big-picture behavior constantly.\n3. Reflect
      on past decisions and strategies to refine your approach.\n4. Every command
      has a cost, so be smart and efficient. Aim to complete tasks in the least number
      of steps.\n\nRespond with only valid JSON conforming to the following schema:
      \n{\"$schema\": \"http://json-schema.org/draft-07/schema#\", \"type\": \"object\",
      \"properties\": {\"thoughts\": {\"type\": \"object\", \"properties\": {\"text\":
      {\"type\": \"string\", \"description\": \"thoughts\"}, \"reasoning\": {\"type\":
      \"string\"}, \"plan\": {\"type\": \"string\", \"description\": \"- short bulleted\\n-
      list that conveys\\n- long-term plan\"}, \"criticism\": {\"type\": \"string\",
      \"description\": \"constructive self-criticism\"}, \"speak\": {\"type\": \"string\",
      \"description\": \"thoughts summary to say to user\"}}, \"required\": [\"text\",
      \"reasoning\", \"plan\", \"criticism\", \"speak\"], \"additionalProperties\":
      false}, \"command\": {\"type\": \"object\", \"properties\": {\"name\": {\"type\":
      \"string\"}, \"args\": {\"type\": \"object\"}}, \"required\": [\"name\", \"args\"],
      \"additionalProperties\": false}}, \"required\": [\"thoughts\", \"command\"],
      \"additionalProperties\": false}\n", "role": "system"}, {"content": "The current
      time and date is Tue Jan  1 00:00:00 2000", "role": "system"}, {"content": "Determine
      exactly one command to use, and respond using the JSON schema specified previously:",
      "role": "user"}, {"content": "{\"thoughts\": {\"text\": \"I need to write ''Hello
      World'' into a file named ''hello_world.txt''. The most straightforward way
      to do this is to use the ''write_to_file'' command.\", \"reasoning\": \"The
      ''write_to_file'' command allows me to write a specific text into a file. This
      is the most direct way to accomplish the goal.\", \"plan\": \"- Use the ''write_to_file''
      command to write ''Hello World'' into ''hello_world.txt''\", \"criticism\":
      \"There is no need for criticism at this point as the chosen command is the
      most efficient way to accomplish the task.\", \"speak\": \"I am going to write
      ''Hello World'' into a file named ''hello_world.txt''.\"}, \"command\": {\"name\":
      \"write_to_file\", \"args\": {\"filename\": \"hello_world.txt\", \"text\": \"Hello
      World\"}}}", "role": "assistant"}, {"content": "Command write_to_file returned:
      File written to successfully.", "role": "system"}, {"content": "Determine exactly
      one command to use, and respond using the JSON schema specified previously:",
      "role": "user"}], "model": "gpt-4", "temperature": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4588'
      Content-Type:
      - application/json
      X-Content-Hash:
      - ecbc16074800d7bd062aef290f3e04a010a75b194d7372df334474ab90e2415d
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7xTwY7aMBC98xUjX3IBRBbE7nKuqlZVT92qUpsq8jqT2Itjp55JgaL8e+UEAmjV
        w156iSK/eX5vnmeOEwBhCrEBobRkVTd2do/Nw+elDV+YP62/H17+fK3toblf7N+nh5WYRoZ/fkHF
        Z9Zc+bqxyMa7AVYBJWO8NV0/PD6uV4vlqgdqX6CNtKrh2Wq2WKfLE0N7o5DEBn5MAACO/Td6cwXu
        xQYW0/NJjUSyQrEZiwBE8DaeCElkiKVjMb2AyjtG19s9ZoK1byvNlMUbMsG45/ibiSeNwJK24EvY
        BcPGVZB8QGs9fPPBFgkYxx4klMYiOFljAYmOeL6L+Jz3nICWBM+IDqhVConK1toDnBLCYg5PGgOC
        IXAeyjawxgBSxfAg4K/WBCxAMrA2BI03jueZmEImAkryzrjq4jaJNjFnn0dLSVSppStgJ+lKfgo7
        bZSGGqUj4HOXo9GLt0GosdINGjN4h8rKgD2r8tISSAKpeoohjcVAUTEuZagevY0tOsQCSh9grLnt
        Ll742tM/whvUqEG5HZQ+gpa/8bY8hsLo3v5280x0fTdDjKcBicWDWB9A/rp7GarzNA2P9D/nKRNd
        14nTsHfjlpTGGdL54CdOPrFvhrJuAvCz37r2ZpFEE3zdcM5+iy6uYrq4S4cLxWXDr+D13Qllz9Je
        AenDchJ1uslfAAAA//8DALPmo3BgBAAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7ea57f322955593d-IAD
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 21 Jul 2023 18:27:25 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - gpt-4-0613
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '10658'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '200'
      x-ratelimit-limit-tokens:
      - '40000'
      x-ratelimit-remaining-requests:
      - '199'
      x-ratelimit-remaining-tokens:
      - '31828'
      x-ratelimit-reset-requests:
      - 300ms
      x-ratelimit-reset-tokens:
      - 12.258s
      x-request-id:
      - a2208fa149ea1d605cba82b5104ae074
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are Auto-GPT, a multi-purpose AI assistant.\nYour
      decisions must always be made independently without seeking user assistance.
      Play to your strengths as an LLM and pursue simple strategies with no legal
      complications.\n\nGOALS:\n\n1. Write ''Hello World'' into a file named \"hello_world.txt\".\n\n\nConstraints:\n1.
      ~4000 word limit for short term memory. Your short term memory is short, so
      immediately save important information to files.\n2. If you are unsure how you
      previously did something or want to recall past events, thinking about similar
      events will help you remember.\n3. No user assistance\n4. Exclusively use the
      commands listed below e.g. command_name\n\nCommands:\n1. execute_python_code:
      Creates a Python file and executes it, params: (code: string, name: string)\n2.
      execute_python_file: Executes an existing Python file, params: (filename: string)\n3.
      execute_shell: Executes a Shell Command, non-interactive commands only, params:
      (command_line: string)\n4. execute_shell_popen: Executes a Shell Command, non-interactive
      commands only, params: (query: string)\n5. append_to_file: Appends to a file,
      params: (filename: string, text: string)\n6. list_files: Lists Files in a Directory,
      params: (directory: string)\n7. read_file: Read an existing file, params: (filename:
      string)\n8. write_to_file: Writes to a file, params: (filename: string, text:
      string)\n9. google: Google Search, params: (query: string)\n10. web_search:
      Searches the web, params: (query: string)\n11. browse_website: Browses a Website,
      params: (url: string, question: string)\n12. goals_accomplished: Goals are accomplished
      and there is nothing left to do, params: (reason: string)\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. File output.\n\nPerformance Evaluation:\n1. Continuously review
      and analyze your actions to ensure you are performing to the best of your abilities.\n2.
      Constructively self-criticize your big-picture behavior constantly.\n3. Reflect
      on past decisions and strategies to refine your approach.\n4. Every command
      has a cost, so be smart and efficient. Aim to complete tasks in the least number
      of steps.\n\nRespond with only valid JSON conforming to the following schema:
      \n{\"$schema\": \"http://json-schema.org/draft-07/schema#\", \"type\": \"object\",
      \"properties\": {\"thoughts\": {\"type\": \"object\", \"properties\": {\"text\":
      {\"type\": \"string\", \"description\": \"thoughts\"}, \"reasoning\": {\"type\":
      \"string\"}, \"plan\": {\"type\": \"string\", \"description\": \"- short bulleted\\n-
      list that conveys\\n- long-term plan\"}, \"criticism\": {\"type\": \"string\",
      \"description\": \"constructive self-criticism\"}, \"speak\": {\"type\": \"string\",
      \"description\": \"thoughts summary to say to user\"}}, \"required\": [\"text\",
      \"reasoning\", \"plan\", \"criticism\", \"speak\"], \"additionalProperties\":
      false}, \"command\": {\"type\": \"object\", \"properties\": {\"name\": {\"type\":
      \"string\"}, \"args\": {\"type\": \"object\"}}, \"required\": [\"name\", \"args\"],
      \"additionalProperties\": false}}, \"required\": [\"thoughts\", \"command\"],
      \"additionalProperties\": false}\n", "role": "system"}, {"content": "The current
      time and date is Tue Jan  1 00:00:00 2000", "role": "system"}, {"content": "Determine
      exactly one command to use, and respond using the JSON schema specified previously:",
      "role": "user"}], "model": "gpt-4", "temperature": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3505'
      Content-Type:
      - application/json
      X-Content-Hash:
      - 2414eaa45e77f7d3ac8dc77b5b5ee6a680ebac633b7369c67a32b1ab6da28898
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5xUwY7TMBC99ytGvuTSVm0K202vCMHeFy2CoMrrTBJT2xPiKS1b5d+RnTZpkVgh
        LjnMm/fmzXgmpwmA0IXYgFC1ZGUbM1uX+/TdcfX26eXzjw/Z+y/PbVq8uPQh+7laZ2IaGPT8HRVf
        WHNFtjHImlwPqxYlY1Bd3mWLNF2mi0UELBVoAq1qePZmtrhbrs6MmrRCLzbwdQIAcIrf4M0VeBQb
        iPwYsei9rFBshiQA0ZIJESG9156lYzEdQUWO0UW7p9wB5IJr2lc1+zyohFAM4pFDIBcP4BALYIJD
        qxkh+YjGEDxRa4oEtGMCCaU2CE5aLCCpA749BHzOR07muZheZFuUnpx2Va/9WCMkUXbLtA0iCSiy
        VroCpDF08GBxLO0bVLrUCoI7GArP4bHWHrQHrhEseYZCt6gYgg6WpVYaHcNB/ookFZ9I+zrms/S7
        a4uNka53N4NPHmPO3zy+NpRX56BazVppb4c5tBgacNRPu6QWhhyQDBw6bEg7Btn3qWry6AYr192P
        LQfkPIt/6943KHeXh5c2tqdd9V+vHjS7ab9kZ5s3OxaYfamb8V65kW11vZYhFDJG4h9VB+rtCl95
        710BdNFc7jpxPo1uuKlSO+3rbb+q4U48U9OndROAb/FG9zdnJ5qWbMNbph26cLjr+2WvJ8bfwYgu
        77MzysTSjEC2XkxClW7yGwAA//8DAHa6tf2MBAAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7ebe05a84a0b2523-SJC
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 24 Jul 2023 17:53:34 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - gpt-4-0613
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '13237'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '200'
      x-ratelimit-limit-tokens:
      - '40000'
      x-ratelimit-remaining-requests:
      - '199'
      x-ratelimit-remaining-tokens:
      - '31241'
      x-ratelimit-reset-requests:
      - 300ms
      x-ratelimit-reset-tokens:
      - 13.137s
      x-request-id:
      - 821f1beb93b8b0b39df01964cbf1b411
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are Auto-GPT, a multi-purpose AI assistant.\nYour
      decisions must always be made independently without seeking user assistance.
      Play to your strengths as an LLM and pursue simple strategies with no legal
      complications.\n\nGOALS:\n\n1. Write ''Hello World'' into a file named \"hello_world.txt\".\n\n\nConstraints:\n1.
      ~4000 word limit for short term memory. Your short term memory is short, so
      immediately save important information to files.\n2. If you are unsure how you
      previously did something or want to recall past events, thinking about similar
      events will help you remember.\n3. No user assistance\n4. Exclusively use the
      commands listed below e.g. command_name\n\nCommands:\n1. execute_python_code:
      Creates a Python file and executes it, params: (code: string, name: string)\n2.
      execute_python_file: Executes an existing Python file, params: (filename: string)\n3.
      execute_shell: Executes a Shell Command, non-interactive commands only, params:
      (command_line: string)\n4. execute_shell_popen: Executes a Shell Command, non-interactive
      commands only, params: (query: string)\n5. append_to_file: Appends to a file,
      params: (filename: string, text: string)\n6. list_files: Lists Files in a Directory,
      params: (directory: string)\n7. read_file: Read an existing file, params: (filename:
      string)\n8. write_to_file: Writes to a file, params: (filename: string, text:
      string)\n9. google: Google Search, params: (query: string)\n10. web_search:
      Searches the web, params: (query: string)\n11. browse_website: Browses a Website,
      params: (url: string, question: string)\n12. goals_accomplished: Goals are accomplished
      and there is nothing left to do, params: (reason: string)\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. File output.\n\nPerformance Evaluation:\n1. Continuously review
      and analyze your actions to ensure you are performing to the best of your abilities.\n2.
      Constructively self-criticize your big-picture behavior constantly.\n3. Reflect
      on past decisions and strategies to refine your approach.\n4. Every command
      has a cost, so be smart and efficient. Aim to complete tasks in the least number
      of steps.\n\nRespond with only valid JSON conforming to the following schema:
      \n{\"$schema\": \"http://json-schema.org/draft-07/schema#\", \"type\": \"object\",
      \"properties\": {\"thoughts\": {\"type\": \"object\", \"properties\": {\"text\":
      {\"type\": \"string\", \"description\": \"thoughts\"}, \"reasoning\": {\"type\":
      \"string\"}, \"plan\": {\"type\": \"string\", \"description\": \"- short bulleted\\n-
      list that conveys\\n- long-term plan\"}, \"criticism\": {\"type\": \"string\",
      \"description\": \"constructive self-criticism\"}, \"speak\": {\"type\": \"string\",
      \"description\": \"thoughts summary to say to user\"}}, \"required\": [\"text\",
      \"reasoning\", \"plan\", \"criticism\", \"speak\"], \"additionalProperties\":
      false}, \"command\": {\"type\": \"object\", \"properties\": {\"name\": {\"type\":
      \"string\"}, \"args\": {\"type\": \"object\"}}, \"required\": [\"name\", \"args\"],
      \"additionalProperties\": false}}, \"required\": [\"thoughts\", \"command\"],
      \"additionalProperties\": false}\n", "role": "system"}, {"content": "The current
      time and date is Tue Jan  1 00:00:00 2000", "role": "system"}, {"content": "Determine
      exactly one command to use, and respond using the JSON schema specified previously:",
      "role": "user"}, {"content": "{\n  \"thoughts\": {\n    \"text\": \"I need to
      write ''Hello World'' into a file named ''hello_world.txt''.\",\n    \"reasoning\":
      \"The ''write_to_file'' command allows me to write specific text to a file.
      This is the most direct and efficient way to accomplish the task.\",\n    \"plan\":
      \"- Use the ''write_to_file'' command to write ''Hello World'' into ''hello_world.txt''.\",\n    \"criticism\":
      \"There is no need for criticism at this point as the chosen command is the
      most efficient and direct way to accomplish the task.\",\n    \"speak\": \"I
      am writing ''Hello World'' into a file named ''hello_world.txt''.\"\n  },\n  \"command\":
      {\n    \"name\": \"write_to_file\",\n    \"args\": {\n      \"filename\": \"hello_world.txt\",\n      \"text\":
      \"Hello World\"\n    }\n  }\n}", "role": "assistant"}, {"content": "Command
      write_to_file returned: File written to successfully.", "role": "system"}, {"content":
      "Determine exactly one command to use, and respond using the JSON schema specified
      previously:", "role": "user"}], "model": "gpt-4", "temperature": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4538'
      Content-Type:
      - application/json
      X-Content-Hash:
      - 2eca027fb650aef0d9426ed4ff215f25e2caacb6af3eb9fb5bf3120cee88a446
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6xTTY/aMBC98ytGvnABROgCgmuratsrq227zQoZZxK7OJ7UnnRBKP+9csJHkFqp
        h15ymDdv3st43mkAIEwm1iCUlqzKyo6XeT3bFN8eX96/HH35efNw2K+ePz7v1Gr+dS5GkUG7H6j4
        wpooKiuLbMh1sPIoGePUZLGazmbJLFm0QEkZ2kgrKh4/jKeL5N2ZockoDGIN3wcAAKf2G725DA9i
        DdPRpVJiCLJAsb42AQhPNlaEDMEElo7F6AYqcoyutXtKHUAqWFNdaA5pnBJLbREPHAup+ARa/kII
        tVIYQl5be4Q3b5jRwfARrSX4Qt5mQzCOCVgj5MYiDHXEtm8Rm/CBh5NUjC7jPcpAzrii03jSCCzD
        HrQMsEN0cN4iZnfCE3jS6BFMAEeQ1541epAqbhs8/qyNxwwkA2sToCLjuK9aWek6wTF8QGWlx9Zv
        Ky0DSNXKmqAx6/OUN2yUCeXV7dWDQ8wgJw/Xnnv5OJb/8e9Augwwz40y6Nge+xZChXL//x8kjm9G
        3R0oKkvpsrszcLLETrUgacO2v6GeO+mL/vncXrjjbu6tEuOfjP7NH0DT2kxdI8533FwDkBtngt52
        avGoA1PVtTUDgNc2UPVdRkTlqax4y7RHF1OWTJNzosQtvD14vjyjTCxtD0gWy0HUaQa/AQAA//8D
        AN7bEtA7BAAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7ebe060c59822523-SJC
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 24 Jul 2023 17:53:49 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - gpt-4-0613
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '12755'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '200'
      x-ratelimit-limit-tokens:
      - '40000'
      x-ratelimit-remaining-requests:
      - '199'
      x-ratelimit-remaining-tokens:
      - '19393'
      x-ratelimit-reset-requests:
      - 300ms
      x-ratelimit-reset-tokens:
      - 30.909s
      x-request-id:
      - ee391fa205c31d10b5aeb5eebf7841d5
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are Auto-GPT, a multi-purpose AI assistant.\n\nYour
      decisions must always be made independently without seeking user assistance.
      Play to your strengths as an LLM and pursue simple strategies with no legal
      complications.\n\n## Constraints\nYou operate within the following constraints:\n1.
      ~4000 word limit for short term memory. Your short term memory is short, so
      immediately save important information to files.\n2. If you are unsure how you
      previously did something or want to recall past events, thinking about similar
      events will help you remember.\n3. No user assistance\n4. Exclusively use the
      commands listed below e.g. command_name\n\n## Commands\nYou have access to the
      following commands:\n1. execute_python_code: Creates a Python file and executes
      it, params: (code: string, name: string)\n2. execute_python_file: Executes an
      existing Python file, params: (filename: string)\n3. execute_shell: Executes
      a Shell Command, non-interactive commands only, params: (command_line: string)\n4.
      execute_shell_popen: Executes a Shell Command, non-interactive commands only,
      params: (query: string)\n5. append_to_file: Appends to a file, params: (filename:
      string, text: string)\n6. list_files: Lists Files in a Directory, params: (directory:
      string)\n7. read_file: Read an existing file, params: (filename: string)\n8.
      write_to_file: Writes to a file, params: (filename: string, text: string)\n9.
      google: Google Search, params: (query: string)\n10. web_search: Searches the
      web, params: (query: string)\n11. browse_website: Browses a Website, params:
      (url: string, question: string)\n12. goals_accomplished: Goals are accomplished
      and there is nothing left to do, params: (reason: string)\n\n## Resources\nYou
      can leverage access to the following resources:\n1. Internet access for searches
      and information gathering.\n2. Long Term memory management.\n3. File output.\n4.
      Command execution\n\n## Best practices\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\n##
      Goals\nFor your task, you must fulfill the following goals:\n1. Write ''Hello
      World'' into a file named \"hello_world.txt\".", "role": "system"}, {"content":
      "The current time and date is Tue Jan  1 00:00:00 2000", "role": "system"},
      {"content": "Respond strictly with JSON. The JSON should be compatible with
      the TypeScript type `Response` from the following:\n```ts\ninterface Response
      {\nthoughts: {\n// Thoughts\ntext: string;\nreasoning: string;\n// Short markdown-style
      bullet list that conveys the long-term plan\nplan: string;\n// Constructive
      self-criticism\ncriticism: string;\n// Summary of thoughts to say to the user\nspeak:
      string;\n};\ncommand: {\nname: string;\nargs: Record<string, any>;\n};\n}\n```\n",
      "role": "system"}, {"content": "Determine exactly one command to use based on
      the given goals and the progress you have made so far, and respond using the
      JSON schema specified previously:", "role": "user"}], "model": "gpt-4", "temperature":
      0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3293'
      Content-Type:
      - application/json
      X-Content-Hash:
      - e57f2e1e718b3af2f81709089dab52881d1e5f8739c0f1a1ed596f6e329bb904
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6RUTY/aQAy98yusueQCKKgLq+VYVdVW6qEfsD2UFZqdmMTdmXE0YwoV4r9XM2EJ
        rNS99BIpfrbf84udwwBAUaXmoEyjxbjWjm6bhpbV933UDx+2i/uP26/bxcO3LyV9Xk7eq2Gq4Kdf
        aOSlamzYtRaF2HewCagFU9fJ7K6cTctpOcuA4wptKqtbGd2Mytnk3amiYTIY1Rx+DgAADvmZtPkK
        92oO5fAl4jBGXaOan5MAVGCbIkrHSFG0FzXsQcNe0Ge5h5UHWClpeFs3ElepSwrlIO4lBVbqE3jE
        CoRhF0gQinu0luEHB1sVQF4YNGzIInjtsIKiSfh6l/Cx7KUYr9TwpW1AHdmTr7veiwahZm2BYk+g
        IbZoaEMGkopLijGkiiLnrYXXKVaAYee0r3KTBsFxFIhbEv1kETYcQJoE6fgMOgIJaGt5F8FhT/qa
        CSoKaMT+uVTfWu074SNYRsxs/xLzll9vWmQCCRmK7mxRwDSaZwjMLg90zgEt3XQtk5c0Xn47ObGh
        kKwQbEF4p0MVQZuG8Df5Oick7y+5Y4v6+fTZCwc158T/+fKp83HYLdrJmqs9S5Ud4ZWPF5p0qC9X
        M4VSRl/4ivVcer3GF9o7VQDHLG7lj+p0HsfzXW3IU2zW3bqmW4nCbZd2HAA85jvdXp2eagO7VtbC
        z+jT8d5OJl0/1f8SenRyd3NChUXbHrgrp4PEchz8BQAA//8DAAbKR5+QBAAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7ee6f6ba7bb52ef7-LAX
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 29 Jul 2023 17:08:37 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - gpt-4-0613
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '10899'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '200'
      x-ratelimit-limit-tokens:
      - '40000'
      x-ratelimit-remaining-requests:
      - '199'
      x-ratelimit-remaining-tokens:
      - '31828'
      x-ratelimit-reset-requests:
      - 300ms
      x-ratelimit-reset-tokens:
      - 12.258s
      x-request-id:
      - c0d9470821d6b6c3c0d8f143eb2d42c3
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are Auto-GPT, a multi-purpose AI assistant.\n\nYour
      decisions must always be made independently without seeking user assistance.
      Play to your strengths as an LLM and pursue simple strategies with no legal
      complications.\n\n## Constraints\nYou operate within the following constraints:\n1.
      ~4000 word limit for short term memory. Your short term memory is short, so
      immediately save important information to files.\n2. If you are unsure how you
      previously did something or want to recall past events, thinking about similar
      events will help you remember.\n3. No user assistance\n4. Exclusively use the
      commands listed below e.g. command_name\n\n## Commands\nYou have access to the
      following commands:\n1. execute_python_code: Creates a Python file and executes
      it, params: (code: string, name: string)\n2. execute_python_file: Executes an
      existing Python file, params: (filename: string)\n3. execute_shell: Executes
      a Shell Command, non-interactive commands only, params: (command_line: string)\n4.
      execute_shell_popen: Executes a Shell Command, non-interactive commands only,
      params: (query: string)\n5. append_to_file: Appends to a file, params: (filename:
      string, text: string)\n6. list_files: Lists Files in a Directory, params: (directory:
      string)\n7. read_file: Read an existing file, params: (filename: string)\n8.
      write_to_file: Writes to a file, params: (filename: string, text: string)\n9.
      google: Google Search, params: (query: string)\n10. web_search: Searches the
      web, params: (query: string)\n11. browse_website: Browses a Website, params:
      (url: string, question: string)\n12. goals_accomplished: Goals are accomplished
      and there is nothing left to do, params: (reason: string)\n\n## Resources\nYou
      can leverage access to the following resources:\n1. Internet access for searches
      and information gathering.\n2. Long Term memory management.\n3. File output.\n4.
      Command execution\n\n## Best practices\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\n##
      Goals\nFor your task, you must fulfill the following goals:\n1. Write ''Hello
      World'' into a file named \"hello_world.txt\".", "role": "system"}, {"content":
      "The current time and date is Tue Jan  1 00:00:00 2000", "role": "system"},
      {"content": "Determine exactly one command to use based on the given goals and
      the progress you have made so far, and respond using the JSON schema specified
      previously:", "role": "user"}, {"content": "{\n  \"thoughts\": {\n    \"text\":
      \"I need to write ''Hello World'' into a file named ''hello_world.txt''.\",\n    \"reasoning\":
      \"The goal is to write a specific text into a file. The ''write_to_file'' command
      is the most suitable for this task as it allows me to write text into a file
      directly.\",\n    \"plan\": \"- Use the ''write_to_file'' command to write ''Hello
      World'' into ''hello_world.txt''.\",\n    \"criticism\": \"There is no room
      for criticism at this point as this is the first step towards achieving the
      goal.\",\n    \"speak\": \"I''m going to write ''Hello World'' into a file named
      ''hello_world.txt''.\"\n  },\n  \"command\": {\n    \"name\": \"write_to_file\",\n    \"args\":
      {\n      \"filename\": \"hello_world.txt\",\n      \"text\": \"Hello World\"\n    }\n  }\n}",
      "role": "assistant"}, {"content": "Command write_to_file returned: File written
      to successfully.", "role": "system"}, {"content": "Respond strictly with JSON.
      The JSON should be compatible with the TypeScript type `Response` from the following:\n```ts\ninterface
      Response {\nthoughts: {\n// Thoughts\ntext: string;\nreasoning: string;\n//
      Short markdown-style bullet list that conveys the long-term plan\nplan: string;\n//
      Constructive self-criticism\ncriticism: string;\n// Summary of thoughts to say
      to the user\nspeak: string;\n};\ncommand: {\nname: string;\nargs: Record<string,
      any>;\n};\n}\n```\n", "role": "system"}, {"content": "Determine exactly one
      command to use based on the given goals and the progress you have made so far,
      and respond using the JSON schema specified previously:", "role": "user"}],
      "model": "gpt-4", "temperature": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4393'
      Content-Type:
      - application/json
      X-Content-Hash:
      - 6f7cd6188f8aac89e10f11f52ca6be5a96a6b1b98b63f81e226fc0fe541df337
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6RUTW/bMAy951c86JJLUiRbk7W5bcCG7pJdBmzYMgSqTFtaZdGT6CZFkf8+yM7n
        gB6KXXzgI997FEk/DwDlCrWAMlaLqRs/fmetc9uPhU/20/LOJNHN+y8fNvOn2Y/vSzXKFXz/m4wc
        qq4M140ncRx62ETSQpl1Or+dzGeT2ZtJB9RckM9lVSPj6/FkPn27r7DsDCW1wM8BADx33+wtFLRV
        C3T1XaSmlHRFanFMAlRknyNKp+SS6CBqdAINB6HQ2X1eBWClxHJbWUmrzJJDXZC2kgMr9RlWPxI2
        0YlQwPCOvGd84+iLIVwQhkbpPCHomgoMbcbXm4xfyVaGVys1OrBG0omDC1VP/dUSKtYeG50g3GnQ
        6xVG0KHA3mdqjaGUytb7JxQcCGK1oE0uVBBLGHYqa+F15hzCcF3rUJzbbLwOvcMxloyyjWIpQps8
        1QQdCZH+tC5Sgez80IbVCfdEAdp0W+CSpQtiE50441J97D8SXEJgROYaJUccc6AFYl1Cwy7IS0LW
        0SMVl23n56CydMZREP907iA1pB8uBntR+T9TzhK7Ub9T+0e9WKlc2SvnHtL6/JHOHOpYna/iaW3+
        2RkuO7d5rK92++Kkes1d18oq7NT+bnbHgytdcMmue0f5iJJw06ftBsCv7oDbi5tUTeS6kbXwA4V8
        1bezm55Pnf4VJ3R6c0CFRfszYHo9H2SZ3eAvAAAA//8DAPpEtF+qBAAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7ee6f715e99c2ef7-LAX
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 29 Jul 2023 17:08:53 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - gpt-4-0613
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '12943'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '200'
      x-ratelimit-limit-tokens:
      - '40000'
      x-ratelimit-remaining-requests:
      - '199'
      x-ratelimit-remaining-tokens:
      - '24558'
      x-ratelimit-reset-requests:
      - 300ms
      x-ratelimit-reset-tokens:
      - 23.162s
      x-request-id:
      - 3ed4fd5a7ff3bd41df9a9052e03da2ab
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are Auto-GPT, a multi-purpose AI assistant.\n\nYour
      decisions must always be made independently without seeking user assistance.
      Play to your strengths as an LLM and pursue simple strategies with no legal
      complications.\n\n## Constraints\nYou operate within the following constraints:\n1.
      ~4000 word limit for short term memory. Your short term memory is short, so
      immediately save important information to files.\n2. If you are unsure how you
      previously did something or want to recall past events, thinking about similar
      events will help you remember.\n3. No user assistance\n4. Exclusively use the
      commands listed below e.g. command_name\n\n## Commands\nYou have access to the
      following commands:\n1. execute_python_code: Creates a Python file and executes
      it, params: (code: string, name: string)\n2. execute_python_file: Executes an
      existing Python file, params: (filename: string)\n3. execute_shell: Executes
      a Shell Command, non-interactive commands only, params: (command_line: string)\n4.
      execute_shell_popen: Executes a Shell Command, non-interactive commands only,
      params: (query: string)\n5. list_files: Lists Files in a Directory, params:
      (directory: string)\n6. read_file: Read an existing file, params: (filename:
      string)\n7. write_to_file: Writes to a file, params: (filename: string, text:
      string)\n8. google: Google Search, params: (query: string)\n9. web_search: Searches
      the web, params: (query: string)\n10. browse_website: Browses a Website, params:
      (url: string, question: string)\n11. goals_accomplished: Goals are accomplished
      and there is nothing left to do, params: (reason: string)\n\n## Resources\nYou
      can leverage access to the following resources:\n1. Internet access for searches
      and information gathering.\n2. Long Term memory management.\n3. File output.\n4.
      Command execution\n\n## Best practices\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\n##
      Goals\nFor your task, you must fulfill the following goals:\n1. Write ''Hello
      World'' into a file named \"hello_world.txt\".", "role": "system"}, {"content":
      "The current time and date is Tue Jan  1 00:00:00 2000", "role": "system"},
      {"content": "Respond strictly with JSON. The JSON should be compatible with
      the TypeScript type `Response` from the following:\n```ts\ninterface Response
      {\nthoughts: {\n// Thoughts\ntext: string;\nreasoning: string;\n// Short markdown-style
      bullet list that conveys the long-term plan\nplan: string;\n// Constructive
      self-criticism\ncriticism: string;\n// Summary of thoughts to say to the user\nspeak:
      string;\n};\ncommand: {\nname: string;\nargs: Record<string, any>;\n};\n}\n```\n",
      "role": "system"}, {"content": "Determine exactly one command to use based on
      the given goals and the progress you have made so far, and respond using the
      JSON schema specified previously:", "role": "user"}], "model": "gpt-4-0314",
      "temperature": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3217'
      Content-Type:
      - application/json
      X-Content-Hash:
      - 70dfed68fa2ce45299431d2acbb8d87f9bab0533b93c37e3a996a7c9c92f24ef
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4xTy27bMBC8+ysWvOhiu3LiKI5vRYGgQdCe2gZBVQgMtbaY8CGIa9iAoX8vVrQs
        OQXaXniY2Z2ZJZfHCYDQpViDUJUkZWszu630txeV0qf0NVs+ru6bx82XB2Wf75/u8IeYcod/eUVF
        fddceVsbJO1dpFWDkpBVF9ldmt1cL69uO8L6Eg23bWuaLWfp9WJ56qi8VhjEGn5OAACO3cnZXIkH
        sYZ02iMWQ5BbFOtzEYBovGFEyBB0IOlITAdSeUfourjH3AHkgiq/21YUclZhqAPxQAzk4gEcYgnk
        Yd9oQkg+ozEennxjygS0Iw8SNtogOGmxhKRivtgzP6cDJfNcTHvZBmXwTrttr62kg11AoAoh6QwK
        8gXLJaC8tdJ11vESu6rOiuEYhyEOO3apjXTRYAbfw/8I/xF65PB+YNAXZqrRpJUONjp+/fBxRIYa
        5Vs/614bA87ve9O/X9s/E7BHO41veJro4glZN1pfjD9KJ5vt+NUZ4oqh8V2mc+vlhozSxVQAbRcu
        d604bV57XtmNdjpURdwEXsNAvo5l7QTgV/cFdhdbLerG25oK8m/o+F9kq1XUE8NvG9hFdnViyZM0
        A7G6SSfs0k5+AwAA//8DAFKRJQjrAwAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7ee73e137aed474f-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 29 Jul 2023 17:57:15 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - gpt-4-0314
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '8058'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '200'
      x-ratelimit-limit-tokens:
      - '40000'
      x-ratelimit-remaining-requests:
      - '199'
      x-ratelimit-remaining-tokens:
      - '31828'
      x-ratelimit-reset-requests:
      - 300ms
      x-ratelimit-reset-tokens:
      - 12.258s
      x-request-id:
      - bd1373fd6feeb4852c574dbc0ed70c6c
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are Auto-GPT, a multi-purpose AI assistant.\n\nYour
      decisions must always be made independently without seeking user assistance.
      Play to your strengths as an LLM and pursue simple strategies with no legal
      complications.\n\n## Constraints\nYou operate within the following constraints:\n1.
      ~4000 word limit for short term memory. Your short term memory is short, so
      immediately save important information to files.\n2. If you are unsure how you
      previously did something or want to recall past events, thinking about similar
      events will help you remember.\n3. No user assistance\n4. Exclusively use the
      commands listed below e.g. command_name\n\n## Commands\nYou have access to the
      following commands:\n1. execute_python_code: Creates a Python file and executes
      it, params: (code: string, name: string)\n2. execute_python_file: Executes an
      existing Python file, params: (filename: string)\n3. execute_shell: Executes
      a Shell Command, non-interactive commands only, params: (command_line: string)\n4.
      execute_shell_popen: Executes a Shell Command, non-interactive commands only,
      params: (query: string)\n5. list_files: Lists Files in a Directory, params:
      (directory: string)\n6. read_file: Read an existing file, params: (filename:
      string)\n7. write_to_file: Writes to a file, params: (filename: string, text:
      string)\n8. google: Google Search, params: (query: string)\n9. web_search: Searches
      the web, params: (query: string)\n10. browse_website: Browses a Website, params:
      (url: string, question: string)\n11. goals_accomplished: Goals are accomplished
      and there is nothing left to do, params: (reason: string)\n\n## Resources\nYou
      can leverage access to the following resources:\n1. Internet access for searches
      and information gathering.\n2. Long Term memory management.\n3. File output.\n4.
      Command execution\n\n## Best practices\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n\n##
      Goals\nFor your task, you must fulfill the following goals:\n1. Write ''Hello
      World'' into a file named \"hello_world.txt\".", "role": "system"}, {"content":
      "The current time and date is Tue Jan  1 00:00:00 2000", "role": "system"},
      {"content": "Determine exactly one command to use based on the given goals and
      the progress you have made so far, and respond using the JSON schema specified
      previously:", "role": "user"}, {"content": "{\n  \"thoughts\": {\n    \"text\":
      \"I need to write ''Hello World'' into a file named ''hello_world.txt''.\",\n    \"reasoning\":
      \"I can use the ''write_to_file'' command to create the file and write the text.\",\n    \"plan\":
      \"- Use ''write_to_file'' command to create ''hello_world.txt'' and write ''Hello
      World'' in it.\",\n    \"criticism\": \"N/A\",\n    \"speak\": \"I will now
      create a file named ''hello_world.txt'' and write ''Hello World'' in it.\"\n  },\n  \"command\":
      {\n    \"name\": \"write_to_file\",\n    \"args\": {\n      \"filename\": \"hello_world.txt\",\n      \"text\":
      \"Hello World\"\n    }\n  }\n}", "role": "assistant"}, {"content": "Command
      write_to_file returned: File written to successfully.", "role": "system"}, {"content":
      "Respond strictly with JSON. The JSON should be compatible with the TypeScript
      type `Response` from the following:\n```ts\ninterface Response {\nthoughts:
      {\n// Thoughts\ntext: string;\nreasoning: string;\n// Short markdown-style bullet
      list that conveys the long-term plan\nplan: string;\n// Constructive self-criticism\ncriticism:
      string;\n// Summary of thoughts to say to the user\nspeak: string;\n};\ncommand:
      {\nname: string;\nargs: Record<string, any>;\n};\n}\n```\n", "role": "system"},
      {"content": "Determine exactly one command to use based on the given goals and
      the progress you have made so far, and respond using the JSON schema specified
      previously:", "role": "user"}], "model": "gpt-4-0314", "temperature": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4152'
      Content-Type:
      - application/json
      X-Content-Hash:
      - b02279b4e306854b6b6e95bb1244a10371626437b90fa9d5f3b1858ea6a1e979
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA3RTy67TMBDd9ytG3nSTlpQ+oN0VFsAVAolbCSGCKteZJKaOJ7Kn3Jar/Dty3Ecq
        dDdenDOPc2bGzwMAoXOxAqEqyapuzOhNpTf1ev3wtTmpd+ozv/62dunj7uH99O/8h0hCBu1+o+JL
        1lhR3RhkTTbSyqFkDFUni2W6mE9n07cdUVOOJqSVDY9mo3Q6mZ0zKtIKvVjBzwEAwHP3Bm02x6NY
        QZpckBq9lyWK1TUIQDgyARHSe+1ZWhbJjVRkGW0n9zmzAJngig5lxT4LVQLUgXjkAGTiE1TyD4I0
        DmV+gienmdHC8CMaQ/CdnMmHoC0TSCi0QbCyxhyGVeC3T4Ef85GH40wkl+oOpSerbRlbPGqrELhC
        KEkaqKSHHaIFqbphal9hngTeIWgPlsAi5lCQg+LgAg6K6lra3Pe7NEba2GAEH0gaf1ewH6mcZq20
        r2P4l1frHukblPu7WfiDUuh9cTDmBOf9dvL/Mx0nIm3+4txA8xg2nTXpMHirySGw9HsPTNCgK8jV
        40wEPW0Sd3a2e7eyMPcoM0zRb/tme3akK/urvq0j5m5etnHdy8Vy8HXv5xpysRsNRvEAbechs604
        H2R7veRCW+2rbZQSrtMzNTGsHQD86n7G4e7YReOobnjLtEcbvssyncZ64vYJb+xkvjizTCxNj0jn
        y0Fo0w7+AQAA//8DAHLry7ADBAAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7ee73e557dd6474f-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sat, 29 Jul 2023 17:57:25 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - gpt-4-0314
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '7219'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '200'
      x-ratelimit-limit-tokens:
      - '40000'
      x-ratelimit-remaining-requests:
      - '199'
      x-ratelimit-remaining-tokens:
      - '30698'
      x-ratelimit-reset-requests:
      - 300ms
      x-ratelimit-reset-tokens:
      - 13.952s
      x-request-id:
      - aa193332f615006504fc95b87ba037d1
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are Auto-GPT, a multi-purpose AI assistant.\n\nYour
      decisions must always be made independently without seeking user assistance.
      Play to your strengths as an LLM and pursue simple strategies with no legal
      complications.\n\n## Constraints\nYou operate within the following constraints:\n1.
      ~4000 word limit for short term memory. Your short term memory is short, so
      immediately save important information to files.\n2. If you are unsure how you
      previously did something or want to recall past events, thinking about similar
      events will help you remember.\n3. No user assistance\n4. Exclusively use the
      commands listed below e.g. command_name\n\n## Commands\nYou have access to the
      following commands:\n1. execute_python_code: Creates a Python file and executes
      it, params: (code: string, name: string)\n2. execute_python_file: Executes an
      existing Python file, params: (filename: string)\n3. list_files: Lists Files
      in a Directory, params: (directory: string)\n4. read_file: Read an existing
      file, params: (filename: string)\n5. write_to_file: Writes to a file, params:
      (filename: string, text: string)\n6. web_search: Searches the web, params: (query:
      string)\n7. browse_website: Browses a Website, params: (url: string, question:
      string)\n8. goals_accomplished: Goals are accomplished and there is nothing
      left to do, params: (reason: string)\n\n## Resources\nYou can leverage access
      to the following resources:\n1. Internet access for searches and information
      gathering.\n2. Long Term memory management.\n3. File output.\n4. Command execution\n\n##
      Best practices\n1. Continuously review and analyze your actions to ensure you
      are performing to the best of your abilities.\n2. Constructively self-criticize
      your big-picture behavior constantly.\n3. Reflect on past decisions and strategies
      to refine your approach.\n4. Every command has a cost, so be smart and efficient.
      Aim to complete tasks in the least number of steps.\n\n## Goals\nFor your task,
      you must fulfill the following goals:\n1. Write ''Hello World'' into a file
      named \"hello_world.txt\".", "role": "system"}, {"content": "The current time
      and date is Tue Jan  1 00:00:00 2000", "role": "system"}, {"content": "Respond
      strictly with JSON. The JSON should be compatible with the TypeScript type `Response`
      from the following:\n```ts\ninterface Response {\nthoughts: {\n// Thoughts\ntext:
      string;\nreasoning: string;\n// Short markdown-style bullet list that conveys
      the long-term plan\nplan: string;\n// Constructive self-criticism\ncriticism:
      string;\n// Summary of thoughts to say to the user\nspeak: string;\n};\ncommand:
      {\nname: string;\nargs: Record<string, any>;\n};\n}\n```\n", "role": "system"},
      {"content": "Determine exactly one command to use based on the given goals and
      the progress you have made so far, and respond using the JSON schema specified
      previously:", "role": "user"}], "model": "gpt-4-0314", "temperature": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '2951'
      Content-Type:
      - application/json
      X-Content-Hash:
      - f69ae13dc989a182f9358576ebc766dd8a1a4feb44de519b25b38c89e0c87524
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4RTQW7bMBC86xULXnyRXSux49i3FCjQoEB6aIsUrQKBpTYSa4pUxDVkwNDfC5KW
        JSVAc+FhZndmllyeIgAmc7YDJkpOoqrVfCPX9c+vov21bz62983dI96+7L98Vw8v3z4lLHYd5s9f
        FNR3LYSpaoUkjQ60aJATOtXkZrvcrK6T7dYTlclRubaipvlqvrxOVueO0kiBlu3gdwQAcPKny6Zz
        PLIdLOMeqdBaXiDbXYoAWGOUQxi3Vlrimlg8kMJoQu3jnlINkDIqzaEoyaZOxUEexCM5IGX3oBFz
        IANtIwlh9hmVMvBoGpXPQGoywOFZKgTNK8xhVjo+ax2/oCPNFimLe9kGuTVa6qLXFlzDwSJQiUE/
        I5N5NWGqimtvHK7Q13jKwSGMg1zUsUetuA7yc/hh35d9E3ik/3pYkBMr0UiSQtoq+D18uBuRtka+
        7+dspVK94f+v6113p9/F4e3O00yezukG28nko2S8Kcav7SBXMTS+ynRpnW7GKF1IBdD5cKnu2Hnj
        usuqPkstbZmFDXDrZ8nUoayLAJ786h8m28zqxlQ1ZWT2qN1/uLlaBz02/LKBTdabM0uGuBqIze1V
        5Fy66B8AAAD//wMAOtTrWeMDAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7eefcdc34c345a10-IAD
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 30 Jul 2023 18:53:28 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - gpt-4-0314
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '8928'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '200'
      x-ratelimit-limit-tokens:
      - '40000'
      x-ratelimit-remaining-requests:
      - '199'
      x-ratelimit-remaining-tokens:
      - '31828'
      x-ratelimit-reset-requests:
      - 300ms
      x-ratelimit-reset-tokens:
      - 12.258s
      x-request-id:
      - 1ab3cb13014c15f8d4f7beb98388cff5
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are Auto-GPT, a multi-purpose AI assistant.\n\nYour
      decisions must always be made independently without seeking user assistance.
      Play to your strengths as an LLM and pursue simple strategies with no legal
      complications.\n\n## Constraints\nYou operate within the following constraints:\n1.
      ~4000 word limit for short term memory. Your short term memory is short, so
      immediately save important information to files.\n2. If you are unsure how you
      previously did something or want to recall past events, thinking about similar
      events will help you remember.\n3. No user assistance\n4. Exclusively use the
      commands listed below e.g. command_name\n\n## Commands\nYou have access to the
      following commands:\n1. execute_python_code: Creates a Python file and executes
      it, params: (code: string, name: string)\n2. execute_python_file: Executes an
      existing Python file, params: (filename: string)\n3. list_files: Lists Files
      in a Directory, params: (directory: string)\n4. read_file: Read an existing
      file, params: (filename: string)\n5. write_to_file: Writes to a file, params:
      (filename: string, text: string)\n6. web_search: Searches the web, params: (query:
      string)\n7. browse_website: Browses a Website, params: (url: string, question:
      string)\n8. goals_accomplished: Goals are accomplished and there is nothing
      left to do, params: (reason: string)\n\n## Resources\nYou can leverage access
      to the following resources:\n1. Internet access for searches and information
      gathering.\n2. Long Term memory management.\n3. File output.\n4. Command execution\n\n##
      Best practices\n1. Continuously review and analyze your actions to ensure you
      are performing to the best of your abilities.\n2. Constructively self-criticize
      your big-picture behavior constantly.\n3. Reflect on past decisions and strategies
      to refine your approach.\n4. Every command has a cost, so be smart and efficient.
      Aim to complete tasks in the least number of steps.\n\n## Goals\nFor your task,
      you must fulfill the following goals:\n1. Write ''Hello World'' into a file
      named \"hello_world.txt\".", "role": "system"}, {"content": "The current time
      and date is Tue Jan  1 00:00:00 2000", "role": "system"}, {"content": "Determine
      exactly one command to use based on the given goals and the progress you have
      made so far, and respond using the JSON schema specified previously:", "role":
      "user"}, {"content": "{\n  \"thoughts\": {\n    \"text\": \"I need to write
      ''Hello World'' into a file named ''hello_world.txt''.\",\n    \"reasoning\":
      \"I can use the write_to_file command to create the file and write the text.\",\n    \"plan\":
      \"- Use write_to_file command to create ''hello_world.txt'' and write ''Hello
      World'' in it.\",\n    \"criticism\": \"N/A\",\n    \"speak\": \"I will create
      a file named ''hello_world.txt'' and write ''Hello World'' in it.\"\n  },\n  \"command\":
      {\n    \"name\": \"write_to_file\",\n    \"args\": {\n      \"filename\": \"hello_world.txt\",\n      \"text\":
      \"Hello World\"\n    }\n  }\n}", "role": "assistant"}, {"content": "Command
      write_to_file returned: File written to successfully.", "role": "system"}, {"content":
      "Respond strictly with JSON. The JSON should be compatible with the TypeScript
      type `Response` from the following:\n```ts\ninterface Response {\nthoughts:
      {\n// Thoughts\ntext: string;\nreasoning: string;\n// Short markdown-style bullet
      list that conveys the long-term plan\nplan: string;\n// Constructive self-criticism\ncriticism:
      string;\n// Summary of thoughts to say to the user\nspeak: string;\n};\ncommand:
      {\nname: string;\nargs: Record<string, any>;\n};\n}\n```\n", "role": "system"},
      {"content": "Determine exactly one command to use based on the given goals and
      the progress you have made so far, and respond using the JSON schema specified
      previously:", "role": "user"}], "model": "gpt-4-0314", "temperature": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3878'
      Content-Type:
      - application/json
      X-Content-Hash:
      - 255cecf9b444d6913f9621861a49752eccb32da7ae640885dfc4c3774a30d374
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7xTy27bMBC86ysWvPgiu3btNI5vKXpoCySnokURFQZDrSXG1K5ArmMXhv69oOSH
        hCDXXghwhzM7++AxAVA2VytQptRiqtqNb+1N/UL+++/P2+eHvVTyxT7eu5+Ezvx4VWlk8PMLGjmz
        Joar2qFYpg42HrVgVJ19upveLuYfZ7MWqDhHF2lFLePFeDqfLU6Mkq3BoFbwlAAAHNszeqMcD2oF
        0/QcqTAEXaBaXR4BKM8uRpQOwQbRJCq9goZJkFq7x4wAMiUl74pSQhZVYqgN4kFiIFPfoNSvCHtv
        RZBg9BWdY/jF3uUjsCQMGjbWIZCuMIdRGfH1PuITOchokqn0rOpRByZLxUBam7ZnNpSYg5QIBWuX
        QuB48Qg2ALGUlgpwuBEQhpz7srXT1CmO4UH77UUkgA4D+T7LeCvW2FB11McP9z0w1Ki3A5dhZwyG
        sNk59xdOQ20Tvam4a4em/N2mgZVJpmKuJu2GYLiqNOWDGcSGdhbaWtb9QnpWtS/6s7v2+T/YB2ja
        KjJq1GnHmstybizZUK47M3HhgnDdPWsSgD/tsu8G+6tqz1Uta+EtUvwBy/lNp6eu/+qKzhbLEyos
        2l2Bu+U8iVma5B8AAAD//wMAo7lej9UDAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7eefce0c8cfc5a10-IAD
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 30 Jul 2023 18:53:39 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - gpt-4-0314
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '8331'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '200'
      x-ratelimit-limit-tokens:
      - '40000'
      x-ratelimit-remaining-requests:
      - '199'
      x-ratelimit-remaining-tokens:
      - '23433'
      x-ratelimit-reset-requests:
      - 300ms
      x-ratelimit-reset-tokens:
      - 24.85s
      x-request-id:
      - 4ec8c49444fc80d50cdb6c26257f9a98
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are Auto-GPT, a multi-purpose AI assistant.\n\nYour
      decisions must always be made independently without seeking user assistance.
      Play to your strengths as an LLM and pursue simple strategies with no legal
      complications.\n\n## Constraints\nYou operate within the following constraints:\n1.
      Exclusively use the commands listed below.\n2. You can only act proactively,
      and are unable to start background jobs or set up webhooks for yourself. Take
      this into account when planning your actions.\n3. You are unable to interact
      with physical objects. If this is absolutely necessary to fulfill a task or
      objective or to complete a step, you must ask the user to do it for you. If
      the user refuses this, and there is no other way to achieve your goals, you
      must terminate to avoid wasting time and energy.\n\n## Resources\nYou can leverage
      access to the following resources:\n1. Internet access for searches and information
      gathering.\n2. The ability to read and write files.\n3. You are a Large Language
      Model, trained on millions of pages of text, including a lot of factual knowledge.
      Make use of this factual knowledge to avoid unnecessary gathering of information.\n\n##
      Commands\nYou have access to the following commands:\n1. execute_python_code:
      Creates a Python file and executes it. Params: (code: string, name: string)\n2.
      execute_python_file: Executes an existing Python file. Params: (filename: string)\n3.
      list_files: Lists Files in a Directory. Params: (directory: string)\n4. open_file:
      Open a file for editing, creating it if it does not exist yet. Note: if you
      only need to read or write a file once, use `write_to_file` instead. Params:
      (file_path: string)\n5. open_folder: Open a folder to keep track of its content.
      Params: (path: string)\n6. read_file: Read an existing file. Params: (filename:
      string)\n7. write_to_file: Writes to a file. Params: (filename: string, text:
      string)\n8. web_search: Searches the web. Params: (query: string)\n9. browse_website:
      Browses a Website. Params: (url: string, question: string)\n10. close_context_item:
      Close an open file, folder or other context item. Params: (index: integer)\n11.
      goals_accomplished: Goals are accomplished and there is nothing left to do.
      Params: (reason: string)\n\n## Best practices\n1. Continuously review and analyze
      your actions to ensure you are performing to the best of your abilities.\n2.
      Constructively self-criticize your big-picture behavior constantly.\n3. Reflect
      on past decisions and strategies to refine your approach.\n4. Every command
      has a cost, so be smart and efficient. Aim to complete tasks in the least number
      of steps.\n5. Only make use of your information gathering abilities to find
      information that you don''t yet have knowledge of.\n\n## Goals\nFor your task,
      you must fulfill the following goals:\n1. Write ''Hello World'' into a file
      named \"hello_world.txt\".", "role": "system"}, {"content": "The current time
      and date is Tue Jan  1 00:00:00 2000", "role": "system"}, {"content": "Respond
      strictly with JSON. The JSON should be compatible with the TypeScript type `Response`
      from the following:\n```ts\ninterface Response {\nthoughts: {\n// Thoughts\ntext:
      string;\nreasoning: string;\n// Short markdown-style bullet list that conveys
      the long-term plan\nplan: string;\n// Constructive self-criticism\ncriticism:
      string;\n// Summary of thoughts to say to the user\nspeak: string;\n};\ncommand:
      {\nname: string;\nargs: Record<string, any>;\n};\n}\n```", "role": "system"},
      {"content": "Determine exactly one command to use based on the given goals and
      the progress you have made so far, and respond using the JSON schema specified
      previously:", "role": "user"}], "model": "gpt-4-0314", "temperature": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3758'
      Content-Type:
      - application/json
      X-Content-Hash:
      - 1abc76680a2d6cb3b04476d383f3e3da4e1514b5ec113f30dfd5dba42e1556dc
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA3RTTW/bMAy9+1cQuvjiZE4buE1u6ynBsG7AMBTYPASqzNpaZdGzGCRA4P8+yEpi
        u0UvOvDx8T1+6BQBCF2INQhVSVZ1Y2Z37cMye9D7L7/s5lnV3zdtun38R99SfPqaicQz6PkvKr6w
        5orqxiBrsgFWLUpGX3WRrW5W6f3N3bIHairQeFrZ8Gw5S28XyzOjIq3QiTX8jgAATv3rvdkCj2IN
        aXKJ1OicLFGsr0kAoiXjI0I6px1LyyIZQEWW0fZ2T7kFyAVXtC8rdrmv4kN9EI/sA7nYgkUsgAkO
        rWaEeIPGEDxRa4oYtGUCCS/aIFhZYwFx5fHdweNzPnI8z0VyKduidGS1LUPtH9oqhEEhzOpST9ri
        rMkEmhPYgpIW9g6BK4S4x3ZMO58dg6K6lrYYyzVG2qA0g5/uPWUkedWa9sf0vqGRgGo1a6VdHVQe
        P30ega5B+XoZ4kEbA5YOb3r8YGYf+unnrXmeC6/SJWGF59YnG/SVg/ik6ZE/2ZbjpfuQzxiIb1xd
        qdMDGfkLrgC63lxuO3E+vO56sS/aalftwiH4K3RMTUjrIoA//Q/YT45aNC3VDe+YXtH6b3GfZqGe
        GD7bgC6y2zPKxNIMwCpbRV6li/4DAAD//wMADje1M+oDAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7fbe480b991a0a07-IAD
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 24 Aug 2023 20:18:22 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - gpt-4-0314
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '28145'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '200'
      x-ratelimit-limit-tokens:
      - '40000'
      x-ratelimit-remaining-requests:
      - '199'
      x-ratelimit-remaining-tokens:
      - '31828'
      x-ratelimit-reset-requests:
      - 300ms
      x-ratelimit-reset-tokens:
      - 12.258s
      x-request-id:
      - 4edf56caedf645ec2b218e30a8689bf9
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are Auto-GPT, a multi-purpose AI assistant.\n\nYour
      decisions must always be made independently without seeking user assistance.
      Play to your strengths as an LLM and pursue simple strategies with no legal
      complications.\n\n## Constraints\nYou operate within the following constraints:\n1.
      Exclusively use the commands listed below.\n2. You can only act proactively,
      and are unable to start background jobs or set up webhooks for yourself. Take
      this into account when planning your actions.\n3. You are unable to interact
      with physical objects. If this is absolutely necessary to fulfill a task or
      objective or to complete a step, you must ask the user to do it for you. If
      the user refuses this, and there is no other way to achieve your goals, you
      must terminate to avoid wasting time and energy.\n\n## Resources\nYou can leverage
      access to the following resources:\n1. Internet access for searches and information
      gathering.\n2. The ability to read and write files.\n3. You are a Large Language
      Model, trained on millions of pages of text, including a lot of factual knowledge.
      Make use of this factual knowledge to avoid unnecessary gathering of information.\n\n##
      Commands\nYou have access to the following commands:\n1. execute_python_code:
      Creates a Python file and executes it. Params: (code: string, name: string)\n2.
      execute_python_file: Executes an existing Python file. Params: (filename: string)\n3.
      list_files: Lists Files in a Directory. Params: (directory: string)\n4. open_file:
      Open a file for editing, creating it if it does not exist yet. Note: if you
      only need to read or write a file once, use `write_to_file` instead. Params:
      (file_path: string)\n5. open_folder: Open a folder to keep track of its content.
      Params: (path: string)\n6. read_file: Read an existing file. Params: (filename:
      string)\n7. write_to_file: Writes to a file. Params: (filename: string, text:
      string)\n8. web_search: Searches the web. Params: (query: string)\n9. browse_website:
      Browses a Website. Params: (url: string, question: string)\n10. close_context_item:
      Close an open file, folder or other context item. Params: (index: integer)\n11.
      goals_accomplished: Goals are accomplished and there is nothing left to do.
      Params: (reason: string)\n\n## Best practices\n1. Continuously review and analyze
      your actions to ensure you are performing to the best of your abilities.\n2.
      Constructively self-criticize your big-picture behavior constantly.\n3. Reflect
      on past decisions and strategies to refine your approach.\n4. Every command
      has a cost, so be smart and efficient. Aim to complete tasks in the least number
      of steps.\n5. Only make use of your information gathering abilities to find
      information that you don''t yet have knowledge of.\n\n## Goals\nFor your task,
      you must fulfill the following goals:\n1. Write ''Hello World'' into a file
      named \"hello_world.txt\".", "role": "system"}, {"content": "The current time
      and date is Tue Jan  1 00:00:00 2000", "role": "system"}, {"content": "Determine
      exactly one command to use based on the given goals and the progress you have
      made so far, and respond using the JSON schema specified previously:", "role":
      "user"}, {"content": "{\n  \"thoughts\": {\n    \"text\": \"I need to write
      ''Hello World'' into a file named ''hello_world.txt''.\",\n    \"reasoning\":
      \"Since I need to create a file and write to it, I can use the ''write_to_file''
      command.\",\n    \"plan\": \"- Use ''write_to_file'' to create and write ''Hello
      World'' to ''hello_world.txt''\",\n    \"criticism\": \"N/A\",\n    \"speak\":
      \"I will now create a file named ''hello_world.txt'' and write ''Hello World''
      into it.\"\n  },\n  \"command\": {\n    \"name\": \"write_to_file\",\n    \"args\":
      {\n      \"filename\": \"hello_world.txt\",\n      \"text\": \"Hello World\"\n    }\n  }\n}",
      "role": "assistant"}, {"content": "Command write_to_file returned: File written
      to successfully.", "role": "system"}, {"content": "Respond strictly with JSON.
      The JSON should be compatible with the TypeScript type `Response` from the following:\n```ts\ninterface
      Response {\nthoughts: {\n// Thoughts\ntext: string;\nreasoning: string;\n//
      Short markdown-style bullet list that conveys the long-term plan\nplan: string;\n//
      Constructive self-criticism\ncriticism: string;\n// Summary of thoughts to say
      to the user\nspeak: string;\n};\ncommand: {\nname: string;\nargs: Record<string,
      any>;\n};\n}\n```", "role": "system"}, {"content": "Determine exactly one command
      to use based on the given goals and the progress you have made so far, and respond
      using the JSON schema specified previously:", "role": "user"}], "model": "gpt-4-0314",
      "temperature": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4692'
      Content-Type:
      - application/json
      X-Content-Hash:
      - baff1f42fe127cb8c5c693ce3efabf6c6a498f3f864aad06c32fdd5f0969294d
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA7RTTY/TMBC951eMfOklDU0/tmxvVBzgAEKAhFiCKuNMElNnHNmT3aIq/x05Sbfp
        AThxsax5nnnvzYzPEYDQudiBUJVkVTdmvnX79QNtytdridu7/Vf90DYfPu439O74WIg4ZNgfP1Hx
        JStRtm4MsrY0wMqhZAxV07v75f3i5Wqx6oHa5mhCWtnwfD1frNL1mFFZrdCLHXyLAADO/Rm0UY4n
        sYNFfInU6L0sUeyeHwEIZ02ICOm99iyJRXwFlSVG6uWeMwLIBFe2LSv2WagSQn0QTxwCmXgLlXxE
        8K1S6H3RGvMLnpxmRoLZGzTGwhfrTD4DTWxBQqENAskac5hVAT88BTzhE8+STMQXCofSW9JUDjyf
        NCmEkW1sIubAFQJLf4zDzSFoD2SBEHMorIOidSEOUoWOT8s3RtJQeQ7vX7yaIMpp1kr7eoBvQd+g
        PP7Z+TjNf9gESfnfmqQ5gc+jseDoYjfJRNDRxcNklK1rSfnNYALjIK+00viDVH2y9hXmExvSldOB
        Xvv9f4Y6sHS9+Iw6Me5b97yohSbtq8OgISyfZ9sMz7oI4Hu/+O3NLovG2brhA9sjUvgN6WK5HAqK
        6yebwJt0RNmyNBMg3a6iwNNFvwEAAP//AwC5Sn3d4wMAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7fbe48bd3fc40a07-IAD
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 24 Aug 2023 20:18:46 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - gpt-4-0314
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '23312'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '200'
      x-ratelimit-limit-tokens:
      - '40000'
      x-ratelimit-remaining-requests:
      - '199'
      x-ratelimit-remaining-tokens:
      - '9915'
      x-ratelimit-reset-requests:
      - 300ms
      x-ratelimit-reset-tokens:
      - 45.126s
      x-request-id:
      - ab340fef05f09b5f52a97205cb2f41e7
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are Auto-GPT, a multi-purpose AI assistant.\n\nYour
      decisions must always be made independently without seeking user assistance.
      Play to your strengths as an LLM and pursue simple strategies with no legal
      complications.\n\n## Constraints\nYou operate within the following constraints:\n1.
      Exclusively use the commands listed below.\n2. You can only act proactively,
      and are unable to start background jobs or set up webhooks for yourself. Take
      this into account when planning your actions.\n3. You are unable to interact
      with physical objects. If this is absolutely necessary to fulfill a task or
      objective or to complete a step, you must ask the user to do it for you. If
      the user refuses this, and there is no other way to achieve your goals, you
      must terminate to avoid wasting time and energy.\n\n## Resources\nYou can leverage
      access to the following resources:\n1. Internet access for searches and information
      gathering.\n2. The ability to read and write files.\n3. You are a Large Language
      Model, trained on millions of pages of text, including a lot of factual knowledge.
      Make use of this factual knowledge to avoid unnecessary gathering of information.\n\n##
      Commands\nYou have access to the following commands:\n1. execute_python_code:
      Creates a Python file and executes it. Params: (code: string, name: string)\n2.
      execute_python_file: Executes an existing Python file. Params: (filename: string)\n3.
      list_files: Lists Files in a Directory. Params: (directory: string)\n4. open_file:
      Open a file for editing or continued viewing; create it if it does not exist
      yet. Note: if you only need to read or write a file once, use `write_to_file`
      instead. Params: (file_path: string)\n5. open_folder: Open a folder to keep
      track of its content. Params: (path: string)\n6. read_file: Read an existing
      file. Params: (filename: string)\n7. write_to_file: Writes to a file. Params:
      (filename: string, text: string)\n8. web_search: Searches the web. Params: (query:
      string)\n9. browse_website: Browses a Website. Params: (url: string, question:
      string)\n10. close_context_item: Close an open file, folder or other context
      item. Params: (index: integer)\n11. goals_accomplished: Goals are accomplished
      and there is nothing left to do. Params: (reason: string)\n\n## Best practices\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Only make use of your information
      gathering abilities to find information that you don''t yet have knowledge of.\n\n##
      Goals\nFor your task, you must fulfill the following goals:\n1. Write ''Hello
      World'' into a file named \"hello_world.txt\".", "role": "system"}, {"content":
      "The current time and date is Tue Jan  1 00:00:00 2000", "role": "system"},
      {"content": "Respond strictly with JSON. The JSON should be compatible with
      the TypeScript type `Response` from the following:\n```ts\ninterface Response
      {\nthoughts: {\n// Thoughts\ntext: string;\nreasoning: string;\n// Short markdown-style
      bullet list that conveys the long-term plan\nplan: string;\n// Constructive
      self-criticism\ncriticism: string;\n// Summary of thoughts to say to the user\nspeak:
      string;\n};\ncommand: {\nname: string;\nargs: Record<string, any>;\n};\n}\n```",
      "role": "system"}, {"content": "Determine exactly one command to use based on
      the given goals and the progress you have made so far, and respond using the
      JSON schema specified previously:", "role": "user"}], "model": "gpt-4-0314",
      "temperature": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3777'
      Content-Type:
      - application/json
      X-Content-Hash:
      - f4e25ae0fa9f64cd40f68b3b2563c554f7a803003cd3a9b0e84715eae6946699
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4xTwW7bMAy9+ysIXXxxsjjL2ia3YsWwHlYMA4YBmwdDlVlbjSx5FlMHCPzvA604
        cTpg20WH98j3HiXqEAEIXYgNCFVJUnVjZtft+9vucfugv3iF2n6me/X84dPdzcuv73cvIuEO9/iM
        isauuXJ1Y5C0s4FWLUpCVk2v1st1uny3Wg5E7Qo03FY2NFvNFm/T1bGjclqhFxv4EQEAHIaTs9kC
        92IDi2REavRelig2pyIA0TrDiJDea0/SkkjOpHKW0A5xD5kFyARVbldW5DNWYWgAcU8MZOIeLGIB
        5KBrNSHEH9EYB99ca4oYtCUHEp60QbCyxgLiivm8Y35Oe4rnmUhG2Rald1bbctRW0sLOI1CFEA8G
        Obmc5WJQrq6lHazDJQ5VgxXDIQ5DHHbq0hhpg8EMvvr/Ef4j9MTh9cCgL8xUq0kr7evg+PDmdkL6
        BuV2nLXTxoB13Wj692v7ZwL26JPwhseJLp6QdYP1xfiTdLItp6/OEFecG19lOrVebsgkXUgF0A/h
        MtuL4+b1p5V90lb7Kg+bwGvoyTWhrI8Afg5fYHex1aJpXd1QTm6Llv/FzWId9MT5t53Z9Gp5ZMmR
        NGdifZ1G7NJHvwEAAP//AwAFmq436wMAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7fbeb0404d66e9b9-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 24 Aug 2023 21:29:22 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - gpt-4-0314
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '20048'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '200'
      x-ratelimit-limit-tokens:
      - '40000'
      x-ratelimit-remaining-requests:
      - '199'
      x-ratelimit-remaining-tokens:
      - '31828'
      x-ratelimit-reset-requests:
      - 300ms
      x-ratelimit-reset-tokens:
      - 12.258s
      x-request-id:
      - 377cd69975329c5751844db50e9f7a72
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are Auto-GPT, a multi-purpose AI assistant.\n\nYour
      decisions must always be made independently without seeking user assistance.
      Play to your strengths as an LLM and pursue simple strategies with no legal
      complications.\n\n## Constraints\nYou operate within the following constraints:\n1.
      Exclusively use the commands listed below.\n2. You can only act proactively,
      and are unable to start background jobs or set up webhooks for yourself. Take
      this into account when planning your actions.\n3. You are unable to interact
      with physical objects. If this is absolutely necessary to fulfill a task or
      objective or to complete a step, you must ask the user to do it for you. If
      the user refuses this, and there is no other way to achieve your goals, you
      must terminate to avoid wasting time and energy.\n\n## Resources\nYou can leverage
      access to the following resources:\n1. Internet access for searches and information
      gathering.\n2. The ability to read and write files.\n3. You are a Large Language
      Model, trained on millions of pages of text, including a lot of factual knowledge.
      Make use of this factual knowledge to avoid unnecessary gathering of information.\n\n##
      Commands\nYou have access to the following commands:\n1. execute_python_code:
      Creates a Python file and executes it. Params: (code: string, name: string)\n2.
      execute_python_file: Executes an existing Python file. Params: (filename: string)\n3.
      list_files: Lists Files in a Directory. Params: (directory: string)\n4. open_file:
      Open a file for editing or continued viewing; create it if it does not exist
      yet. Note: if you only need to read or write a file once, use `write_to_file`
      instead. Params: (file_path: string)\n5. open_folder: Open a folder to keep
      track of its content. Params: (path: string)\n6. read_file: Read an existing
      file. Params: (filename: string)\n7. write_to_file: Writes to a file. Params:
      (filename: string, text: string)\n8. web_search: Searches the web. Params: (query:
      string)\n9. browse_website: Browses a Website. Params: (url: string, question:
      string)\n10. close_context_item: Close an open file, folder or other context
      item. Params: (index: integer)\n11. goals_accomplished: Goals are accomplished
      and there is nothing left to do. Params: (reason: string)\n\n## Best practices\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Only make use of your information
      gathering abilities to find information that you don''t yet have knowledge of.\n\n##
      Goals\nFor your task, you must fulfill the following goals:\n1. Write ''Hello
      World'' into a file named \"hello_world.txt\".", "role": "system"}, {"content":
      "The current time and date is Tue Jan  1 00:00:00 2000", "role": "system"},
      {"content": "Determine exactly one command to use based on the given goals and
      the progress you have made so far, and respond using the JSON schema specified
      previously:", "role": "user"}, {"content": "{\n  \"thoughts\": {\n    \"text\":
      \"I need to write ''Hello World'' into a file named ''hello_world.txt''.\",\n    \"reasoning\":
      \"I can use the ''write_to_file'' command to create the file and write the text.\",\n    \"plan\":
      \"- Use ''write_to_file'' command to create ''hello_world.txt'' and write ''Hello
      World'' in it.\",\n    \"criticism\": \"N/A\",\n    \"speak\": \"I will now
      create a file named ''hello_world.txt'' and write ''Hello World'' in it.\"\n  },\n  \"command\":
      {\n    \"name\": \"write_to_file\",\n    \"args\": {\n      \"filename\": \"hello_world.txt\",\n      \"text\":
      \"Hello World\"\n    }\n  }\n}", "role": "assistant"}, {"content": "Command
      write_to_file returned: File written to successfully.", "role": "system"}, {"content":
      "Respond strictly with JSON. The JSON should be compatible with the TypeScript
      type `Response` from the following:\n```ts\ninterface Response {\nthoughts:
      {\n// Thoughts\ntext: string;\nreasoning: string;\n// Short markdown-style bullet
      list that conveys the long-term plan\nplan: string;\n// Constructive self-criticism\ncriticism:
      string;\n// Summary of thoughts to say to the user\nspeak: string;\n};\ncommand:
      {\nname: string;\nargs: Record<string, any>;\n};\n}\n```", "role": "system"},
      {"content": "Determine exactly one command to use based on the given goals and
      the progress you have made so far, and respond using the JSON schema specified
      previously:", "role": "user"}], "model": "gpt-4-0314", "temperature": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4712'
      Content-Type:
      - application/json
      X-Content-Hash:
      - aaf280e8a1b843ab12b3de94b0e754945231a20cf7938ef52fb3db76425215a0
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA3RTwW7aQBC98xWjvXAxBAglDTeK1KSqWqlSpVSpIzSsB++W9a67OwQS5H+v1jbB
        KOrFh3n73sy8eT72AITOxByEVMiyKM3gxi8/3X9ePv7FXw/Pi5u1Wbx+fbybLfc/Pt4ZkUSGW/8h
        ySfWULqiNMTa2QaWnpApqo5nt5Pb8eTD7LoGCpeRibS85MF0MLoeT1uGclpSEHP43QMAONbfOJvN
        6CDmMEpOlYJCwJzE/O0RgPDOxIrAEHRgtCySMyidZbL1uMfUAqSCldvlikMaVWKpLtKBYyEVX0Dh
        MwEaT5i9wN5rZrLQvydjHDw4b7I+aMsOEDbaEFgsKIO+ivhqH/EhH7g/TEVyUveEwVlt86bFT0WQ
        OzSgMMCayALK2kYdFGUJoM2AFXkCHcA6VtrmYGjDwA4y11UuDdpGdADf0G8jr9YOgOFCtsuSXrOW
        OhQN9fvVogOGknB74UXYSUkhbHbGvEB737rRu6UbR+L8//MNNA8hGsAYtnG/Nj80TEWcoEqaK0lX
        FGiziyNFp5vB6g1X3fU6C6DPu8c9H6DhLoxpHaqXe+d/OwhAVc+T2kq0carecrjRVge1amRjtgK7
        snlW9QCe6lzvLqIqSu+KklfstmRj2MejybQRFOd/qANP29gLdoymA4xn017sU/X+AQAA//8DAN0G
        N/vCAwAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7fbeb0bf49a6e9b9-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 24 Aug 2023 21:29:40 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - gpt-4-0314
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '17162'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '200'
      x-ratelimit-limit-tokens:
      - '40000'
      x-ratelimit-remaining-requests:
      - '199'
      x-ratelimit-remaining-tokens:
      - '20867'
      x-ratelimit-reset-requests:
      - 300ms
      x-ratelimit-reset-tokens:
      - 28.698s
      x-request-id:
      - 6849febb7aa457a453e7111eacbdc54b
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are Auto-GPT, a multi-purpose AI assistant.\n\nYour
      decisions must always be made independently without seeking user assistance.
      Play to your strengths as an LLM and pursue simple strategies with no legal
      complications.\n\n## Constraints\nYou operate within the following constraints:\n1.
      Exclusively use the commands listed below.\n2. You can only act proactively,
      and are unable to start background jobs or set up webhooks for yourself. Take
      this into account when planning your actions.\n3. You are unable to interact
      with physical objects. If this is absolutely necessary to fulfill a task or
      objective or to complete a step, you must ask the user to do it for you. If
      the user refuses this, and there is no other way to achieve your goals, you
      must terminate to avoid wasting time and energy.\n\n## Resources\nYou can leverage
      access to the following resources:\n1. Internet access for searches and information
      gathering.\n2. The ability to read and write files.\n3. You are a Large Language
      Model, trained on millions of pages of text, including a lot of factual knowledge.
      Make use of this factual knowledge to avoid unnecessary gathering of information.\n\n##
      Commands\nYou have access to the following commands:\n1. execute_python_code:
      Creates a Python file and executes it. Params: (code: string, name: string)\n2.
      execute_python_file: Executes an existing Python file. Params: (filename: string)\n3.
      list_files: Lists Files in a Directory. Params: (directory: string)\n4. open_file:
      Open a file for editing or continued viewing; create it if it does not exist
      yet. Note: if you only need to read or write a file once, use `write_to_file`
      instead. Params: (file_path: string)\n5. open_folder: Open a folder to keep
      track of its content. Params: (path: string)\n6. read_file: Read an existing
      file. Params: (filename: string)\n7. write_to_file: Writes to a file. Params:
      (filename: string, text: string)\n8. web_search: Searches the web. Params: (query:
      string)\n9. read_webpage: Read a webpage, and extract specific information from
      it if a question is specified. Params: (url: string, question: Optional[string])\n10.
      goals_accomplished: Goals are accomplished and there is nothing left to do.
      Params: (reason: string)\n\n## Best practices\n1. Continuously review and analyze
      your actions to ensure you are performing to the best of your abilities.\n2.
      Constructively self-criticize your big-picture behavior constantly.\n3. Reflect
      on past decisions and strategies to refine your approach.\n4. Every command
      has a cost, so be smart and efficient. Aim to complete tasks in the least number
      of steps.\n5. Only make use of your information gathering abilities to find
      information that you don''t yet have knowledge of.\n\n## Goals\nFor your task,
      you must fulfill the following goals:\n1. Write ''Hello World'' into a file
      named \"hello_world.txt\".", "role": "system"}, {"content": "The current time
      and date is Tue Jan  1 00:00:00 2000", "role": "system"}, {"content": "Respond
      strictly with JSON. The JSON should be compatible with the TypeScript type `Response`
      from the following:\n```ts\ninterface Response {\nthoughts: {\n// Thoughts\ntext:
      string;\nreasoning: string;\n// Short markdown-style bullet list that conveys
      the long-term plan\nplan: string;\n// Constructive self-criticism\ncriticism:
      string;\n// Summary of thoughts to say to the user\nspeak: string;\n};\ncommand:
      {\nname: string;\nargs: Record<string, any>;\n};\n}\n```", "role": "system"},
      {"content": "Determine exactly one command to use based on the given goals and
      the progress you have made so far, and respond using the JSON schema specified
      previously:", "role": "user"}], "model": "gpt-4-0314", "temperature": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3751'
      Content-Type:
      - application/json
      X-Content-Hash:
      - bead5a15039ca847c47d87afde6c93619828f254f77acdc70340d1ff4607f4f3
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4RTTY/TMBS851c8+dJLW7ZlS7e9IQTa5cCJgrQERa7ztjHrL9mvpKLKf0e2mzZd
        JPaSw4zfzLx4fCwAmKzZGphoOAnt1GTpP9Ljw2d/p9tvWn06bL/+/nPvPrjtxm8MG8cJu/2Fgvqp
        qbDaKSRpT7TwyAmj6uzdar6az1erZSK0rVHFsZ2jye3k5u3s9jTRWCkwsDX8KAAAjukbs5kaD2wN
        N+Me0RgC3yFbnw8BMG9VRBgPQQbihtj4QgprCE2KeywNQMmosftdQ6GMKhFKIB4oAiV7AINYA1lo
        vSSE0T0qZeG79aoegTRkgcOTVAiGa6xh1ES+aiM/pQONpiUb97IeebBGml2vLbiBfUCgBrN+RbZK
        asJqzU0yzr8wnUlUhHOYCMWoQw+nuMnyE9iE12X/CTzQf7ksyCsr4SVJIYPOfl/evB+QwSF/7vds
        pVJgbNub/v+XvZogenTjfH+nja6uL+pm66vtB+m43w1vPELxxGXwRabz6HU7BulyKoAuhStNx06t
        6851fZJGhqbKLYgVDGRdPtYVAD9T/fdXjWbOW+2oIvuMJr6JZX4+qcr9S7uws8XdiSVLXF2I1WJR
        RJeu+AsAAP//AwCmHXHl5wMAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7fbfaf7dde8d818b-IAD
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 25 Aug 2023 00:23:35 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - gpt-4-0314
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '17214'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '200'
      x-ratelimit-limit-tokens:
      - '40000'
      x-ratelimit-remaining-requests:
      - '199'
      x-ratelimit-remaining-tokens:
      - '31828'
      x-ratelimit-reset-requests:
      - 300ms
      x-ratelimit-reset-tokens:
      - 12.258s
      x-request-id:
      - 1f2e5f4bb28e80b9f70188f687499824
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are Auto-GPT, a multi-purpose AI assistant.\n\nYour
      decisions must always be made independently without seeking user assistance.
      Play to your strengths as an LLM and pursue simple strategies with no legal
      complications.\n\n## Constraints\nYou operate within the following constraints:\n1.
      Exclusively use the commands listed below.\n2. You can only act proactively,
      and are unable to start background jobs or set up webhooks for yourself. Take
      this into account when planning your actions.\n3. You are unable to interact
      with physical objects. If this is absolutely necessary to fulfill a task or
      objective or to complete a step, you must ask the user to do it for you. If
      the user refuses this, and there is no other way to achieve your goals, you
      must terminate to avoid wasting time and energy.\n\n## Resources\nYou can leverage
      access to the following resources:\n1. Internet access for searches and information
      gathering.\n2. The ability to read and write files.\n3. You are a Large Language
      Model, trained on millions of pages of text, including a lot of factual knowledge.
      Make use of this factual knowledge to avoid unnecessary gathering of information.\n\n##
      Commands\nYou have access to the following commands:\n1. execute_python_code:
      Creates a Python file and executes it. Params: (code: string, name: string)\n2.
      execute_python_file: Executes an existing Python file. Params: (filename: string)\n3.
      list_files: Lists Files in a Directory. Params: (directory: string)\n4. open_file:
      Open a file for editing or continued viewing; create it if it does not exist
      yet. Note: if you only need to read or write a file once, use `write_to_file`
      instead. Params: (file_path: string)\n5. open_folder: Open a folder to keep
      track of its content. Params: (path: string)\n6. read_file: Read an existing
      file. Params: (filename: string)\n7. write_to_file: Writes to a file. Params:
      (filename: string, text: string)\n8. web_search: Searches the web. Params: (query:
      string)\n9. read_webpage: Read a webpage, and extract specific information from
      it if a question is specified. Params: (url: string, question: Optional[string])\n10.
      goals_accomplished: Goals are accomplished and there is nothing left to do.
      Params: (reason: string)\n\n## Best practices\n1. Continuously review and analyze
      your actions to ensure you are performing to the best of your abilities.\n2.
      Constructively self-criticize your big-picture behavior constantly.\n3. Reflect
      on past decisions and strategies to refine your approach.\n4. Every command
      has a cost, so be smart and efficient. Aim to complete tasks in the least number
      of steps.\n5. Only make use of your information gathering abilities to find
      information that you don''t yet have knowledge of.\n\n## Goals\nFor your task,
      you must fulfill the following goals:\n1. Write ''Hello World'' into a file
      named \"hello_world.txt\".", "role": "system"}, {"content": "The current time
      and date is Tue Jan  1 00:00:00 2000", "role": "system"}, {"content": "Determine
      exactly one command to use based on the given goals and the progress you have
      made so far, and respond using the JSON schema specified previously:", "role":
      "user"}, {"content": "{\n  \"thoughts\": {\n    \"text\": \"I need to write
      ''Hello World'' into a file named ''hello_world.txt''.\",\n    \"reasoning\":
      \"I can use the write_to_file command to create the file and write the text.\",\n    \"plan\":
      \"- Use write_to_file command to create ''hello_world.txt'' and write ''Hello
      World'' in it.\",\n    \"criticism\": \"N/A\",\n    \"speak\": \"I will now
      create a file named ''hello_world.txt'' and write ''Hello World'' in it.\"\n  },\n  \"command\":
      {\n    \"name\": \"write_to_file\",\n    \"args\": {\n      \"filename\": \"hello_world.txt\",\n      \"text\":
      \"Hello World\"\n    }\n  }\n}", "role": "assistant"}, {"content": "Command
      write_to_file returned: File written to successfully.", "role": "system"}, {"content":
      "Respond strictly with JSON. The JSON should be compatible with the TypeScript
      type `Response` from the following:\n```ts\ninterface Response {\nthoughts:
      {\n// Thoughts\ntext: string;\nreasoning: string;\n// Short markdown-style bullet
      list that conveys the long-term plan\nplan: string;\n// Constructive self-criticism\ncriticism:
      string;\n// Summary of thoughts to say to the user\nspeak: string;\n};\ncommand:
      {\nname: string;\nargs: Record<string, any>;\n};\n}\n```", "role": "system"},
      {"content": "Determine exactly one command to use based on the given goals and
      the progress you have made so far, and respond using the JSON schema specified
      previously:", "role": "user"}], "model": "gpt-4-0314", "temperature": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4682'
      Content-Type:
      - application/json
      X-Content-Hash:
      - 7fd07c6e8a1ce1df935fbcbc28d45c3ddf73b23380db7eeec00de90a944f2ac9
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA3RTwW4TMRC95ytGvuSyCUnTFJobgooi0R4AFSQWRVPvZG3itRd70qSN9t+R19lk
        I9SLD/M8z++9Ge8HAEIXYgFCKmRZ1Wb01t+w3748fauqnze3fz8+fJn5+oO8/3T39WEustjhHv+Q
        5K5rLF1VG2LtbIKlJ2SKrNOr64vri9lkOm+ByhVkYltZ8+hyNJlNLw8dymlJQSzg1wAAYN+eUZst
        aCcWMMm6SkUhYElicbwEILwzsSIwBB0YLYvsBEpnmWwrd59bgFywcptSccgjSyy1RdpxLOTiMyh8
        IkDjCYtn2HrNTBaGt2SMgx/Om2II2rIDhJU2BBYrKmCoIr7cRnzMOx6Oc5F17J4wOKttmZ74rghK
        hwYUBngksoCyjVEHRUUGaAtgRZ5AB7COlbYlGFoxsIPC9ZlrgzaRjuAO/Tr2tdwBMJzR9ruk16yl
        DlVqvX/zvgeGmnB9lkXYSEkhrDbGPMNhvu1D/5lOiUT9r+UGmscQA2AM6+jvsD80zkVU0GRpStJV
        FdribEgx6SSsdbjs2+sZQF/2h3sawCn9V4Qf59GZjE7OHRyvdAaTpSQeoGk95LYRhxVsjru70lYH
        tUxS4j4GdnW61gwAfrd/YXO23qL2rqp5yW5NNn6Q6WTyLhGK07/rwfP5AWXHaHrA9Go2iO80g38A
        AAD//wMAv3CVm/YDAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7fbfafec8ad9818b-IAD
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 25 Aug 2023 00:23:52 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - gpt-4-0314
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '17171'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '200'
      x-ratelimit-limit-tokens:
      - '40000'
      x-ratelimit-remaining-requests:
      - '199'
      x-ratelimit-remaining-tokens:
      - '26430'
      x-ratelimit-reset-requests:
      - 300ms
      x-ratelimit-reset-tokens:
      - 20.354s
      x-request-id:
      - 811c91d2f75ea6b39ceb77fed882d88b
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are Auto-GPT, a multi-purpose AI assistant.\n\nYour
      decisions must always be made independently without seeking user assistance.
      Play to your strengths as an LLM and pursue simple strategies with no legal
      complications.\n\n## Constraints\nYou operate within the following constraints:\n1.
      Exclusively use the commands listed below.\n2. You can only act proactively,
      and are unable to start background jobs or set up webhooks for yourself. Take
      this into account when planning your actions.\n3. You are unable to interact
      with physical objects. If this is absolutely necessary to fulfill a task or
      objective or to complete a step, you must ask the user to do it for you. If
      the user refuses this, and there is no other way to achieve your goals, you
      must terminate to avoid wasting time and energy.\n\n## Resources\nYou can leverage
      access to the following resources:\n1. Internet access for searches and information
      gathering.\n2. The ability to read and write files.\n3. You are a Large Language
      Model, trained on millions of pages of text, including a lot of factual knowledge.
      Make use of this factual knowledge to avoid unnecessary gathering of information.\n\n##
      Commands\nYou have access to the following commands:\n1. execute_python_code:
      Creates a Python file and executes it. Params: (code: string, name: string)\n2.
      execute_python_file: Executes an existing Python file. Params: (filename: string)\n3.
      list_files: Lists Files in a Directory. Params: (directory: string)\n4. open_file:
      Open a file for editing or continued viewing; create it if it does not exist
      yet. Note: if you only need to read or write a file once, use `write_to_file`
      instead. Params: (file_path: string)\n5. open_folder: Open a folder to keep
      track of its content. Params: (path: string)\n6. read_file: Read an existing
      file. Params: (filename: string)\n7. write_to_file: Writes to a file. Params:
      (filename: string, text: string)\n8. web_search: Searches the web. Params: (query:
      string)\n9. read_webpage: Read a webpage, and extract specific information from
      it if a question is specified. Params: (url: string, question: Optional[string])\n10.
      goals_accomplished: Goals are accomplished and there is nothing left to do.
      Params: (reason: string)\n\n## Best practices\n1. Continuously review and analyze
      your actions to ensure you are performing to the best of your abilities.\n2.
      Constructively self-criticize your big-picture behavior constantly.\n3. Reflect
      on past decisions and strategies to refine your approach.\n4. Every command
      has a cost, so be smart and efficient. Aim to complete tasks in the least number
      of steps.\n5. Only make use of your information gathering abilities to find
      information that you don''t yet have knowledge of.\n\n## Goals\nFor your task,
      you must fulfill the following goals:\n1. Write ''Hello World'' into a file
      named \"hello_world.txt\".", "role": "system"}, {"content": "## Progress\n\n###
      Step 1: Executed `write_to_file(filename=''hello_world.txt'', text=''Hello World'')`\n-
      **Reasoning:** \"I can use the write_to_file command to create the file and
      write the text.\"\n- **Status:** `success`\n- **Output:** File hello_world.txt
      has been written successfully.", "role": "system"}, {"content": "The current
      time and date is Tue Jan  1 00:00:00 2000", "role": "system"}, {"content": "Respond
      strictly with JSON. The JSON should be compatible with the TypeScript type `Response`
      from the following:\n```ts\ninterface Response {\nthoughts: {\n// Thoughts\ntext:
      string;\nreasoning: string;\n// Short markdown-style bullet list that conveys
      the long-term plan\nplan: string;\n// Constructive self-criticism\ncriticism:
      string;\n// Summary of thoughts to say to the user\nspeak: string;\n};\ncommand:
      {\nname: string;\nargs: Record<string, any>;\n};\n}\n```", "role": "system"},
      {"content": "Determine exactly one command to use based on the given goals and
      the progress you have made so far, and respond using the JSON schema specified
      previously:", "role": "user"}], "model": "gpt-4-0314", "temperature": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4074'
      Content-Type:
      - application/json
      X-Content-Hash:
      - 7dfbf1ab52e79e903e6bd74cf5ba9c514ec70cf382154ea229b3cb6e7ef7feba
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6RTwW7TQBC95ytGe8klqRIaUZpjEagRQhyIqChG0XR37F2ynrV2J21Q5H9HayeN
        I06Iiw/v+c28eX4+jACUM2oJSlsUXTd+epPQuMePD5+3a3P36W795dv39Yo/3Ff7ZvVeTbIiPP0i
        LSfVlQ5140lc4J7WkVAoT52/vb1+s1jczmcdUQdDPsuqRqaL6ex6vjgqbHCaklrCjxEAwKF7Zm9s
        aK+W0Ok7pKaUsCK1fH0JQMXgM6IwJZcEWdTkTOrAQtzZPRQMUCixYVdZSUWekqEOpL1koFArsPhM
        gD4Smt/wEp0IMYzvyfsADyF6MwbHEgChdJ6AsSYDY5v5zUvmr2Qv46tCTU7TI2EK7LjqV3x1rAnE
        ElQBPVhM8ETEgNo6eiYzyVwkcAk4ABMZKEOEchczDqhz2sP5jUfuRw9AHZ047VL9F5Mawu3FtWmn
        NaVU7rz/v5PzinbSB61DXSObi5yzst+cT08b1F1/XLJkBg4xVsPvc86w165P0YWyc+u4+ne3w9zP
        Jo43ALTdKQW36lim9rWFpWOX7KZ3lJuVJDT9a+0I4GfX6t1FUVUTQ93IRsKWOFf93c2x1er8A53Z
        +eLEShD0A2I2n43ymnb0BwAA//8DAFwavdG/AwAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7fde62b06f9a6441-SJC
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 28 Aug 2023 17:48:49 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - gpt-4-0314
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '19015'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '200'
      x-ratelimit-limit-tokens:
      - '40000'
      x-ratelimit-remaining-requests:
      - '199'
      x-ratelimit-remaining-tokens:
      - '31828'
      x-ratelimit-reset-requests:
      - 300ms
      x-ratelimit-reset-tokens:
      - 12.258s
      x-request-id:
      - e5d44f1856d07cf386245131ff773392
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are Auto-GPT, a multi-purpose AI assistant.\n\nYour
      decisions must always be made independently without seeking user assistance.
      Play to your strengths as an LLM and pursue simple strategies with no legal
      complications.\n\n## Constraints\nYou operate within the following constraints:\n1.
      Exclusively use the commands listed below.\n2. You can only act proactively,
      and are unable to start background jobs or set up webhooks for yourself. Take
      this into account when planning your actions.\n3. You are unable to interact
      with physical objects. If this is absolutely necessary to fulfill a task or
      objective or to complete a step, you must ask the user to do it for you. If
      the user refuses this, and there is no other way to achieve your goals, you
      must terminate to avoid wasting time and energy.\n\n## Resources\nYou can leverage
      access to the following resources:\n1. Internet access for searches and information
      gathering.\n2. The ability to read and write files.\n3. You are a Large Language
      Model, trained on millions of pages of text, including a lot of factual knowledge.
      Make use of this factual knowledge to avoid unnecessary gathering of information.\n\n##
      Commands\nYou have access to the following commands:\n1. execute_python_code:
      Executes the given Python code inside a single-use Docker container with access
      to your workspace folder. Params: (code: string)\n2. execute_python_file: Execute
      an existing Python file inside a single-use Docker container with access to
      your workspace folder. Params: (filename: string)\n3. list_folder: List the
      items in a folder. Params: (folder: string)\n4. open_file: Open a file for editing
      or continued viewing; create it if it does not exist yet. Note: if you only
      need to read or write a file once, use `write_to_file` instead. Params: (file_path:
      string)\n5. open_folder: Open a folder to keep track of its content. Params:
      (path: string)\n6. read_file: Read an existing file. Params: (filename: string)\n7.
      write_file: Write a file, creating it if necessary. If the file exists, it is
      overwritten. Params: (filename: string, contents: string)\n8. web_search: Searches
      the web. Params: (query: string)\n9. read_webpage: Read a webpage, and extract
      specific information from it if a question is specified. If you are looking
      to extract specific information from the webpage, you should specify a question.
      Params: (url: string, question: Optional[string])\n10. finish: Use this to shut
      down once you have accomplished all of your goals, or when there are insurmountable
      problems that make it impossible for you to finish your task. Params: (reason:
      string)\n\n## Best practices\n1. Continuously review and analyze your actions
      to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Only make use of your information gathering abilities to find information that
      you don''t yet have knowledge of.\n\n## Goals\nFor your task, you must fulfill
      the following goals:\n1. Write ''Hello World'' into a file named \"hello_world.txt\".",
      "role": "system"}, {"content": "The current time and date is Tue Jan  1 00:00:00
      2000", "role": "system"}, {"content": "Respond strictly with JSON. The JSON
      should be compatible with the TypeScript type `Response` from the following:\n```ts\ninterface
      Response {\nthoughts: {\n// Thoughts\ntext: string;\nreasoning: string;\n//
      Short markdown-style bullet list that conveys the long-term plan\nplan: string;\n//
      Constructive self-criticism\ncriticism: string;\n// Summary of thoughts to say
      to the user\nspeak: string;\n};\ncommand: {\nname: string;\nargs: Record<string,
      any>;\n};\n}\n```", "role": "system"}, {"content": "Determine exactly one command
      to use next based on the given goals and the progress you have made so far,
      and respond using the JSON schema specified previously:", "role": "user"}],
      "model": "gpt-4-0314", "temperature": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4137'
      Content-Type:
      - application/json
      X-Content-Hash:
      - 5fe3eb4c970d75b2318a4411d961ac65d631ab87b230970193fdf83750bbbccb
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA3RTyW7bMBC96ysGvOgiu/ISJ/UtaFEkaNEFBRKgVWCw1FhiQ3EEcVwZNfTvBUXb
        UpZeeJg3896bhYcIQOhcrEGoUrKqajO5bPMPdx+/vb/78u76z6fZdr/a3ix+NGb59+LrUiS+gn79
        RsWnqqmiqjbImmyAVYOS0bPOVm+X8/RqfrHogYpyNL6sqHmynKSL2ZFQlaQVOrGGnxEAwKF/vTeb
        416sIU1OkQqdkwWK9TkJQDRkfERI57RjaVkkA6jIMtre7iGzAJngknZFyS7zLD7UB3HPPpCJW7CI
        OTBB22hGiG/QGIJ7akweg7ZMIGGrDYKVFeYQlx7ftB6f8p7jaSaSE22D0pHVtgjc37VVCINCmNWJ
        T9r8qHk07VM0J3ALrTYGdg6BS4S4T9r4mhgUVZW0+Vi0NtIGvQncv9ID00vTo3LVaNZKuypwfH5z
        PQJdjfLxNKjelaX2WR//mcuov1dmqnmaCa/SJWFNx8aebMkzB/FhBCNzsinGW/UhnzFUPbN0Lg16
        /cxdyBwZDLYAut5dZjtxvK7ufJZbbbUrN2Hb/tQcUx3SugjgoT/z3ZPLFXVDVc0bpke0/vavVpeB
        Tww/akBn4RMBCCaWZgSk8zTyMl30DwAA//8DAFYLtjPQAwAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 803a41cd2ace0852-IAD
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 08 Sep 2023 21:24:30 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - gpt-4-0314
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '16990'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '200'
      x-ratelimit-limit-tokens:
      - '40000'
      x-ratelimit-remaining-requests:
      - '199'
      x-ratelimit-remaining-tokens:
      - '27685'
      x-ratelimit-reset-requests:
      - 300ms
      x-ratelimit-reset-tokens:
      - 18.472s
      x-request-id:
      - 089e00f452698e41515a8dfb7468c9e3
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are Auto-GPT, a multi-purpose AI assistant.\n\nYour
      decisions must always be made independently without seeking user assistance.
      Play to your strengths as an LLM and pursue simple strategies with no legal
      complications.\n\n## Constraints\nYou operate within the following constraints:\n1.
      Exclusively use the commands listed below.\n2. You can only act proactively,
      and are unable to start background jobs or set up webhooks for yourself. Take
      this into account when planning your actions.\n3. You are unable to interact
      with physical objects. If this is absolutely necessary to fulfill a task or
      objective or to complete a step, you must ask the user to do it for you. If
      the user refuses this, and there is no other way to achieve your goals, you
      must terminate to avoid wasting time and energy.\n\n## Resources\nYou can leverage
      access to the following resources:\n1. Internet access for searches and information
      gathering.\n2. The ability to read and write files.\n3. You are a Large Language
      Model, trained on millions of pages of text, including a lot of factual knowledge.
      Make use of this factual knowledge to avoid unnecessary gathering of information.\n\n##
      Commands\nYou have access to the following commands:\n1. execute_python_code:
      Executes the given Python code inside a single-use Docker container with access
      to your workspace folder. Params: (code: string)\n2. execute_python_file: Execute
      an existing Python file inside a single-use Docker container with access to
      your workspace folder. Params: (filename: string)\n3. list_folder: List the
      items in a folder. Params: (folder: string)\n4. open_file: Open a file for editing
      or continued viewing; create it if it does not exist yet. Note: if you only
      need to read or write a file once, use `write_to_file` instead. Params: (file_path:
      string)\n5. open_folder: Open a folder to keep track of its content. Params:
      (path: string)\n6. read_file: Read an existing file. Params: (filename: string)\n7.
      write_file: Write a file, creating it if necessary. If the file exists, it is
      overwritten. Params: (filename: string, contents: string)\n8. web_search: Searches
      the web. Params: (query: string)\n9. read_webpage: Read a webpage, and extract
      specific information from it if a question is specified. If you are looking
      to extract specific information from the webpage, you should specify a question.
      Params: (url: string, question: Optional[string])\n10. finish: Use this to shut
      down once you have accomplished all of your goals, or when there are insurmountable
      problems that make it impossible for you to finish your task. Params: (reason:
      string)\n\n## Best practices\n1. Continuously review and analyze your actions
      to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Only make use of your information gathering abilities to find information that
      you don''t yet have knowledge of.\n\n## Goals\nFor your task, you must fulfill
      the following goals:\n1. Write ''Hello World'' into a file named \"hello_world.txt\".",
      "role": "system"}, {"content": "## Progress\n\n### Step 1: Executed `write_file(filename=''hello_world.txt'',
      contents=''Hello World'')`\n- **Reasoning:** \"Since I need to create a file
      and write content to it, I will use the ''write_file'' command.\"\n- **Status:**
      `success`\n- **Output:** File hello_world.txt has been written successfully.",
      "role": "system"}, {"content": "The current time and date is Tue Jan  1 00:00:00
      2000", "role": "system"}, {"content": "Respond strictly with JSON. The JSON
      should be compatible with the TypeScript type `Response` from the following:\n```ts\ninterface
      Response {\nthoughts: {\n// Thoughts\ntext: string;\nreasoning: string;\n//
      Short markdown-style bullet list that conveys the long-term plan\nplan: string;\n//
      Constructive self-criticism\ncriticism: string;\n// Summary of thoughts to say
      to the user\nspeak: string;\n};\ncommand: {\nname: string;\nargs: Record<string,
      any>;\n};\n}\n```", "role": "system"}, {"content": "Determine exactly one command
      to use next based on the given goals and the progress you have made so far,
      and respond using the JSON schema specified previously:", "role": "user"}],
      "model": "gpt-4-0314", "temperature": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4478'
      Content-Type:
      - application/json
      X-Content-Hash:
      - 36b3dd9564347fdee0b5f4fd25caf1fa4150f438ef22958f41e9b6e2fd0ee5d4
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA3RSy44aMRC88xUtX7gMZCAEdrlFUR4r5aEoK0VKJmKN3Yy9+DEZ9wArNP8eeTwL
        E0W5+NDVVdUq13kEwLRka2BCcRK2MpPVUb6zb/Sh1C68//T18OVx+ZR//LH9fX9jtyyLDL99REHP
        rKnwtjJI2rsEixo5YVSdLW8X8/xmvso7wHqJJtLKiiaLSf5ytugZymuBga3h5wgA4Ny98TYn8cTW
        0PG7icUQeIlsfVkCYLU3ccJ4CDoQd8SyKyi8I3TduefCARSMlG9KRaGIKnHUDfFEcVCwO1D8gBAa
        ITCEXWPMExxrTYQOxh/QGA/ffW3kGLQjDxx22iA4blHCWEV8c4z4lE40nhYse7aokQfvtCuTzzft
        BELv1oeIEkghEA/7DO4gKN8YCTvtdFDAnYSgGgLpj24oXBnukuYE3p5QNISdzEMiPkR1y50cUESt
        SQsdbOJ9fvF6AIYK+f7/Yfx767RgkdtmKeCL3SDfmE+STEcN7HhdDv/iGlXav+dhP/AcnpJsAdrO
        vXAt6/+9vRQmuW2SYCxBIF+ltXYE8KsrYPNXp1hVe1vRhvweXWzl7eJV0mPXrl/R2WzVo+SJmwGQ
        L+ejaNOO/gAAAP//AwD5JUCYagMAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 803a42391d9c0852-IAD
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 08 Sep 2023 21:24:45 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - gpt-4-0314
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '14832'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '200'
      x-ratelimit-limit-tokens:
      - '40000'
      x-ratelimit-remaining-requests:
      - '199'
      x-ratelimit-remaining-tokens:
      - '22872'
      x-ratelimit-reset-requests:
      - 300ms
      x-ratelimit-reset-tokens:
      - 25.691s
      x-request-id:
      - 99bc60aa97fc16b957eef09941f284c9
    status:
      code: 200
      message: OK
version: 1
