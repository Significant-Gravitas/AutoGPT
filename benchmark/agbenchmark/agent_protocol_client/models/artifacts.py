# coding: utf-8

"""
    Agent Communication Protocol

    Specification of the API protocol for communication with an agent.  # noqa: E501

    The version of the OpenAPI document: v0.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401

from pydantic import BaseModel

from agbenchmark.agent_protocol_client.models.artifact import Artifact
from agbenchmark.agent_protocol_client.models.pagination import Pagination


class Artifacts(BaseModel):
    """
    Artifacts that the task has produced.
    """

    artifacts: list[Artifact]
    pagination: Pagination

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Artifacts:
        """Create an instance of Artifacts from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Artifacts:
        """Create an instance of Artifacts from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Artifacts.parse_obj(obj)

        _obj = Artifacts.parse_obj(
            {
                "artifacts": obj.get("artifacts"),
                "pagination": obj.get("pagination"),
            }
        )
        return _obj


Artifacts.update_forward_refs()
