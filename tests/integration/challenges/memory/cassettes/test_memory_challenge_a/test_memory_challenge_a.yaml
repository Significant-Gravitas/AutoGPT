interactions:
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3284'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: "{\n  \"error\": {\n    \"message\": \"That model is currently overloaded
        with other requests. You can retry your request, or contact us through our
        help center at help.openai.com if the error persists. (Please include the
        request ID b6a7095cc0e76b9901aecd234de4f5b4 in your message.)\",\n    \"type\":
        \"server_error\",\n    \"param\": null,\n    \"code\": null\n  }\n}\n"
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7ccfc7929fefe287-ORD
      Content-Length:
      - '349'
      Content-Type:
      - application/json
      Date:
      - Thu, 25 May 2023 18:18:42 GMT
      Function-Execution-Id:
      - yvvl1pjqkaam
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '30015'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      X-Cloud-Trace-Context:
      - 92320c9bf2c16a55143abddee3e4aa6f
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86494'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.336s
      X-Request-Id:
      - b6a7095cc0e76b9901aecd234de4f5b4
    status:
      code: 429
      message: Too Many Requests
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3284'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6SSTW/aQBCG7/0VoznbCAsFiG/NqVHUA1KiqqortKzH9ob9cHfHBQf5v1cbQ5JC
        xaXX+Xqfd2YOqErMUTaCpWl1uni4bV++3s2bpy8Pptyult9+fZ+v7lbb5/7xNyboNs8k+dgxkc60
        mlg5iwlKT4KpxDybL2+ms+ViliVoXEkac6xbTmeTm5Q7v3HpdDbNMMEuiJowP2DrnWl5zW5LNmC+
        mE0TfJ/9Fs/mWYLsWOi30PI2GxKUjVOSAuY/DmgonMZ6pwlzFCGowMJyhHSWyUYDh8ICABTIjevq
        hkOBORyDxwTtOQYLvIfQuE6XEFh4hk0PnkSpbA3cECgb2HcyooZ1NuE9Q6U0ATsoickbZQl2jWAQ
        Y1HMsNgSWNrzpMDko6onEZxVth6lH68IRDNCxXlNnCWjc9+DspXzRsTyvxnGsj1DYGrDuXCrhR01
        U3gKY3W0uT5qGSNsGQfG4DXjRWFT+GyF7l/oou4a0RmQ9IqVVMGcjmCJXgHIhs7HZsFwD8JA5bR2
        u3/dA4SUnRdMuoeIT1WlpCLLuj/3H1oS25PUTmn9H9e+2PQoNCSnpzuu8+LnrDA0Mryt/gxT+Pr8
        VcdErH1vv8Q8QbyCHHkKO+CQYKWsCs16fD3MMbBrMUFlS9pjPh1+Dp/+AAAA//8DAKcjlwMpBAAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7ccfc8867f9a2304-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 May 2023 18:19:09 GMT
      Function-Execution-Id:
      - pbmesm0aoa9z
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '18581'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 244d650faeed742e67c771ab39ea3909;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86494'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.336s
      X-Request-Id:
      - bd98d60ec0822b964eb683bbb670db8f
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Write
      a concise summary of the following text:\n\n\nLITERAL TEXT: \"\"\"This task_id
      is 2314 Read the file instructions_2.txt\"\"\"\n\n\nCONCISE SUMMARY: The text
      is best summarized as"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '294'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0SOzWrCQBRG932K4VtPQn7U2FmWSiuuSlu6KEXGydWMJjNp7hUFybsXobXbA+dw
        LvA1DFxjxXV9m1Sr++/Vgnnz8XRoqmqxeCuWp339/tC/vD5DI2725OTXSF3s+pbExwANN5AVqmHy
        2XyalfNqWmh0saYWBrtekjKdJnIcNjHJyiyHxpHtjmAu6IfY9bKWeKDAMJO5xn/6hvOZhkSx7Y3M
        JqOGa6J3xDCfF3TEf80htgQDy+xZbJDrYQxC4XpvlVg+qJOXRi0fVVHmEyVRDWRrJQ2prW9J+cAy
        HN31gddFKmdJMWpsffDcrAeyHAMMWGIPDR9qOsNk49d49wMAAP//AwAqXzViVgEAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7ccfc90cfd676375-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 May 2023 18:19:14 GMT
      Function-Execution-Id:
      - yvvl4c81ashb
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '2097'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 6232341524f6b478562ccd013bfb5708;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89456'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 362ms
      X-Request-Id:
      - 598ef1969eede681b5f5554e147d12e7
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["This task_id is 2314 Read the file instructions_2.txt"], "model":
      "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '132'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7ccfc91e49f486d5-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 May 2023 18:19:15 GMT
      Function-Execution-Id:
      - pbme4ambn2d3
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '156'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - c0d4388eaa5635db1c89b13a41bd4308
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - f01268b23b94415c41df7d0463c49b41
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "a task with ID 2314 to read the file instructions_2.txt.", "model":
      "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '133'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1R6WQ+zurbk+/kVW/uVPgpTsNlvEAgzNkMG0mq1IAMJCSEMtsFX97+3ku/qdvdL
        pIBD8LJXVa1a/o9//fXX313VXM/T3//89ffrMU5//4/vtUs5lX//89f//Ndff/3113/8Pv+/kde2
        ul4uj3f9G/67+XhfrvPf//wl/veV/zvon7/+br2rT1bEM3innc0WXkRwIO82FEJy240JTK12oc7e
        XIdTdXKv0FZ2NsU08Sx201gGyeYzUy/uTlWva0kP8T1wMErFQ8MC1UrAZ11esFUcloGV60iGN1ip
        ONrIJ77E6SUAyqR0pMu2z4EdrHsNryITKXb5CKgpzhksBvbE/tM6h9wMWQk/xzejDpfqgfWHYIGh
        v0fYDGo9ZMKqsWGxMidqBGzgDPnDBoLtvMFRm0vhBN9Zr7/gKUaqPSScrXfyAnX3zolyP4Z82SWF
        pgkD5thZbY5gmS7lAoNgsvHWzJOcsRiMoM4mC2PbfYRT//EYaI+RhDdpeqmW8BQ4YDnhHXmdHD8k
        swEP2oPPa+oLZMq5BE8OUHYyIeQF7Fw8Z2kNLoNWoYVEl3ypbWboU/XcUvcgsYGLjX2GdXqhON6/
        5maq5zXUFDvd05CKZiWGzYnBoxzusfuyDpyuzp0IGci3OHjnFCypKPfrkz4o2MrSTSN2vZgBxeML
        uTG7bJaToRjQi+IzDbFtWGJhrMX1lNgN9aZnV81FLRba1lbO1PbtMCefxxLotXx/YeuVV9Yy1Jsr
        eK+qDK2+8WD0QgVIhM2MN5Gx4j23TE3vZZ4jiRplOIlLWsLEFjoauKse/Fmf/nhBGB1PviXp690Z
        9pkwU7STtg2zjKwALvEG6mptDWZ6fXoAU22mKBpxrkwsYbr1KBmS1cWvaDveFlh12gFHa10ZuDG1
        Zwg1o6JnwozqieqHDSJ7xPhmuw+LQifUoL6TLVTFXcPZ42wnMGahjMCTZwNh73cPVdFIv/tBAXNk
        7cr1DbcVNff9Jief9TqC68vziX2bHq15ibwIpA9Voag+zJwm/JXA+LV+Ix1H48AOSWvrazcv8WaA
        qFmMVn3A8FUG5B6dnmD0GqCC3JVDbJ2uJ8D6VdgBoV698FZMj5xpZ/MJD2faIM78IZ8MCErgWehB
        w7qHOXv59U5XvU+CYyK2w6yO2gbY5ijRKEpiwANZceDM1D2aZlvKmactEOrj+4OmV/MJOVYfj9XV
        GS1qgkfA59qbHV0YYo69Zx5wSfh0CBT7S4mRPCFr6QulgyB59qhdTna1ADW0oZ1liNrZ3gNMbw9X
        2GZjQYDz3oGFCoSAsrjdMFoJw7B8HF2EuQBkxA7EypdmMCOoT6KO1C+eEPamPVTXbEMDXCthf3h2
        GWQy62i8RLAhQA0dcN5ce+wkcQvGzbgR9GzaNISp2dEa5WN71qi8DtBTPbhArJt1BM1Pt6YhVpf8
        cJyfIgxtccYmn/yGtdXDg/AWcbrhF41P0uHigFVmH7HD7+HA+xOX4W6LTVJdyaaR150KQdQ9ZrwB
        bRouue844KEtAkZ5svAP4p0D9ce+ohuVFM3cDeoV/uJnbLvnsOSKjaCYoxua/THg7Pv+UAM1x440
        l9WIxfkM4eOmI81RrGF+0E0GtTMi2PHFO5/KaKMCRSpdagFhzCcvno0/+R9fZRwuavB2oFNtbGrW
        1rsin5DbsJJPhCIamZzVkRZALngdtsJn17Ai4z3MnVahpj/2nAnTJ4OFK2zQoss3zpu1L8Ci3XCK
        m4w1DLJCUNft+0aYGZ5yftZQBE8vNaU+2vnD7N0WEeI+NKgbeQcwPxy/hKqQ3Gg2x1Hef9cXbG6Z
        h8Q0vg9U1MIavvT+TuDlMDZz//EWKKrJHke709Pi1iFOoFI+b9To7QTMWuE9YEIXjGQu1c0rsnYF
        LAPo0svRnPhwVQ4P6CK5xZEosXx8BJszrJrgRcMocgfZKp0dOChNSGbNIcOkwDbTut3Fp4V9BJxK
        8GTDRlQHauTTrvoUtVjCiYMtjXZbGn6U/FUCfXx9sD/W72o+XomoxW8P0MBRmoaxm/6A6bvaEeGQ
        mpwtjrPAMGgfeDt0tsW0DwqgNzKJuitHsJhg16V+jMU9TdP7aPF7pjJtjw8TjQQn5sy0Ageshy3E
        VnJPq6lrQQQiH42o25lCNdXe2oGr8+6Fj9bNsqS1wGUonW2FjLuTbdVuqtlwSVCJxI84NsQ/wBrS
        3O6QvrsE+bLyHyLklxfG8bMyOTu8X57+nT+2Su1g8e5IMu1xZzY2zBvK5ffrLv7ijT2oSaCnt+4A
        87eX0ItxODccPAwE5QN6YjPTvWqx5rjQbsX7QE2+vQ389u4T7do/XjTK6nPOTqOXgR+/hCE9h1NA
        bQgxVWdscbPhzJyNSI/j9o1kWuwrHibWAlk6Lvj6As+cacdoBx9pNFCk6mf+fX4GDOa02E9Na/jM
        tl5A48Mripw8yGdPnjUYmGOAdwDV1UzZC2rm3jsTi0uyxbeXxNHfkm8jGBdS2B7Lif3JR3ZtngPL
        qmCE2WQ0NIx3iJOfXlCEk0kju4qaEQBXgC3jPhrjsbfmTyCov/H4Ft4UfruYqa3rnRthc0mnnK+2
        dwbJTTBoMCbFwEKtkOEXfwmU/G3Fwua0gK5EGvXN492a+cleoB85GjaC84ETo1Vr+NsPL3tV5fNh
        1RXwEZGYWr06DfMPH+TkzJGmpG7OhsbdwVHKAI1xNDa8vrwXCMWkJ5ImpM2cfcIraAqFkv5wby1y
        nJ8yhMnZw+4unazldAYH+Lsv5vPLWvJXUIL6rKfUuK1qwDqH9fAbT5zu+0f+mz84N4ZFsbL9VFP7
        eWhASuUPuX/nv/TFqgcQDSX15LgC/Lavr0Bc6ic9HC5S9flg6P3whHze2G94Gs2CLl7OE3mkqZ6z
        Bw93EAaejvfT88LHAsAHWF/aJ0X+al9NpRQu8JW+W2qImmkRNXjbcCO0MWLK1R6kFMsinKViwQ5m
        Vc6u57aAfbUakFBvIO9IMhQqaBROA3fYA15CXQVFFYfYiyHK+f6adtC9nyTqLdKWL7fTvYapv2uQ
        dluagUITddrWls7Yvy7Cf+mHSdMCsvajRz5zFsrAbpeBLGE0VWN+KbI/8cMYWtasmEMLPscXI6rj
        xtZyHN8tlGl8pVuVWJb0cMwSBMZV/q533EjgFTtasz551KCfJqd0+thaBcMbYl/+ma+XvlUc7eBT
        w7CykB2Pqgbp8b2l0eLJOV1tPwzs9dOVzPv+Uc32K0P6CBODRj4WwPf3T/hOXERet8Nx4LKSy3qt
        LGu0sO3W4v5TSqB02YXYXhG9Gct3uAE9yBkS14sd8r2UEN041Bm+bR606iVS7ODr49nY0bWkYfTy
        FuAINiOZZ98JuVBWCaS8M/EffKSrXoO6UBzwoVF8i8nbZweKk66gZdea+WS/SgQKrUnIfi33FR+4
        d4bbp3//8gfjXHXIZl1NJccodGEzgzzMoDX2At2k63dFx88Wgm5PLkhIxcPwzWcIPZescKScOKfW
        ZO9gfi9uGBV3Nszb5cDA1SEWjR7Blc/+uCoBem9ORKWizGfnMmUgeNUjrarTtVnUgNpgKwmIejEk
        1fQJZA1YFy37kx/05KhXOK/XmHyk+cmZu2IILnsY0nMOi2a2URXAn/4Lok4YyE9PvMv9mWJJf4Ts
        6ZbLH7wJtm6Wy/NHRwCbsklIOa/C0QloBu/eIaPWeaMPi31PA11Z9XvsU7vnPBwNW7+fRYrLJx2r
        hVu+BnS34UTZWC2YCqiOwH18fLT6vi+7tLWmyyAr0fsgJY3SjkcGagsecc4uRiWZihzAh5zcMZJe
        Dp83K0OAcCe80FpvnVA6K6cDvNz7GL191Qt5LO8EsDJrgcZj0oSfK30WOr/KDVkaXuTzGzwJ9OIr
        w47RPCvOVwYDjb5+0fCStTmPQYagSYsesfx0q/ib90/oDfc7Yv6ONjPitQOhXUVo3DacdxYpHvA4
        AAeHL/c9EFoONngeL2tqzK9LSG/r0YGfy/FOMfFqPkfjPvkz3rgDrSGvtDwDrV+ViPfPYmBLYmZA
        WJaMRkL5ALyazE6XV4vy5cs9F5072UEjuBzw5lMM4fyW6RlIoIDU0uSttRziTwQP3XL74VH1Rw9R
        3pvYTuN7w0jYBqBKjyo1+3MUjgEOCvXHn/4YLdUs0/sIhdjf0JIYPv/WQ1dgIimlzgRP1qI36RO4
        8SujOO+QxXcGXn56HSODHPkcFrEGjun2hkNx7sMRLY0Gv3z41bcZbyM7aeEuX03oHsJTzsRbVUKx
        gAk2sw+v+OIrouaO6yOS9RY0LCn0ANaL5dFN4stWl/qGCue0TeKVdll98XBGGnuuAFoN7gwmziwZ
        9m2sYbezt5ynGnPgpsstIgrtofqz/9exFVK7VuyQnkwQAVOLMrp9HJ1BUsdlA8OP+sbezrxWX//i
        DP2tK2HLUAifW1J7+lcfUvs+yPm026WCfrSeLk4i0x/k9KI8oaDWFoJPy2m4GjYJtNy3Rz1s7wdW
        fZJWZ08d4Pjc1s1y018euG0PMWLzS7cWS970sDitFMSytAhHt5sD+L4qayTHkQLG5+ncagBxiO2m
        eg+snQZBi1y9wJvHqrXmHMQJsLrgTmPjcB7m47WVwVvTJPz7zmqJb/48b7oFz3D+zg+AsxMhXf64
        YLiDudegBz5kWW+mZrgq1wcAZzvCxip/Adbagw087nz1hroZvhXzVXd8fCRKUTbVkuxZop+cNqKB
        kr4rsj1XGohdWabR/h5W8sU4a8CKd2vqbunMqdhEZ/jEY0Y3unwDS4jdJ/TueU6d51AN0xuMBH79
        ICLMZzawVdMyaDl7kUbkHFbziLON/tWv6Bju7IoJ0z351X9Ek+6yNVP35cDyGidEkqUqJ4PiP4Db
        lRo2TcUfvvlsQzyUO7rdfXQwaf1mB9r96o68EV4rFmqJrJcfQ8XRtsnB+Iuf/jhWNCaiM0w2PGVg
        M/KaItEPGlZHSwC/eINWdalavPXOHjhAq0PwoL8bMn+kCH73K41PKRzYYd/s4OooemQ2qjgnV9Y9
        gRNcBwIO63s1BY5twwofNoiqcQL6FaodXauniOLD3rOW8LRx9FG03tTM53IYoGOpYGeQJw7Xr3O1
        DMjroR2uLBrrhzufexA84ZePCXfdSz5/5wvDj/bGLj1XQ1dfOdS/fgQeBWcC9OMuhrYdvBYfQG+C
        L3+qWmCvcuzK/n5gOFTbn/7Em/S1VMNxuRswvlcBkj9ey+mPP3/5gYgaASk7+j3si/FB99TQwhGL
        6zP44hl1H9wL5yUy0B89lQZiFs4PMwrgV++jJX0t+RJ3OwQDjO8UO8NrGK/4LsIghAV5rxwhnOG7
        7H7rS/hhvoFnfRJG+POv9DGxrMXA6ysQxptL//h190Yu/9RXxsX1qrmMAg1aYyfQtKHZz69b4Gfl
        IWo21cXicXy2oWOP2h98mNVSRSCNFYMouzS2uDaL5z/4GUfdx+J5EGRwh28Yycf1PHS//UkL+YSk
        YUfDOaARBIs3ALIO2ZbL9j31YPl8VIitSf7zDwms5eZF1tJsc6UzKNJoe5yRhsXIYu1h1KB4uU6E
        +8YrnN/PqYf74tihS8ySSvnWU8CxiYYG++hUdFEkCD1P+GbCZzOIo3IgsNvdfGrvXkrDQWh6sF8y
        mXABAWvabYoA/vR0LMXDMPdPq9bfcllgL6qXcKyZvsCV4sXUea6ShofrqAOCvqkx3sc1/8b7DFNb
        dOjRePcDMc/yBkr1a4+jb32zXFnXQoekMd30opsviv44wzkwZ7xVSxQydSMK8ItHqMvvNWBjnwV6
        xvKJurogA+7uGw+qbgWpdX+zsA9cL9PoUk443PLHQPwJtD++wlH0fHBOdrszNB8fkZofg4KxM3kB
        pcPRoXgcnwMP3xtRJ8fp/ccPY0toG9Cxbi1ZdHkF6HH5bOBbU6WfHq8Wv5N3sLvSI46lu9GI13vT
        QT8rt9RwbQMo0LE0SGEHqFkgJ5RzHznrLLoE2BdIXI39Kuwhci4GtcMOAQ2olg2r7BUhpRRasMTN
        FcLiXh8wEuRnvjQ4UiEeit1PPwzUB3AH+boP0etxbAdmzl4EjtHbJFoEecPdsUfgIVkxkYtNZ82F
        As4/Pxd7+4s2DF++BV8/h25B5jTzl8801zraX3xO+fJqdgm4Fa/D10+YOL+DudP3HTCRsBLCZnLC
        4Qy1OXmhlb5Y+ahK6g7GG3f70z/WkkH/Cg/PZIMv0r1u2I5mtpbF5EqD3SxyytKRgZeiMRohcc6Z
        KrGD7r79Fgdt2A0ss8NeQeMS0PjrPy6/evqHF2ZT6eGnLhcNljx16U/ffC7TVYakEABS1oE9MAMo
        CB4950m//kM1G6Y6wlA5reiW+yxfdHYNwLe/QLeWdR9Ykivqz5/G293nAqYUyzI8WOSDkXY6WWxn
        5gJk8HEiS7p2c/k+qZp2idoDUlcLyemJzgeweh1ran/9kolo9Rl6142PNM8zc9E6nq4QgCJFoscO
        1bJ/lCM83jsVu7n/al4/f2gVzhFF76MxSEL28cAs9w4Re+8+MOMjFfAcwwj//LAlXlUZ6GFjYzu/
        JJZytB8aqCy5pli73PLpJewKuC/2HfYvwhhOyWZJ9NofPeq0rgKW227M4E6YdxjDgxuyjWAv8P7u
        jtQJ4Mea12u5hdY9PJOW34dBkuwqA3ZvidixXJfLQPd22ucm+9jbz3hY1lf5DAXdqImSvDYWK/d+
        9NvPRFaXTzWeRiOD6J51ZGHr4x8/QYs2+P3tF53C4csvUDSrhawlvwTL1jg+4aV0CTVNfBvm1ugN
        LXlmEw2wOFpMx7cCfEq7oFE8BtY8qqUG5/IVYHuZ9yH5hMABIlwW7KR7Eo6t3TjwMM8lRlfHCjma
        byMYd9ODbr/+B5fyBEEtFWpUbzt74JtcIdD1HYkolLFm9DRNgMdY3mPffdOGh0m4wAVsTCLcrydr
        mQ24A8/t1caOEstNB/XLA35U3//pbYuRd38FTbm1KL7Lu3xGx4H98ceNUM1DfhM+BygeR0gt+bTm
        XdfDBKgL03H+rbfmj6obgG/m7ptvTcXOz+oAfeNdIEhYndPtpXCgE1ORuvChDex8u9o/fiVvIQv5
        vHo+IIhHbUSfrXKtiHQ8JX/qQYtd6mqI5R3Uv348RswQqyWa0qv+WoIV9q6ksPg05PUv3+lu9zo2
        ZPCtP/4mAtXpOoi/eveXj9aXj/7osdh3AhzR59KQ8uapsPLblNqb45yPzp0c4OaeC/ir78P5q6e0
        w8xLpG6qTfibL9SF8kDtFbk0DLqFA+Xkykljhg3gbbmHOnxcdOxqrcH5QKwI/vpRhpopFnO7dQBM
        +20RtgHBz68P4BxYM1qH7MWXoQ6u8P7uj0iWtzhf1pJUQ4z3BQ7to5NLwcMoIc4VmQbTuAPffCWQ
        nt0HqjW5bBZ/JZVQNE8Lmiic+NcvvoIt3vZffC4bJj6LHrJMcCjWlyanRUce8J1s0dfPeIY856EH
        v3qexuLWzuX9Ol2gHudP7H/5ns+m+lh/+2OE0Y+VT2Ob2nBQtC3eVsJ9UOZcO/zxp3/6jcWoy6Bm
        Vi729SwN+2HCG2iuBAvdTIeH0/29OsPX9XDG2xoE1aKzQwC23SAQnn7U5tsfZXBvSSG1CzIBGsgr
        G/z420zvY8jFKC5A9Fm22Pqc54p++42gcAjBm9qdBrotShEc5FT5g0d8Lc8jTPzbFt2eSlPxUDA1
        PT2/RqKDSxnyuZ9LPX16Ib3eUJ8vU1hAKFN8RcO330IfnpxA723ZOHqFE+C47UbYCeYZu+K0rr56
        JdC/+gs7fYKsdvCtAmrhsMf2rD/4KHrnHfz2/4h49IHF02b+9nf5Bgdjojb0F7/+glY41jcRoMmZ
        INAekUQg7NOBwd2uh3F0zNF26J4hU4x3oYuu32AXynSYRT+pwWvxVjRcv2DOfnqTtvsZG80wgPmV
        HDKYBOSEsaRvrHFf1k/ovsOWuod7NfC1vCbw5xfY7O40km8JDzBkMqYh1Ix8OfGlgF//8Ot3tNYc
        OLYD17EZ/vR9zuZZ2Wlp13U0ip4bII1qpq6l2SMYb/GnmrOPdYWFON+IqnyKkOVOisDXj6cZifR8
        +VxEDazHffLH7/vpb/1c3Z7kgmtzkAInsuEdORZaC2WRz5GX9vrfv1MB//mvv/76X78TBm13ub6+
        BwOm6zz9+7+PCvy7vJT/FkX531T+cxKBjGV9/fuf/zqE8Pdn6NrP9L+n7nl9j3//85ek/Tlu8PfU
        TeXr/73+r++//ee//g8AAAD//wMANss50OMgAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7ccfc9233c9622cd-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 May 2023 18:19:16 GMT
      Function-Execution-Id:
      - yvvlnv17ahsb
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '18'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 23e5ab6873bf9bde0d2d32702adcf101
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 4f7afd2da27d1e26072a09f6de91c9d4
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file to determine what actions
      to take next.\",\n        \"reasoning\": \"The instructions_1.txt file contains
      the necessary information to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_1.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will start by reading the instructions_1.txt file to determine the next
      steps.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: This task_id is 2314\nRead
      the file instructions_2.txt"}, {"role": "user", "content": "Determine which
      next command to use, and respond using the format specified above:"}], "temperature":
      0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4429'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4SSW2vbQBCF3/srhnmWjB3XN72ltKWmFAJtIFAVs16NpU1Ws8ruiNg1/u9lLTsO
        NnVe53a+s3u2aArMUFdKdN3YdPJ99nx3+202XhYfW3n4+en5/uvDuv/45cfn0R0m6JaPpOWw0dOu
        biyJcYwJak9KqMBsMJ6O+sPpZDRJsHYFWcywbCQd9kaptH7p0v6wP8AE26BKwmyLjXd1IwtxT8QB
        s9l4kODp9mt9MJ4kKE6UPZUGN9NdgrpyRlPA7PcWawrHu95ZwgxVCCaIYomUjoU4OtjmDACQo1Su
        LSsJOWZwKB4atJZYzPFXRcC0FjAcxLc6YoEJIA48qQKkoretsLjpyVpgZSz1YA6hcq0toA20n4wr
        i9gD7epacRHvFA6kMqGXY/KWwZMKjg2XJ5D/CEG0pgwHUEVhYldZMLxyvlZ7XqmURGgmHZ/Ib/ay
        JORrwx3Z3mMQai44Gqu4Q0jh/pqP994jzzmFW1Z285cu5q4RnQFpb8RoE+qOag5MtAcgDq2nzu0c
        VA0rZ617MVxeyimtW6+E7AYiPq1WRhtisZtz/6Eh9XSUejHWXv/Nd1ORY3d9lxxjeNi+SCGrmjrh
        V6UzNuXL8/B2jTh7Wr9EOULsQQ48Oe9wl+DKsAnVoosfZhjENZig4YLWmPV3f3Yf/gEAAP//AwDn
        zGd0PAQAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7ccfc928d9db1254-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 May 2023 18:19:36 GMT
      Function-Execution-Id:
      - pbmenv06a5yg
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '19200'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - bfb649068e555d640f6ad40b261616c9
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85989'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.674s
      X-Request-Id:
      - 0f8563fa8b875d2635d106aebaf6c721
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Write
      a concise summary of the following text:\n\n\nLITERAL TEXT: \"\"\"Read the file
      instructions_3.txt\"\"\"\n\n\nCONCISE SUMMARY: The text is best summarized as"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '273'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0yOQWsCMRSE7/0VYc7ZZZddq+ZqoUKhl57aWiRmnxrN5m2TJxVk/3sRWtvrMPPN
        d4HvYOD2Vlw/hGL6NP8M9qVvl4vDcnd8Wz6/so9t8/hA/gsavDmQk59F6bgfAonnCA2XyAp1MPX9
        bFI1s+l0rtFzRwEGu0GKppwUckobLqqmqqFxynZHMBcMiftB1sJHihmmrTX+0Le4bjSExYZbMmlH
        Dbdn7yjDvF/QU/5lJg4EA5uzz2KjXA05CsWrvY3Kxyzp5K4PSlglsp2yausDqWh76tQK/yp53ZRy
        lhVKjBpbH33erxPZzBEGWXiAho8dnWGq8WO8+wYAAP//AwC0qgQXWQEAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7ccfc9b398c12c5c-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 May 2023 18:19:41 GMT
      Function-Execution-Id:
      - yvvlzurg1bsa
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '1797'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 87a5b0baa518b220c789956026d896ea;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89461'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 359ms
      X-Request-Id:
      - 6ef56affce707bafde194ae7d76813dc
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["Read the file instructions_3.txt"], "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '111'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        dkxf/8/jf63v+s9//R8AAAD//wMAqjA5m+EgAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7ccfc9c1fd9513d1-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 May 2023 18:19:41 GMT
      Function-Execution-Id:
      - pbme8b7quow8
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '22'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - cc893c79eb41c92650396b5ee03be018
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 6b8a366fd1c0a7253e3a77e7fe91d0dd
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "an instruction to read a file named \"instructions_3.txt\".",
      "model": "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '136'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        N33y+n+v/2t+2n/+678AAAD//wMAP1WwTOMgAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7ccfc9c72cc71244-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 May 2023 18:19:42 GMT
      Function-Execution-Id:
      - yvvldstgvsvm
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '74'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 1dabd53de4282b519b0b347d06fba149
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 93d0b7b83f501e32a6081a99294f07ac
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file to determine what actions
      to take next.\",\n        \"reasoning\": \"The instructions_1.txt file contains
      the necessary information to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_1.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will start by reading the instructions_1.txt file to determine the next
      steps.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: This task_id is 2314\nRead
      the file instructions_2.txt"}, {"role": "user", "content": "Determine which
      next command to use, and respond using the format specified above:"}, {"role":
      "assistant", "content": "{\n    \"thoughts\": {\n        \"text\": \"The next
      instruction is to read the instructions_2.txt file. I should use the read_file
      command to do this.\",\n        \"reasoning\": \"The instructions_2.txt file
      contains additional information that is necessary to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will use the read_file command to read the instructions_2.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_2.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: Read the file instructions_3.txt"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5471'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4SST2/bMAzF7/sUBM92kMBokvnW0xBs2GF/D/MQqDJtq5EpV6LXpIG/+6A4WYoE
        S698JN/vSdyjKTFH3SjRbWfTxcf3T93janm/eVE/v1Tlnyf7+cP8k/vqn1c/MEH38EhajhMT7drO
        khjHmKD2pIRKzGfz5d00Wy6WWYKtK8lijnUnaTa5S6X3Dy6dZtMZJtgHVRPme+y8aztZi9sQB8xn
        s8UswfPyszBfJChOlD2Xsmw5JKgbZzQFzH/tsaVwWuydJcxRhWCCKJaI6ViIY4R9wQAABUrj+rqR
        UGAOx+JRoK3EYoHfGgKmrYDhIL7XEQtMAHHgSZUgDb2WwjqbyFagMpYmsILQuN6W0Ac6dMaRddRA
        u7ZVXMY9pQNpTJgUmLxm8KSCY8P1GeQ/RhCjKcMBVFmaqCoLhivnW3XglUZJhGbS8Yn87mBLQr41
        PJIdMgah7oqjs4pHhBS+38rx1nsUBadwz8ruXuiq7xbRBZD2Row2oR2pVsBEBwDi0Hsa065AtVA5
        a92z4fraTmndeyVkdxDxqaqMNsRid5f5Q0dqc7J6Ntbe/s03r6LAcfuQnM7wOH11haxaGo3/OV2w
        KV9fHu8oxN7z+DXKCeIAcuQpeMAhwcqwCc16PD/MMYjrMEHDJW0xnw6/h3d/AQAA//8DAGvOn0w9
        BAAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7ccfc9ce0ba71101-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 May 2023 18:20:03 GMT
      Function-Execution-Id:
      - pbmewb1rp8v5
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '19929'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 1cc694f7ec27d332fccf8ee536d2fcb3
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85978'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.681s
      X-Request-Id:
      - 097693547d7c7d083fa14613bab59e0f
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Write
      a concise summary of the following text:\n\n\nLITERAL TEXT: \"\"\"Write the
      task_id into the file output.txt Shutdown\"\"\"\n\n\nCONCISE SUMMARY: The text
      is best summarized as"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '292'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0SOTUvDQBCG7/6KZc6bkH7HvQkFRcWLB0WRst2dNmuTmbAzocWS/y4FP64P7/vw
        nCFFcBAar6Hr22L1cJ3XzVd+mU8lR3lb55vn18fb9incHe/BAm8/MejPowzc9S1qYgILIaNXjOAm
        y3pRzeq6WlnoOGILDva9FrNyUeiQt1xUs2oCFgbxewR3hj5z1+tG+YAk4OZzC//qPzypLSirb//I
        cjpaCA2ngALu/Qwdyq8zc4vgwIskUU96KWRSpEt9ItE8BE20N8rmmJOi0QaNejlsUjSJlI03u9Si
        Id9hNDxoP2ipJzWe4mVMRppBIx+phNHCLlGSZpPRCxM4EOUeLCSKeAJXjR/j1TcAAAD//wMAWEdU
        8m4BAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7ccfca5cfb6a117f-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 May 2023 18:20:09 GMT
      Function-Execution-Id:
      - yvvlzdkld8xw
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '2345'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 935ddc3ec26e3fc83995dd88cb4b84e6;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89455'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 362ms
      X-Request-Id:
      - bbe6d9f4186af1ddaf62b36bb61890e7
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["Write the task_id into the file output.txt Shutdown"], "model":
      "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '130'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
        Y33bf/7j/wEAAP//AwDnoBEa4yAAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7ccfca726b5d1041-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 May 2023 18:20:10 GMT
      Function-Execution-Id:
      - pbme52vq34dz
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '252'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - f738b1af12886297fba45c0ea7b50048
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 9c5ecb63a4996b946555161a4a7fe863
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "instructing to write the task_id into a file named output.txt
      and then shutdown.", "model": "text-embedding-ada-002", "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '157'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7ccfca7878ae2a00-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 May 2023 18:20:11 GMT
      Function-Execution-Id:
      - yvvlhpufeil9
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '46'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 649b408d80465f7f39e5760eedb089a8
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - d48b82d9676ed7ffb7da5829ba34e927
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file to determine what actions
      to take next.\",\n        \"reasoning\": \"The instructions_1.txt file contains
      the necessary information to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_1.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will start by reading the instructions_1.txt file to determine the next
      steps.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: This task_id is 2314\nRead
      the file instructions_2.txt"}, {"role": "user", "content": "Determine which
      next command to use, and respond using the format specified above:"}, {"role":
      "assistant", "content": "{\n    \"thoughts\": {\n        \"text\": \"The next
      instruction is to read the instructions_2.txt file. I should use the read_file
      command to do this.\",\n        \"reasoning\": \"The instructions_2.txt file
      contains additional information that is necessary to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will use the read_file command to read the instructions_2.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_2.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: Read the file instructions_3.txt"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"The next instruction is to read the instructions_3.txt file. I should use
      the read_file command to do this.\",\n        \"reasoning\": \"The instructions_3.txt
      file contains additional information that is necessary to determine the next
      steps.\",\n        \"plan\": \"- Use the read_file command to read the instructions_3.txt
      file\\n- Analyze the instructions to determine the next steps\",\n        \"criticism\":
      \"I need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will use the read_file command to read the instructions_3.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_3.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: Write the task_id into the file output.txt\nShutdown"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6533'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5STQW/aQBCF7/0VozkbBKEkxMf20BJ6qqhUqa7Qsh7wFntntTtOiBD/vdo1lOAq
        Snud2XnzvefxAU2JOepKiW5cPbhb3Pv514ePNF1Mvn+u9g/ls6l4ufjyST9+wAx5/Yu0nCaGmhtX
        kxi2mKH2pIRKzMe3s+loMpuNbzJsuKQac9w6GUyG04G0fs2D0WQ0xgzboLaE+QGd58bJSnhHNmA+
        nsymGV7EL437cYbCoupLaXp3e8xQV2w0Bcx/HLChcBb2XBPmqEIwQZSViMlWyEYLh8ICABQoFbfb
        SkKBOZyKpwbtJRYLXFYElvYCxgbxrY5YYAIIw5M3QiAVgaiwW5kSjBVOhY2pCbgV18pQ9jKEOYSK
        27qENnQjaXglvEpPNTeNsmVULaOCCcMCs5dEnlRga+z2gvVnawDTOPbRJxi7Yd+ohCmVErBEZcJd
        EwT1SCVs2MOmldYTeNqQJ6tpCMtXoaLbikA559l5o+SKNxniJJ3AXxL0Tbha2Y5/AN/eCuLf4+1t
        0d6I0SY03ap5iiAqkg3RdIplDqqBNhi7TYqavSctSdmqhiBBxIdynXSkErKgtG69Eqqf+yaDI7U7
        r34ydf32N/+PSyqw23XMzkd80vnrhqONDuNqb49W+W3//LvGOYlO4pWw+3/LzWT8/kyYKE+whT3i
        McONsSZUq+6WMccg7DBDY0vaYz46/jy++w0AAP//AwA43yIrmAQAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7ccfca809d0210d8-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 May 2023 18:20:36 GMT
      Function-Execution-Id:
      - pbme7kantxw2
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '24083'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 0128c66c9918142a24cd829bbc2b234a;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85965'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.69s
      X-Request-Id:
      - 4f56d1467ab6d751cd14534935c37bad
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file to determine what actions
      to take next.\",\n        \"reasoning\": \"The instructions_1.txt file contains
      the necessary information to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_1.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will start by reading the instructions_1.txt file to determine the next
      steps.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: This task_id is 2314\nRead
      the file instructions_2.txt"}, {"role": "user", "content": "Determine which
      next command to use, and respond using the format specified above:"}, {"role":
      "assistant", "content": "{\n    \"thoughts\": {\n        \"text\": \"The next
      instruction is to read the instructions_2.txt file. I should use the read_file
      command to do this.\",\n        \"reasoning\": \"The instructions_2.txt file
      contains additional information that is necessary to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will use the read_file command to read the instructions_2.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_2.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: Read the file instructions_3.txt"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"The next instruction is to read the instructions_3.txt file. I should use
      the read_file command to do this.\",\n        \"reasoning\": \"The instructions_3.txt
      file contains additional information that is necessary to determine the next
      steps.\",\n        \"plan\": \"- Use the read_file command to read the instructions_3.txt
      file\\n- Analyze the instructions to determine the next steps\",\n        \"criticism\":
      \"I need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will use the read_file command to read the instructions_3.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_3.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: Write the task_id into the file output.txt\nShutdown"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"The next instruction is to write the task_id into the
      file output.txt. I should use the write_to_file command to do this.\",\n        \"reasoning\":
      \"The task_id is important information that needs to be saved for future reference.
      The write_to_file command is the appropriate command to use to save this information.\",\n        \"plan\":
      \"- Use the write_to_file command to write the task_id into the file output.txt\",\n        \"criticism\":
      \"I need to ensure that I am using the correct filename and that the task_id
      is written accurately.\",\n        \"speak\": \"I will use the write_to_file
      command to write the task_id into the file output.txt.\"\n    },\n    \"command\":
      {\n        \"name\": \"write_to_file\",\n        \"args\": {\n            \"filename\":
      \"output.txt\",\n            \"text\": \"2314\"\n        }\n    }\n}"}, {"role":
      "system", "content": "Command write_to_file returned: File written to successfully."},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '7667'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5ySW4/TMBCF3/kVo3l2q1al227eVkKCLgiEAAlEUOU609jUsSPPZC9U+e8oTUq7
        5fLAo2c053xnPHt0BWZorBZT1X60eH2ddi+rH/b2buGXt+9evHlYfP4SXxWT9zdvUWHcfCcjw8TY
        xKr2JC4GVGgSaaECs+nVcj6ZLZfPJwqrWJDHDMtaRrPxfCRN2sTRZDaZosKGdUmY7bFOsaplLXFH
        gTuB6VLhSfzUmE8VShTtT6XF1XWr0NjoDDFmX/dYER+FU/SEGWpmx6KDdJgxCIUuwj4PAAA5io1N
        aYVzzGAoDg16kK6Y40dLiUAnghBh2ySxlMAFltSYDpHBBRBLsHWeeAwrYBsbXwDbRqCI931XlxQE
        GnahPLxF8249BCUwsap0KMY5qnOKRJpjcKHsUT64YKib/jeQOjO0muHoUoATPhiDDsURc0Mn0kv/
        2uvQW4/gE9PfwUHin/JeyJnkxBnHVa+5gkB0GKXATerktcAKrL6jM2jtPQQy3demx4M9w4a2MfXg
        0m30qe1lDK5J746e9857aP4jzDjHXrRVx/MZBn67nqAr6v2eGFxg6VReHt75t/cCN94PmU8b4cZ0
        69g23j/+ojqQDYB5aLFVuHXBsV33cpghS6xRoQsFPWA2ab+1z34CAAD//wMAnTqQcAYEAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7ccfcb2e8ebe29c3-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 May 2023 18:20:58 GMT
      Function-Execution-Id:
      - pbmepc01gbzx
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '17906'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - c04b0eee68407fea8158cee793fa60de;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '85953'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 2.697s
      X-Request-Id:
      - 15503d774ef53cf1f960387e503eed2f
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Write
      a concise summary of the following text:\n\n\nLITERAL TEXT: \"\"\"2314\"\"\"\n\n\nCONCISE
      SUMMARY: The text is best summarized as"}], "temperature": 0, "max_tokens":
      0}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '245'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0SOQUvDQBBG7/6K8J03JWmatO5NPXjw4kUQrJTNZtpuTXbCzgSKJf9dClqvD97j
        XRA6WPijUz+Mfb5+uZf6OcR1H58e64fTYWrfl99v52kl8goDbk/k9ddYeB7GnjRwhIFP5JQ62LLZ
        1EW12TSlwcAd9bA4jJpXizrXKbWcF1VRwmASdyDYC8bEw6g75S+KAls1Bv/pGy4LA2V1/Y2smtnA
        Hzl4EtiPCwaSv2binmDhRIKoi3o95KgUr/cuE0qBJON9tucpZXEaWkpisi2WVbnaYoHZYB9ikOMu
        kROOsBDlEQYhdnSGLebP+e4HAAD//wMAiLNr+0EBAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, must-revalidate
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7ccfcbb129082322-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 May 2023 18:21:02 GMT
      Function-Execution-Id:
      - pbmevu50gphf
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '1540'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 850f41e684b09434d8c479bf8334a162;o=1
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '86452'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 354ms
      X-Request-Id:
      - bd62e6c94225740f116d494598aec43a
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["2314"], "model": "text-embedding-ada-002", "encoding_format":
      "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '83'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7ccfcbbd7fb02274-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 May 2023 18:21:04 GMT
      Function-Execution-Id:
      - pbme9l6q6fyb
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '1219'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 4decc7240f714a1a6b1e4c57136ffc0f
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - b844d587eac449c8f5ef8515c53c2549
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "a series of four numbers, \"2314\".", "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      AGENT-MODE:
      - AAAAAAAAAAAAAAAAAAAAAMLheAAaAAAA0%2BuSeid%2BULvsea4JtiGRiSDSJSI%3DEUifiRBkKG5E2XzMDjRfl76ZC9Ub0wnz4XsNiRVBChTYbJcE3F
      AGENT-TYPE:
      - Auto-GPT-2023-X-TYPE
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '112'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        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
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Alt-Svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - private
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Ray:
      - 7ccfcbc95b7df222-ORD
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Thu, 25 May 2023 18:21:04 GMT
      Function-Execution-Id:
      - pbme78psn76u
      Openai-Organization:
      - significant-gravitas
      Openai-Processing-Ms:
      - '70'
      Openai-Version:
      - '2020-10-01'
      Server:
      - Google Frontend
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      Vary:
      - Accept-Encoding
      X-Cloud-Trace-Context:
      - 7b3aeeee5e3b212f52c48ef9748c385c
      X-Powered-By:
      - Express
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Request-Id:
      - 65f5b07aff01746ac5a824644cd2e8bf
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\nThe
      OS you are running on is: Ubuntu 22.04.2 LTS\n\nGOALS:\n\n1. Use the command
      read_file to read the instructions_1.txt file\n2. Follow the instructions in
      the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word limit for short
      term memory. Your short term memory is short, so immediately save important
      information to files.\n2. If you are unsure how you previously did something
      or want to recall past events, thinking about similar events will help you remember.\n3.
      No user assistance\n4. Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. write_to_file:
      Write to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n6.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n9. list_agents: List
      GPT Agents, args: () -> str\n10. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n11. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n12.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "user", "content": "Determine which next command to use, and respond using the
      format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3334'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4SST2/bMAzF7/sUBM92EC9J0/o2YCiQdRiwPz3NRaBItK1FljyJRpMF/u6D4jgd
        kqK7PpF8v0fxgFphjrIWLJvWpMuH1ZePcq6WD5/vv9HXcju/fz+ruk+P37PWYYJu84sknzom0jWt
        IdbOYoLSk2BSmGc3t4vpMlvMZwk2TpHBHKuW09lkkXLnNy6dzqYZJtgFURHmB2y9a1pes9uSDZgv
        58sEX2af9Wx+lyA7FuYs3d7d9AnK2mlJAfOfB2wojGO9M4Q5ihB0YGE5QjrLZGOAQ2EBAArk2nVV
        zaHAHE7i6YF2HMUCVxBq1xkFgYVn2OzBk1DaVsA1gbaBfScjalhnE94xlNoQdGGsiNXroyZd0wir
        JgUm/1p5EsFZbavB70dNUGofGAJTCzoAO+isIh9zqCtXiOJzLTiWevrdaU8KXAkNXTq1RtjBJIXH
        QK/jRbsovhWvKGwKH6ww+z/0OpAiJt9oOzxb2g1xwgWR9Jq11KEZd22JjgRkQ+djs2BYvRm/7IzZ
        w4ZK5wla7yRR/J3L7KElsR1dnrUx///PY9RJgcOYPhmP5rSoq5uxoqHB4bzUCwjhq8tTGx5i7Uv7
        9dZHiCPIiaewPfYJltrqUK+HK8IcA7sWE9RW0Q7zaf/Uv/sLAAD//wMA45HODOkDAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7cd2e99b5c6fe9a4-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 03:26:01 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '18270'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86499'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.334s
      x-request-id:
      - b5f5aa8c3ec85b75f27d68bfcc745c41
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\nThe
      OS you are running on is: Ubuntu 22.04.2 LTS\n\nGOALS:\n\n1. Use the command
      read_file to read the instructions_1.txt file\n2. Follow the instructions in
      the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word limit for short
      term memory. Your short term memory is short, so immediately save important
      information to files.\n2. If you are unsure how you previously did something
      or want to recall past events, thinking about similar events will help you remember.\n3.
      No user assistance\n4. Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. write_to_file:
      Write to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n6.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n9. list_agents: List
      GPT Agents, args: () -> str\n10. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n11. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n12.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nI was
      created"}, {"role": "user", "content": "Determine which next command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I should start by reading the instructions_1.txt
      file using the read_file command.\",\n        \"reasoning\": \"The first step
      is to understand the instructions and what is required of me.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_1.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I understand the instructions fully before proceeding.\",\n        \"speak\":
      \"I will start by reading the instructions file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4415'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4ySTW/bMAyG7/sVAs92ECdLmvq2YzeswID1MMxDoEi0rUaiPIlG0wb+74PjuOmc
        Ydv1Jfny4ccRjIYcVC1ZucamN5/u7r99nuv9z9Xm0aldeb/bVC9f9u1i8fEBEvC7R1R8rpgp7xqL
        bDxBAiqgZNSQZ+vNan6TrdbvE3Beo4UcqobT5WyVcht2Pp0v5xkk0EZZIeRHaIJ3DW/Z75Ei5Lfr
        dQIX71c9Wy0TYM/SXqQsu+0SULU3CiPk34/gMI6+wVuEHGSMJrIk7ik9MVI/wbEgIYQogGvfVjXH
        AnJxFs8BPHAvFnAnCFEL9iKg1IJrFIYih1b1gHG7mPGBRWksijYaqk4Zfer2pCnvnCQ9KyB56x9Q
        Rk+GqqHJ17+49tjSUDwZEx5YRGThy98KBNeSxYW19Nb6p2nXxkoaGqbiIeKfUf9n1KKgVHwgaZ9f
        8CpP9CYaGYMzhG+wGZs4IVLBsFEmuumykWIbcByrJY2hv+M1lShba5/FDksfUDTBK0RtqJrOHhuU
        +7HLk7H23/ek0wYHky4Zf+a8pquXIelw8H9d6QRBhmr6aUOgz72UX+OMECeQM09BHXQJlIZMrLfD
        P0EOkX0DCRjSeIB83v3o3v0CAAD//wMASHHt0ukDAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7cd2ea1e7fd1e9a4-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 03:26:25 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '20708'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '85998'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.668s
      x-request-id:
      - 0a4cec880e7cc8e6c9fd4a8c224e02eb
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\nThe
      OS you are running on is: Ubuntu 22.04.2 LTS\n\nGOALS:\n\n1. Use the command
      read_file to read the instructions_1.txt file\n2. Follow the instructions in
      the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word limit for short
      term memory. Your short term memory is short, so immediately save important
      information to files.\n2. If you are unsure how you previously did something
      or want to recall past events, thinking about similar events will help you remember.\n3.
      No user assistance\n4. Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. write_to_file:
      Write to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n6.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n9. list_agents: List
      GPT Agents, args: () -> str\n10. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n11. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n12.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nI was
      created"}, {"role": "user", "content": "Determine which next command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I should start by reading the instructions_1.txt
      file using the read_file command.\",\n        \"reasoning\": \"The first step
      is to understand the instructions and what is required of me.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_1.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I understand the instructions fully before proceeding.\",\n        \"speak\":
      \"I will start by reading the instructions file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_2.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_2.txt file
      contains the next set of instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I understand the instructions fully before proceeding.\",\n        \"speak\":
      \"I will read the instructions_2.txt file now.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5374'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4ySTW/TQBCG7/yK1ZzXUUyUJvINEIeqLQIEHKhRtNkd29uuZ63dMUmJ/N+R45gU
        BwHX+XjneWfmANZABrpSrOvGJaub63ff74J7/fHDbm2+vOVbev91fvfm5uG2LkGC3z6g5lPHTPu6
        ccjWE0jQARWjgSy9Wi/nq3S5XkmovUEHGZQNJ4vZMuE2bH0yX8xTkNBGVSJkB2iCrxvesH9EipCl
        6dVLCWfxc2K5kMCelTuHFumyk6ArbzVGyO4PUGMchYN3CBmoGG1kRdxjemKk3sIhJyGEyIEr35YV
        xxwycQqeErjnPpjDtSBEI9iLgMoIrlBYihxa3QPGzWLGexaFdSjaaKk8VvSlm2NM+7pWZGY5yOf6
        AVX0ZKkchnz6i2qPrSzFozDhnkVEFr74rUFwpVicWQvvnN9NpzZO0TAwEZ8j/hn1f6zmOSXiFSn3
        9AMv6kQvYpAx1JbwGTZjEydEOli22sZ6umyk2AYcbbVkMPR3vKQSRevck9hi4QOKJniNaCyVU++x
        QfU4TtlZ5/59TzpucBDp5PgzpzVdvAypGgf9XyudIKhQTj9tSPS15/ZLnBHiCHLiyamDTkJhycZq
        M/wTZBDZNyDBksE9ZPPuW/fiJwAAAP//AwASKayp6gMAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7cd2eaafde3be9a4-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 03:26:46 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '18484'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '85993'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.671s
      x-request-id:
      - 34eb238426602367df90ee10e18db817
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\nThe
      OS you are running on is: Ubuntu 22.04.2 LTS\n\nGOALS:\n\n1. Use the command
      read_file to read the instructions_1.txt file\n2. Follow the instructions in
      the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word limit for short
      term memory. Your short term memory is short, so immediately save important
      information to files.\n2. If you are unsure how you previously did something
      or want to recall past events, thinking about similar events will help you remember.\n3.
      No user assistance\n4. Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. write_to_file:
      Write to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n6.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n9. list_agents: List
      GPT Agents, args: () -> str\n10. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n11. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n12.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nI was
      created"}, {"role": "user", "content": "Determine which next command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I should start by reading the instructions_1.txt
      file using the read_file command.\",\n        \"reasoning\": \"The first step
      is to understand the instructions and what is required of me.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_1.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I understand the instructions fully before proceeding.\",\n        \"speak\":
      \"I will start by reading the instructions file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_2.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_2.txt file
      contains the next set of instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I understand the instructions fully before proceeding.\",\n        \"speak\":
      \"I will read the instructions_2.txt file now.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_3.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_3.txt file
      contains the next set of instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_3.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I understand the instructions fully before proceeding.\",\n        \"speak\":
      \"I will read the instructions_3.txt file now.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_3.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Write the task_id
      into the file output.txt\nShutdown"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6353'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5SST2/bMAzF7/sUAs9K4MT50/ncQ4MO22UdMMxDoMqMrcUmPYlGAgT+7oPtBG49
        DF2vj+J7P1K8gMsgAVsYsVVdzraPuy8P93S6f/z2/dNqGZX1E27jwtw9HD6fQAM//0Ir14655aou
        URwTaLAejWAGyWJzt462i030UUPFGZaQQF7LLJ6vZ9L4Z55FcbQADU0wOUJygdpzVcte+IgUIFnE
        m6WG0XwsbJcahMWUo7SOV60GW7CzGCD5cYEKw83Yc4mQgAnBBTEkHSaTIHUjXFJSSqkUpOAmLySk
        kKireC3gWToxhZ0ixEwJq5N3gkoKVGLCce8y5Ui4F7iRupG5nEUdXImqCY7yvtI37YX3vW65qgxl
        8xT0yzSPJjA5yofIrwUqR0F8Y7slBOXxd+M8qgrfx6FVYDUO0AT8N1P3IOtcjEzx6tLQQDZTT295
        /D/dJMV6J866UE33jhQajz2Z2r3wt+w9WnkzZzpOqNEcbyEnV5bv+Vni0zyFwa7Vtzu6zv/XGZGp
        cEh6ta8JkPH59AKHQvd2tBhRXvVPD3YZL1Y3wp7yCptSC62GgyMXiv1wcpBAEK5Bg6MMz5BE7c/2
        wx8AAAD//wMAvsNLCRsEAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7cd2eb32da79e9a4-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 26 May 2023 03:27:10 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '21216'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '85987'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.675s
      x-request-id:
      - b054f20306579e7810b86bc92965ef9e
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\nThe
      OS you are running on is: Ubuntu 22.04.2 LTS\n\nGOALS:\n\n1. Use the command
      read_file to read the instructions_1.txt file\n2. Follow the instructions in
      the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word limit for short
      term memory. Your short term memory is short, so immediately save important
      information to files.\n2. If you are unsure how you previously did something
      or want to recall past events, thinking about similar events will help you remember.\n3.
      No user assistance\n4. Exclusively use the commands listed below e.g. command_name\n\nCommands:\n1.
      append_to_file: Append to file, args: \"filename\": \"<filename>\", \"text\":
      \"<text>\"\n2. delete_file: Delete file, args: \"filename\": \"<filename>\"\n3.
      list_files: List Files in Directory, args: \"directory\": \"<directory>\"\n4.
      read_file: Read a file, args: \"filename\": \"<filename>\"\n5. write_to_file:
      Write to file, args: \"filename\": \"<filename>\", \"text\": \"<text>\"\n6.
      delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7. get_hyperlinks:
      Get hyperlinks, args: \"url\": \"<url>\"\n8. get_text_summary: Get text summary,
      args: \"url\": \"<url>\", \"question\": \"<question>\"\n9. list_agents: List
      GPT Agents, args: () -> str\n10. message_agent: Message GPT Agent, args: \"key\":
      \"<key>\", \"message\": \"<message>\"\n11. start_agent: Start GPT Agent, args:
      \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n12.
      task_complete: Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1.
      Internet access for searches and information gathering.\n2. Long Term memory
      management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File
      output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your
      actions to ensure you are performing to the best of your abilities.\n2. Constructively
      self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions
      and strategies to refine your approach.\n4. Every command has a cost, so be
      smart and efficient. Aim to complete tasks in the least number of steps.\n5.
      Write all code to a file.\n\nYou should only respond in JSON format as described
      below \nResponse Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nI was
      created"}, {"role": "user", "content": "Determine which next command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I should start by reading the instructions_1.txt
      file using the read_file command.\",\n        \"reasoning\": \"The first step
      is to understand the instructions and what is required of me.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_1.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I understand the instructions fully before proceeding.\",\n        \"speak\":
      \"I will start by reading the instructions file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_2.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_2.txt file
      contains the next set of instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I understand the instructions fully before proceeding.\",\n        \"speak\":
      \"I will read the instructions_2.txt file now.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_3.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_3.txt file
      contains the next set of instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_3.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I understand the instructions fully before proceeding.\",\n        \"speak\":
      \"I will read the instructions_3.txt file now.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_3.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Write the task_id
      into the file output.txt\nShutdown"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I need to write the task_id into the output.txt file using the write_to_file
      command.\",\n        \"reasoning\": \"The instructions require me to write the
      task_id into the output.txt file, so I need to use the write_to_file command
      to do that.\",\n        \"plan\": \"- Use the write_to_file command to write
      the task_id into the output.txt file\",\n        \"criticism\": \"I need to
      ensure that I write the correct task_id into the output.txt file.\",\n        \"speak\":
      \"I will write the task_id into the output.txt file now.\"\n    },\n    \"command\":
      {\n        \"name\": \"write_to_file\",\n        \"args\": {\n            \"filename\":
      \"output.txt\",\n            \"text\": \"2314\"\n        }\n    }\n}"}, {"role":
      "system", "content": "Command write_to_file returned: File written to successfully."},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '7362'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA3SRS2/bMBCE7/0VxJ4pw684jm4FiiIpgp5aoEUVGDS1lhjzoXJXsQ1D/73Qw7Wr
        ttdd8puZnTOYHFLQpWLtKpvcf3rdfv84f36c7ec791hV+Pl5efx2evuwPEWQELavqHn4MdHBVRbZ
        BA8SdETFmEM6W62XD4v79cNcggs5WkihqDhZTO4SruM2JNPFdAYSalIFQnqGKgZX8YbDHj1BOrtb
        rSVc4dfFbCWBAyt7Ha3Wy0aCLoPRSJD+OINDuoBjsAgpKCJDrDy3NoNn9G2Ec+aFECIDLkNdlEwZ
        pGIYDgs8cjvM4El4xFxwEFTWnIeDFzUZXwguUbCi/Wawi0IH55TPJxnIW1ZERcEbX/TALyUK44lj
        rduIJCL+rE1E4fBWZUyprPI9IBFfCf8vfwsZMXQ0bLQhN46GnurYMhWLJ1Gqt47WYXOhrO3UBp95
        J0tii7sQsZPi9h7/Mk0Vqv1F7GCsvR7Rh8Mkg/5xIy+FDBn+6sMrhz3nj8wjORWLcZW3FfSA922c
        LsE1ItVaI9Gutvb021XnbDCY+QYaCTvjDZWbHgcpEIcKJBif4xHSafPSvPsFAAD//wMAvNN1YlgD
        AAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7cd2ebc78d28e9a4-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Wed, 24 May 2023 14:18:31 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '19007'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86473'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.35s
      x-request-id:
      - d281dd2fbae62c2925a71cdef320242e
    status:
      code: 200
      message: OK
version: 1
